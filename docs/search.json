[{"path":"/articles/ChIPanalyser.html","id":"introduction---what-is-this-package","dir":"Articles","previous_headings":"","what":"Introduction - What is this package?","title":"The ChIPanalyser User's Guide","text":"ChIPanalyser provides quick easy method predict explain TF binding. package uses statistical thermodynamic framework model bidning proteins DNA. ChIPanalyser makes assumption probability given sites along genome bound TF can explained four main factors: DNA accessibility, Binding energy, scaling factor modulating binding energy (\\(\\lambda\\)) number TF bound (\\(N\\)) DNA. \\(N\\) \\(\\lambda\\) inferred internally maximisng (minimising) goodness fit metric predictions actual ChIP-data. package produce ChIP like profile base pair level. opposed machine learning type frameworks, paramters known means (experimentally), ChIPanalyser require training produce ChIP like profiles. Estimated values can directly plugged model. Furthermore, ChIPanalyser helps gain understanding mechanims behind TF binding described (Zabet et al 2015 & Martin Zabet 2019).","code":""},{"path":"/articles/ChIPanalyser.html","id":"methods---the-model","dir":"Articles","previous_headings":"","what":"Methods - The Model","title":"The ChIPanalyser User's Guide","text":"described , ChIPAnalyser based approximation statistical thermodynamics. core formula describing TF binding given : \\[P(N,,\\lambda,\\omega)_{j} = \\frac{N \\cdot a_{j} \\cdot e^{(\\frac{1}{\\lambda} \\cdot \\omega_{j})}}{N \\cdot a_{j} \\cdot e^{(\\frac{1}{\\lambda} \\cdot \\omega_{j})}+ L \\cdot n \\cdot [a_{} \\cdot e^{(\\frac{1} \\lambda \\cdot \\omega_j)}]_ {}} \\] N , number TF molecules bound DNA , DNA accessibility \\(\\lambda\\) , parameter scaling specificity given TF \\(\\omega\\) , Position Weight Matrix.","code":""},{"path":"/articles/ChIPanalyser.html","id":"work-flow","dir":"Articles","previous_headings":"","what":"Work Flow","title":"The ChIPanalyser User's Guide","text":"next section split following subsections Loading Data - Description internal Data. use data work flow example. Quick Start - give quick start example. core functionalities work flow described section. Advanced Work - describe indepth work flow. Parameter Description - give depth description parameter used ChIPAnalyser","code":""},{"path":"/articles/ChIPanalyser.html","id":"loading-data","dir":"Articles","previous_headings":"Work Flow","what":"Loading Data","title":"The ChIPanalyser User's Guide","text":"going inner workings package work flow, section quickly demonstrate load example datasets stored package. data represents minimal workable examples different functions. data derived real biological data Drosophila melanogaster (Drosophila melanogaster genome can found BSgenome ). global environment now contain new variables: DNASequenceSet, PFM, Access, geneRef, top, chip. DNASequenceSet DNAStringSet extracted Drosophila melanogaster genome (BSgenome). advised use full genome sequence object. PFM path file. case, Position Frequency Matrix derived Bicoid Transcription factor Drosophila melanogasterin RAW format. provide loading support JASPAR, Transfac RAW. wish use format, suggest use MotifDb package (load PFM matrix R) parse matrix ChIPanalyser. scenario, PFMFormat argument set matrix (see information). Access GRanges object containing accessible DNA sequence . geneRef GRanges containing gene reference annotations. top GRanges object 4 genomic regions containing BEAF-32 binding. chip GRanges ChIP score BEAF-32 Transcription Factor. IMPORTANT: Data sets provided package currated meet size requirements Bioconductor packages. Please read instruction carefully describe incorportate data pipe line. NOTE can download gene reference (Genome UCSC website)[https://genome.ucsc.edu/]","code":"library(ChIPanalyser)  #Load data data(ChIPanalyserData)   # Loading DNASequenceSet from BSgenome object # We recommend using the latest version of the genome  # Please ensure that all your data is aligned to the same version of the genome  library(BSgenome.Dmelanogaster.UCSC.dm6)  DNASequenceSet <- getSeq(BSgenome.Dmelanogaster.UCSC.dm6)    #Loading Position Frequency Matrix  PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\")  #Checking if correctly loaded ls() ## [1] \"Access\"         \"chip\"           \"cs\"             \"DNASequenceSet\" ## [5] \"geneRef\"        \"PFM\"            \"top\""},{"path":[]},{"path":"/articles/ChIPanalyser.html","id":"step-1---extracting-normalised-chip-scores-from-chip-seq-datasets","dir":"Articles","previous_headings":"Work Flow > Quick Start","what":"Step 1 - Extracting Normalised ChIP scores from ChIP-seq datasets","title":"The ChIPanalyser User's Guide","text":"ChIPAnalyser requires ChIP data order infer optimal set values assigned bound Molecules lambda. package maximise (minimise) goodness fit metric predictions ChIP data. inferred approximated values assigned \\(N\\) \\(\\lambda\\) means, skip step go directly Advanced Work. chip can connection ChIP data, GRanges ChIP data frame (bed format style) loci GRanges object containing loci interest. Default set NULL (see Advanced Work) output processingChIP returns ChIPScore object containing extracted normalised ChIP scores, loci interest internal parameters associated ChIP extractions process.","code":"chip <- processingChIP(profile = chip,                       loci = top,                       cores = 1) chip ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##                         ChIP score from 4 regions  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ## [ 1 ]  chr3L:20300001..20320000 [ 2 ]  chr2L:6480001..6500000 [ 3 ]  chr3R:16140001..16160000 [ 4 ]  chr2L:19500001..19520000  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##                         Top  4  regions  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ## GRanges object with 4 ranges and 0 metadata columns: ##                            seqnames            ranges strand ##                               <Rle>         <IRanges>  <Rle> ##   chr3L:20300001..20320000    chr3L 20300001-20320000      * ##     chr2L:6480001..6500000    chr2L   6480001-6500000      * ##   chr3R:16140001..16160000    chr3R 16140001-16160000      * ##   chr2L:19500001..19520000    chr2L 19500001-19520000      * ##   ------- ##   seqinfo: 3 sequences from an unspecified genome; no seqlengths ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##                         Associated Options  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##  backgroundSignal:                           0.0354659475382993  ##  maxSignal:                                                   1  ##  chipMean:                                                  200  ##  chipSd:                                                    200  ##  chipSmooth:                                                250  ##  lociWidth:                                               20000  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"},{"path":"/articles/ChIPanalyser.html","id":"step-2---computing-a-pwms","dir":"Articles","previous_headings":"Work Flow > Quick Start","what":"Step 2 - Computing a PWMs","title":"The ChIPanalyser User's Guide","text":"model relies Postion Weight Matrix. genomicProfiles serve way storing important paramters. importantly, object stores intermediate results make way analysis pipeline. Position Frequency Matrix: Position Weight Matrix:","code":"# PFMs are automatically converted to PWM when build genomicProfiles GP <- genomicProfiles(PFM = PFM, PFMFormat = \"JASPAR\") GP ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##                         genomicProfiles object: Position Weight Matrix  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ## Position Weight Matrix (PWM):  ##   ##         [,1]        [,2]       [,3]       [,4]         [,5]        [,6] ## A -0.2891885 -0.03809741  0.2316372  0.6301128  0.687738702  0.79025750 ## C -0.1331731  0.36623770 -0.1622533  0.3097032 -1.062881002 -1.12273432 ## G  0.1277129 -0.16225333  0.2729606 -0.2758771 -0.395107494  0.01666913 ## T  0.2147795 -0.29456303 -0.5529272 -8.2905435 -0.008313437 -0.79001402 ##         [,7]       [,8]      [,9]     [,10]     [,11]     [,12]      [,13] ## A  0.4399853 -0.2905294  1.366596 -8.290544 -8.290544 -2.557202  1.2881138 ## C  0.6139508 -0.4502305 -8.290544 -8.290544  1.386106 -8.290544 -8.2905435 ## G -0.5119134 -8.2905435 -2.557202 -8.290544 -8.290544  1.366596 -0.9846835 ## T -8.2905435  0.9610348 -8.290544  1.386106 -8.290544 -8.290544 -8.2905435 ##       [,14]       [,15] ## A -0.844542  0.77465549 ## C -1.766981 -8.29054350 ## G -8.290544 -0.23443384 ## T  1.223525  0.03814908 ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ## Base pairs frequency for PWM weighting :  ##   ##    A    C    G    T  ## 0.25 0.25 0.25 0.25  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ## PWM built from (PFM - Format  JASPAR ) :  ##   ##   [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] ## A  746  959 1256 1871 1982 2196 1547  745 3908     0     0    77  3613   428 ## C  872 1437  847 1358  344  324 1841  635    0     0  3985     0     0   170 ## G 1132  847 1309  756  671 1013  597    0   77     0     0  3908   372     0 ## T 1235  742  573    0  988  452    0 2605    0  3985     0     0     0  3387 ##   [,15] ## A  2162 ## C     0 ## G   788 ## T  1035 ##  ##  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ GP <- genomicProfiles(PWM=PositionWeightMatrix)"},{"path":"/articles/ChIPanalyser.html","id":"step-3---computing-optimal-parameters","dir":"Articles","previous_headings":"Work Flow > Quick Start","what":"Step 3 - Computing Optimal Parameters","title":"The ChIPanalyser User's Guide","text":"described , ChIPanalyser infers optimal combination bound molecules lambda maximise (minimise) goodness fit metric. following function computes optimal set parameters returns intermediate steps analysis pipeline. , parsing follwing: DNA sequence, Position Weight Matrix (contained genomicProfiles), chromatin States (Accessible DNA - optional), extracted/normalised experimental ChIP score (result processingChIP function). NOTE Default Optimal parameters provided internally following: NOTE change parameters see Advanced Work","code":"## surpress dependency warnings optimal <- suppressWarnings(computeOptimal(genomicProfiles = GP,                         DNASequenceSet = DNASequenceSet,                         ChIPScore = chip,                         chromatinState = Access)) ## Computing Genome Wide PWM Score ## Computing PWM Score at Loci & Extracting Sites Above Threshold ## Computing Occupancy ## Computing ChIP-seq-like Profile ## Computing Accuracy of Profile ## Lambda Values  seq(0.25,5,by=0.25) ##  [1] 0.25 0.50 0.75 1.00 1.25 1.50 1.75 2.00 2.25 2.50 2.75 3.00 3.25 3.50 3.75 ## [16] 4.00 4.25 4.50 4.75 5.00 ## Bound Molecule Values  c(1, 10, 20, 50, 100,     200, 500,1000,2000, 5000,10000,20000,50000, 100000,     200000, 500000, 1000000) ##  [1] 1e+00 1e+01 2e+01 5e+01 1e+02 2e+02 5e+02 1e+03 2e+03 5e+03 1e+04 2e+04 ## [13] 5e+04 1e+05 2e+05 5e+05 1e+06"},{"path":"/articles/ChIPanalyser.html","id":"step-4---extracting-optimal-paramters-prelim","dir":"Articles","previous_headings":"Work Flow > Quick Start","what":"Step 4 - Extracting Optimal Paramters (Prelim)","title":"The ChIPanalyser User's Guide","text":"computed, extract optimal set parameters. can see opitmal set parameters suggested ChIPanalyser.","code":"optimalParam <- optimal$Optimal optimalParam$OptimalParameters ## $pearson ##         lambda boundMolecules  ##          1e+00          1e+06  ##  ## $spearman ##         lambda boundMolecules  ##            0.5            1.0  ##  ## $kendall ##         lambda boundMolecules  ##            0.5            1.0  ##  ## $KsDist ##         lambda boundMolecules  ##           4.75         200.00  ##  ## $geometric ##         lambda boundMolecules  ##              5            100  ##  ## $precision ##         lambda boundMolecules  ##            0.5            1.0  ##  ## $recall ##         lambda boundMolecules  ##            2.5         1000.0  ##  ## $f1 ##         lambda boundMolecules  ##           0.75           1.00  ##  ## $accuracy ##         lambda boundMolecules  ##           0.25        2000.00  ##  ## $MCC ##         lambda boundMolecules  ##            0.5            1.0  ##  ## $AUC ##         lambda boundMolecules  ##              2             10  ##  ## $MSE ##         lambda boundMolecules  ##              5             50"},{"path":"/articles/ChIPanalyser.html","id":"step-5---plotting-optimal-set-of-parameters","dir":"Articles","previous_headings":"Work Flow > Quick Start","what":"Step 5 - Plotting Optimal Set of Parameters","title":"The ChIPanalyser User's Guide","text":"Despite ChIPanalyser returning suggested optimal parameters, may wish visualise optimal parameters paramter combination choose set parameters. effect, implemented Optimal parameter plotting fucntion.","code":"# Plotting Optimal heat maps par(oma=c(0,0,3,0)) layout(matrix(1:8,ncol=4, byrow=T),width=c(6,1.5,6,1.5),height=c(1,1)) plotOptimalHeatMaps(optimalParam,layout=FALSE)"},{"path":"/articles/ChIPanalyser.html","id":"step-6---extracting-optimal-set-of-parameters-with-associated-data","dir":"Articles","previous_headings":"Work Flow > Quick Start","what":"Step 6 - Extracting Optimal Set of Parameters with associated data","title":"The ChIPanalyser User's Guide","text":"satisfied choice optimal parameters, can extracted data associated parameters. can select one parameter however values assigned argument must one values used computing optimal set parameters.","code":"optimalParam <- searchSites(optimal,lambdaPWM = 1.25,BoundMolecules = 10000)"},{"path":"/articles/ChIPanalyser.html","id":"step-7---plotting-chip_seq-like-profiles","dir":"Articles","previous_headings":"Work Flow > Quick Start","what":"Step 7 - Plotting ChIP_seq like profiles","title":"The ChIPanalyser User's Guide","text":"final step plot computed predicted profiles. provide plotting function produce predicted profile plots.","code":"plotOccupancyProfile(predictedProfile = optimalParam$ChIPProfiles,                      ChIPScore = chip,                      chromatinState = Access,                      occupancy = optimalParam$Occupancy,                      goodnessOfFit = optimalParam$goodnessOfFit,                      geneRef = geneRef)"},{"path":"/articles/ChIPanalyser.html","id":"advanced-work","dir":"Articles","previous_headings":"Work Flow","what":"Advanced Work","title":"The ChIPanalyser User's Guide","text":"section describe depth work flow. include parameter tweakin, annexe functions insights outputs functions.","code":""},{"path":"/articles/ChIPanalyser.html","id":"step-1---parameter-set-up","dir":"Articles","previous_headings":"Work Flow > Advanced Work","what":"Step 1 - Parameter Set Up","title":"The ChIPanalyser User's Guide","text":"parameters can changed step pipeline. parameters enable tweak improve quality analysis. many parameters choose . parameters already default value assigned . NOTE wish , can change parameters step. parameters parsed different steps pipeline long parse object step analysis.","code":"## Suggested Parameters to start with. parameterOptions() ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##                         parameterOptions  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##  processingChIP options  ##   ##  chipMean:                                                  200  ##  chipSd:                                                    200  ##  chipSmooth:                                                250  ##  lociWidth:                                               20000  ##  noiseFilter:                                              zero  ##   ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##  processingChIP options Updated  ##   ##  maxSignal:                                                   1  ##  backgroundSignal:                                            0  ##   ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##  Position Weight Matrix Options  ##   ##  naturalLog:                                               TRUE  ##  noOfSites:                                                 all  ##  PWMpseudocount:                                              1  ##   ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##  Genome Wide Score options  ##   ##  strandRule:                                                max  ##  whichstrand:                                                +-  ##  lambdaPWM:                                                   1  ##   ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##  PWM Scores above Threshold options  ##   ##  strandRule:                                                max  ##  whichstrand:                                                +-  ##   ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##  Occupancy options  ##   ##  Ploidy:                                                      2  ##  lambdaPWM:                                                   1  ##  boundMolecules:                                           1000  ##  maxSignal:                                                   1  ##  backgroundSignal:                                            0  ##   ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##  ChIP Profile options  ##   ##  chipMean:                                                  200  ##  chipSd:                                                    200  ##  chipSmooth:                                                250  ##  stepSize:                                                   10  ##   ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ## Changing parameters PO <- parameterOptions(noiseFilter=\"sigmoid\",chipSd=150,chipMean=150,lociWidth=30000)"},{"path":"/articles/ChIPanalyser.html","id":"step-2---extracting-normalised-chip-scores-","dir":"Articles","previous_headings":"Work Flow > Advanced Work","what":"Step 2 - Extracting Normalised ChIP scores.","title":"The ChIPanalyser User's Guide","text":"case pre-determined idea loci wish look . processingChIP function offers possibilities work around issue. Loci computed internally based ChIP score provided. ChIP Scores tilled bins width equals value assigned lociWidth argument parameterOptions object (see ). default loci width set 20 kbp. Top regions selected based ordered ChIP scores. genomic formats supported ChIPanalyser (wig, bed, bedGraph, bigWig, bigBed). “path//file” may also GRanges object. processingChIP function returns extracted/Normalised ChIP scores (list numeric vectors), loci inetrest (GRanges), associated paramters extracted (maxSignal backgroundSignal). loci top n regions selected reduce argument. Using loci() accessor applied ChIPScore object return GRanges selected loci. scores() accessors applied ChIPScore object return normalised scores associated Locus. NOTE function also supports multi core computing.","code":"## Top 50 loci based on ChIP score processingChIP(profile = \"/path/to/ChIP\",                loci = NULL,                reduce = 50,                parameterOptions = PO)  ## Top 50 loci ALSO containing peaks processingChIP(profile = \"/path/to/ChIP\",                loci = NULL,                reduce = 50,                peaks = \"/path/to/peaks\",                parameterOptions=PO)  ## Top 50 loci containing BOTH peaks and Accessible DNA processingChIP(profile = \"/path/to/ChIP\",                loci = NULL,                reduce = 50,                peaks = \"/path/to/peaks\",                chromatinState = \"/path/to/chromatinState\",                parameterOptions = PO)"},{"path":"/articles/ChIPanalyser.html","id":"step-3---position-weight-matrix-and-associated-paramters","dir":"Articles","previous_headings":"Work Flow > Advanced Work","what":"Step 3 - Position Weight Matrix and Associated Paramters","title":"The ChIPanalyser User's Guide","text":"Computing PWM PFMs can tweaked using additional parameters. PWMs depend Base Pair Frequency genome interest. Either can provide vector containing base pair frequency (C T G order) genomicProfiles object compute internally provide BSgenome/DNAStringSet. genomicProfiles object also contains parameters described parameterOptions. makes parsing parameters straight forward step analysis pipeline. genomicProfiles object updated internally provided parameters. object also main object parse step analysis. different ways add new paramters: NOTE parameterOptions object can parsed function analysis pipeline parameters need changed along way.","code":"str(genomicProfiles()) ## Formal class 'genomicProfiles' [package \"ChIPanalyser\"] with 31 slots ##   ..@ PWM               : num[0 , 0 ]  ##   ..@ PFM               : num[0 , 0 ]  ##   ..@ PFMFormat         : chr \"raw\" ##   ..@ BPFrequency       : num [1:4] 0.25 0.25 0.25 0.25 ##   ..@ minPWMScore       : logi(0)  ##   ..@ maxPWMScore       : logi(0)  ##   ..@ profiles          :Formal class 'CompressedGRangesList' [package \"GenomicRanges\"] with 5 slots ##   .. .. ..@ unlistData     :Formal class 'GRanges' [package \"GenomicRanges\"] with 7 slots ##   .. .. .. .. ..@ seqnames       :Formal class 'Rle' [package \"S4Vectors\"] with 4 slots ##   .. .. .. .. .. .. ..@ values         : Factor w/ 0 levels:  ##   .. .. .. .. .. .. ..@ lengths        : int(0)  ##   .. .. .. .. .. .. ..@ elementMetadata: NULL ##   .. .. .. .. .. .. ..@ metadata       : list() ##   .. .. .. .. ..@ ranges         :Formal class 'IRanges' [package \"IRanges\"] with 6 slots ##   .. .. .. .. .. .. ..@ start          : int(0)  ##   .. .. .. .. .. .. ..@ width          : int(0)  ##   .. .. .. .. .. .. ..@ NAMES          : NULL ##   .. .. .. .. .. .. ..@ elementType    : chr \"ANY\" ##   .. .. .. .. .. .. ..@ elementMetadata: NULL ##   .. .. .. .. .. .. ..@ metadata       : list() ##   .. .. .. .. ..@ strand         :Formal class 'Rle' [package \"S4Vectors\"] with 4 slots ##   .. .. .. .. .. .. ..@ values         : Factor w/ 3 levels \"+\",\"-\",\"*\":  ##   .. .. .. .. .. .. ..@ lengths        : int(0)  ##   .. .. .. .. .. .. ..@ elementMetadata: NULL ##   .. .. .. .. .. .. ..@ metadata       : list() ##   .. .. .. .. ..@ seqinfo        :Formal class 'Seqinfo' [package \"GenomeInfoDb\"] with 4 slots ##   .. .. .. .. .. .. ..@ seqnames   : chr(0)  ##   .. .. .. .. .. .. ..@ seqlengths : int(0)  ##   .. .. .. .. .. .. ..@ is_circular: logi(0)  ##   .. .. .. .. .. .. ..@ genome     : chr(0)  ##   .. .. .. .. ..@ elementMetadata:Formal class 'DFrame' [package \"S4Vectors\"] with 6 slots ##   .. .. .. .. .. .. ..@ rownames       : NULL ##   .. .. .. .. .. .. ..@ nrows          : int 0 ##   .. .. .. .. .. .. ..@ elementType    : chr \"ANY\" ##   .. .. .. .. .. .. ..@ elementMetadata: NULL ##   .. .. .. .. .. .. ..@ metadata       : list() ##   .. .. .. .. .. .. ..@ listData       : Named list() ##   .. .. .. .. ..@ elementType    : chr \"ANY\" ##   .. .. .. .. ..@ metadata       : list() ##   .. .. ..@ elementMetadata:Formal class 'DFrame' [package \"S4Vectors\"] with 6 slots ##   .. .. .. .. ..@ rownames       : NULL ##   .. .. .. .. ..@ nrows          : int 0 ##   .. .. .. .. ..@ elementType    : chr \"ANY\" ##   .. .. .. .. ..@ elementMetadata: NULL ##   .. .. .. .. ..@ metadata       : list() ##   .. .. .. .. ..@ listData       : Named list() ##   .. .. ..@ elementType    : chr \"GRanges\" ##   .. .. ..@ metadata       : list() ##   .. .. ..@ partitioning   :Formal class 'PartitioningByEnd' [package \"IRanges\"] with 5 slots ##   .. .. .. .. ..@ end            : int(0)  ##   .. .. .. .. ..@ NAMES          : NULL ##   .. .. .. .. ..@ elementType    : chr \"ANY\" ##   .. .. .. .. ..@ elementMetadata: NULL ##   .. .. .. .. ..@ metadata       : list() ##   ..@ DNASequenceLength : logi(0)  ##   ..@ averageExpPWMScore: logi(0)  ##   ..@ ZeroBackground    : logi(0)  ##   ..@ drop              : logi(0)  ##   ..@ tags              : chr \"empty\" ##   ..@ ploidy            : num 2 ##   ..@ boundMolecules    : num 1000 ##   ..@ backgroundSignal  : num 0 ##   ..@ maxSignal         : num 1 ##   ..@ lociWidth         : num 20000 ##   ..@ chipMean          : num 200 ##   ..@ chipSd            : num 200 ##   ..@ chipSmooth        : num 250 ##   ..@ stepSize          : num 10 ##   ..@ removeBackground  : num 0 ##   ..@ noiseFilter       : chr \"zero\" ##   ..@ PWMThreshold      : num 0.7 ##   ..@ strandRule        : chr \"max\" ##   ..@ whichstrand       : chr \"+-\" ##   ..@ lambdaPWM         : num 1 ##   ..@ naturalLog        : logi TRUE ##   ..@ noOfSites         : chr \"all\" ##   ..@ PWMpseudocount    : num 1 ##   ..@ paramTag          : chr \"empty\" GP <- genomicProfiles(PFM=PFM, PFMFormat=\"JASPAR\", BPFrequency=DNASequenceSet) GP ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##                         genomicProfiles object: Position Weight Matrix  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ## Position Weight Matrix (PWM):  ##   ##          [,1]        [,2]        [,3]       [,4]       [,5]       [,6] ## A -0.43767288 -0.18659373  0.08313105  0.4815961  0.5392208  0.6417377 ## C  0.04045561  0.53988434  0.01137399  0.4833483 -0.8893224 -0.9491829 ## G  0.30241584  0.01243766  0.44766827 -0.1011918 -0.2204289  0.1913679 ## T  0.06672312 -0.44259797 -0.70094631 -8.2905435 -0.1563618 -0.9380145 ##         [,7]       [,8]      [,9]     [,10]     [,11]     [,12]      [,13] ## A  0.2914731 -0.4390137  1.218068 -8.290544 -8.290544 -2.705222  1.1395868 ## C  0.7876035 -0.2766189 -8.290544 -8.290544  1.559771 -8.290544 -8.2905435 ## G -0.3372422 -8.2905435 -2.382983 -8.290544 -8.290544  1.541324 -0.8100529 ## T -8.2905435  0.8129614 -8.290544  1.238027 -8.290544 -8.290544 -8.2905435 ##        [,14]      [,15] ## A -0.9929866  0.6261359 ## C -1.5935410 -8.2905435 ## G -8.2905435 -0.0597464 ## T  1.0754476 -0.1099011 ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ## Base pairs frequency for PWM weighting :  ##   ##         A         C         G         T  ## 0.2900342 0.2101426 0.2099192 0.2899039  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ## PWM built from (PFM - Format  JASPAR ) :  ##   ##   [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] ## A  746  959 1256 1871 1982 2196 1547  745 3908     0     0    77  3613   428 ## C  872 1437  847 1358  344  324 1841  635    0     0  3985     0     0   170 ## G 1132  847 1309  756  671 1013  597    0   77     0     0  3908   372     0 ## T 1235  742  573    0  988  452    0 2605    0  3985     0     0     0  3387 ##   [,15] ## A  2162 ## C     0 ## G   788 ## T  1035 ##  ##  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ## Parsing pre computed parameters (processingChIP function) GP <- genomicProfiles(PFM = PFM,                       PFMFormat = \"JASPAR\",                      BPFrequency = DNASequenceSet,                      ChIPScore = ChIPScore)  ## Parsing pre assigned function (parameterOptions) parameterOptions <- parameterOptions(lambdaPWM = c(1,2,3),                                      boundMolecules = c(5,50,500)) GP <- genomicProfiles(PFM = PFM,                       PFMFormat = \"JASPAR\",                       BPFrequency = DNASequenceSet,                      parameterOptions = parameterOptions)  ## Direct parameter assignement  GP <- genomicProfiles(PFM = PFM,                       PFMFormat = \"JASPAR\",                       BPFrequency = DNASequenceSet,                       lambdaPWM = c(1,2,3),                      boundMolecules = c(4,500,8000))"},{"path":"/articles/ChIPanalyser.html","id":"step-4---computing-optimal-set-of-parameters","dir":"Articles","previous_headings":"Work Flow > Advanced Work","what":"Step 4 - Computing Optimal Set of Parameters","title":"The ChIPanalyser User's Guide","text":"optimal set parameters can computed custom set values \\(N\\) \\(\\lambda\\). described , ways modify parameter Options. assign two values slots, new values used “Optimal Parameters Combinations”. NOTE parameterOptions inherited genomicProfiles hence can also assign paramters genomicProfiles contructor. computeOptimal function offers options briefly describe . returnAll argument set FALSE, optimal parameters return. internal Data returned. Optimal Parameters determined selecting best perfomring combination paremeters. goodness fit score combination averaged regions considered. rank argument set TRUE, optimal parameters based combination parameters showed best performance regions individually. Parameter combinations ranked based many individual regions performed best specific set parameters. Finally, optimalMethod argument enbale selected goodness Fit method wish use.","code":"## Setting custom parameters OP <- parameterOptions(lambdaPWM = seq(1,10,by=0.5),                        boundMolecules = seq(1,100000, length.out=20))  ## Computing ONLY Optimal Parameters and MSE as goodness Of Fit metric optimal <- computeOptimal(genomicProfiles = GP,                          DNASequenceSet = DNASequenceSet,                          ChIPScore = chip,                          chromatinState = Access,                          parameterOptions = OP,                          optimalMethod = \"MSE\",                          returnAll = FALSE)  ### Computing ONLY Optimal Parameters and using Rank slection method optimal <- computeOptimal(genomicProfiles = GP,                          DNASequenceSet = DNASequenceSet,                          ChIPScore = chip,                          chromatinState = Access,                          parameterOptions = OP,                          optimalMethod = \"all\",                          rank=TRUE)"},{"path":"/articles/ChIPanalyser.html","id":"step-5---extracting-and-plotting-optimal-parameters","dir":"Articles","previous_headings":"Work Flow > Advanced Work","what":"Step 5 - Extracting and Plotting Optimal Parameters","title":"The ChIPanalyser User's Guide","text":"Now selected custom parameters, want plot associated heat maps. possible plot overlay optimal set paramters goodness Fit methods. Using overlay argument plotting function plot overlay top 10% optimal parameters selected Goodness fit metric.","code":"## Extracted Optimal Parameters optimalParam <- optimal$Optimal  ## Plotting heat maps plotOptimalHeatMaps(optimalParam,overlay=TRUE)"},{"path":"/articles/ChIPanalyser.html","id":"step-6---computing-individual-parameter-combinations","dir":"Articles","previous_headings":"Work Flow > Advanced Work","what":"Step 6 - Computing individual parameter combinations","title":"The ChIPanalyser User's Guide","text":"Let’s imagine looking optimal parameter heat maps, like run combination parameters ones provided want re-compute optimal parameters. Let us imagine already estimate number bound molecules. ChIPanalyser provides functions enable run piple line individual parameter combinations. steps described following: NOTE functions can compute multiple parameter combinations needed. computeOptimal essentially combination functions little magic . information functions see Parameters Discription","code":"## Creating genomic Profiles object with PFMs and associated parameters GP <- genomicProfiles(PFM = PFM,                       PFMFormat = \"JASPAR\",                       BPFrequency = DNASequenceSet,                       lambdaPWM = 1,                        boundMolecules = 58794)  ## Computing Genome Wide Score required GW <- computeGenomeWideScores(genomicProfiles = GP,                               DNASequenceSet = DNASequenceSet,                               chromatinState = Access) ## Extracting genome wide scores ## Considering Chromatin State ~ Both strands ## Computing Mean waiting time GW ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##                         genomicProfiles object: Accessible Chromatin Score  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##  Position Weight Matrix (PWM):  ##   ##          [,1]        [,2]        [,3]       [,4]       [,5]       [,6] ## A -0.43767288 -0.18659373  0.08313105  0.4815961  0.5392208  0.6417377 ## C  0.04045561  0.53988434  0.01137399  0.4833483 -0.8893224 -0.9491829 ## G  0.30241584  0.01243766  0.44766827 -0.1011918 -0.2204289  0.1913679 ## T  0.06672312 -0.44259797 -0.70094631 -8.2905435 -0.1563618 -0.9380145 ##         [,7]       [,8]      [,9]     [,10]     [,11]     [,12]      [,13] ## A  0.2914731 -0.4390137  1.218068 -8.290544 -8.290544 -2.705222  1.1395868 ## C  0.7876035 -0.2766189 -8.290544 -8.290544  1.559771 -8.290544 -8.2905435 ## G -0.3372422 -8.2905435 -2.382983 -8.290544 -8.290544  1.541324 -0.8100529 ## T -8.2905435  0.8129614 -8.290544  1.238027 -8.290544 -8.290544 -8.2905435 ##        [,14]      [,15] ## A -0.9929866  0.6261359 ## C -1.5935410 -8.2905435 ## G -8.2905435 -0.0597464 ## T  1.0754476 -0.1099011 ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##  maxPWMScore:                                11.1310200679306 ##  minPWMScore:                               -59.5942907981563 ##  averageExpPWMScore:             8.29141420231848 (lambda = 1) ##  DNASequenceLength:                                     10471 ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ## ## Computing PWM score above threshold pwm <- computePWMScore(genomicProfiles = GW,                        DNASequenceSet = DNASequenceSet,                        loci = chip,                        chromatinState = Access) ## PWM Scores Extraction pwm ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##                         genomicProfiles object: PWM scores above Threshold  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##  Scores above Threshold in locus:   ## GRanges object with 169 ranges and 2 metadata columns: ##                            seqnames            ranges strand |  PWMScore ##                               <Rle>         <IRanges>  <Rle> | <numeric> ##   chr3L:20300001..20320000    chr3L 20300005-20300019      - | -0.260743 ##   chr3L:20300001..20320000    chr3L 20300015-20300029      + | -3.581791 ##   chr3L:20300001..20320000    chr3L 20300022-20300036      - |  2.266402 ##   chr3L:20300001..20320000    chr3L 20300066-20300080      + | -7.941449 ##   chr3L:20300001..20320000    chr3L 20300293-20300307      + | -6.443234 ##                        ...      ...               ...    ... .       ... ##   chr3L:20300001..20320000    chr3L 20318607-20318621      - |  -9.10951 ##   chr3L:20300001..20320000    chr3L 20318620-20318634      + |  -3.39948 ##   chr3L:20300001..20320000    chr3L 20318676-20318690      - | -10.03808 ##   chr3L:20300001..20320000    chr3L 20318724-20318738      + |  -7.80125 ##   chr3L:20300001..20320000    chr3L 20318728-20318742      + |  -6.63695 ##                            DNAaffinity ##                              <numeric> ##   chr3L:20300001..20320000           1 ##   chr3L:20300001..20320000           1 ##   chr3L:20300001..20320000           1 ##   chr3L:20300001..20320000           1 ##   chr3L:20300001..20320000           1 ##                        ...         ... ##   chr3L:20300001..20320000           1 ##   chr3L:20300001..20320000           1 ##   chr3L:20300001..20320000           1 ##   chr3L:20300001..20320000           1 ##   chr3L:20300001..20320000           1 ##   ------- ##   seqinfo: 1 sequence from an unspecified genome; no seqlengths ##  ##  3  remaining loci  ##  Locus:                chr2L:6480001..6500000 (length = 150) ##  Locus:                chr3R:16140001..16160000 (length = 121) ##  Locus:                chr2L:19500001..19520000 (length = 79) ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##                         Associated parameters  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##  minPWMScore:                               -59.5942907981563 ##  maxPWMScore:                                11.1310200679306 ##  lambdaPWM:                                                 1 ##  PWMThreshold:                                            0.7 ## Computing Occupancy of sites above threshold  occup <- computeOccupancy(genomicProfiles = pwm) ## Computing Occupancy at sites higher than threshold. occup ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##                         genomicProfiles object: Occupancy at sites above Threshold  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##  Parameter combination:  lambda = 1 & boundMolecules = 58794  ##   ## $`lambda = 1 & boundMolecules = 58794` ## GRangesList object of length 4: ## $`chr3L:20300001..20320000` ## GRanges object with 169 ranges and 3 metadata columns: ##                            seqnames            ranges strand |  PWMScore ##                               <Rle>         <IRanges>  <Rle> | <numeric> ##   chr3L:20300001..20320000    chr3L 20300005-20300019      - | -0.260743 ##   chr3L:20300001..20320000    chr3L 20300015-20300029      + | -3.581791 ##   chr3L:20300001..20320000    chr3L 20300022-20300036      - |  2.266402 ##   chr3L:20300001..20320000    chr3L 20300066-20300080      + | -7.941449 ##   chr3L:20300001..20320000    chr3L 20300293-20300307      + | -6.443234 ##                        ...      ...               ...    ... .       ... ##   chr3L:20300001..20320000    chr3L 20318607-20318621      - |  -9.10951 ##   chr3L:20300001..20320000    chr3L 20318620-20318634      + |  -3.39948 ##   chr3L:20300001..20320000    chr3L 20318676-20318690      - | -10.03808 ##   chr3L:20300001..20320000    chr3L 20318724-20318738      + |  -7.80125 ##   chr3L:20300001..20320000    chr3L 20318728-20318742      + |  -6.63695 ##                            DNAaffinity   Occupancy ##                              <numeric>   <numeric> ##   chr3L:20300001..20320000           1 0.206905467 ##   chr3L:20300001..20320000           1 0.009333865 ##   chr3L:20300001..20320000           1 0.765570117 ##   chr3L:20300001..20320000           1 0.000120422 ##   chr3L:20300001..20320000           1 0.000538507 ##                        ...         ...         ... ##   chr3L:20300001..20320000           1 3.74506e-05 ##   chr3L:20300001..20320000           1 1.11796e-02 ##   chr3L:20300001..20320000           1 1.47978e-05 ##   chr3L:20300001..20320000           1 1.38543e-04 ##   chr3L:20300001..20320000           1 4.43715e-04 ##   ------- ##   seqinfo: 3 sequences from an unspecified genome; no seqlengths ##  ## ... ## <3 more elements> ##  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##                         Associated parameters  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##  lambdaPWM:                                                 1 ##  boundMolecules:                                        58794 ## Compute ChIP seq like profiles  pred <- computeChIPProfile(genomicProfiles = occup,                           loci = chip) ## Computing ChIP Profile pred ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##                         genomicProfiles object: ChIP like Profiles  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##  Parameter combination:  lambda = 1 & boundMolecules = 58794  ##   ## $`lambda = 1 & boundMolecules = 58794` ## GRangesList object of length 4: ## $`chr3L:20300001..20320000` ## GRanges object with 2000 ranges and 1 metadata column: ##                            seqnames            ranges strand |        ChIP ##                               <Rle>         <IRanges>  <Rle> |   <numeric> ##   chr3L:20300001..20320000    chr3L 20300001-20300010      * |    0.237578 ##   chr3L:20300001..20320000    chr3L 20300011-20300020      * |    0.246655 ##   chr3L:20300001..20320000    chr3L 20300021-20300030      * |    0.254139 ##   chr3L:20300001..20320000    chr3L 20300031-20300040      * |    0.244935 ##   chr3L:20300001..20320000    chr3L 20300041-20300050      * |    0.234430 ##                        ...      ...               ...    ... .         ... ##   chr3L:20300001..20320000    chr3L 20319951-20319960      * | 8.21105e-06 ##   chr3L:20300001..20320000    chr3L 20319961-20319970      * | 7.81059e-06 ##   chr3L:20300001..20320000    chr3L 20319971-20319980      * | 7.42966e-06 ##   chr3L:20300001..20320000    chr3L 20319981-20319990      * | 7.06731e-06 ##   chr3L:20300001..20320000    chr3L 20319991-20320000      * | 6.72264e-06 ##   ------- ##   seqinfo: 3 sequences from an unspecified genome; no seqlengths ##  ## ... ## <3 more elements> ##  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##                         Associated parameter Options  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##  lambdaPWM:                                                 1 ##  boundMolecules:                                        58794 ##  stepSize:                                                 10 ##  backgroundSignal:                         0.0354659475382993 ##  maxSignal:                                                 1 ##  removeBackground:                                          0 ##  chipMean:                                                200 ##  chipSd:                                                  200 ##  chipSmooth:                                              250 ## Compute goodness Of Fit of model accu <- profileAccuracyEstimate(genomicProfiles = pred,                                 ChIPScore = chip) ## Warning in ks.test.default(predicted, locusProfile): p-value will be approximate ## in the presence of ties  ## Warning in ks.test.default(predicted, locusProfile): p-value will be approximate ## in the presence of ties  ## Warning in ks.test.default(predicted, locusProfile): p-value will be approximate ## in the presence of ties  ## Warning in ks.test.default(predicted, locusProfile): p-value will be approximate ## in the presence of ties accu ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##                         genomicProfiles object: Goodness of Fit   ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##  Selected Goodness of Fit metrics:   ##  pearson  ##  spearman  ##  kendall  ##  KsDist  ##  geometric  ##  precision  ##  recall  ##  f1  ##  accuracy  ##  MCC  ##  AUC  ##  MSE  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##  1 parameter combinations for 4 loci  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##   ##  Parameter combination:  lambda = 1 & boundMolecules = 58794  ##   ##   pearsonMean  spearmanMean   kendallMean    KsDistMean geometricMean  ##    0.31991410    0.17540895    0.12094178    0.30075000    6.33325180  ## precisionMean    recallMean        f1Mean  accuracyMean       MCCMean  ##    0.15024576    0.73827352    0.17508145    0.52158826    0.10818296  ##       AUCMean       MSEMean  ##    0.75231385    0.02291433  ##  ##  chr3L:20300001..20320000  ##  chr2L:6480001..6500000  ##  chr3R:16140001..16160000  ##  chr2L:19500001..19520000  ##  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##"},{"path":"/articles/ChIPanalyser.html","id":"step-7---plotting-single-combination","dir":"Articles","previous_headings":"Work Flow > Advanced Work","what":"Step 7 - Plotting Single combination","title":"The ChIPanalyser User's Guide","text":"Finally, can plot newly computed profiles.  case also added gene reference object. object GRanges object containing postion various genetic elements 3’UTR, 5’UTR, introns , etc NOTE plotOccupancyProfile offers possibility customise graphical parameters. Unfortunately, plotOptimalHeatMaps offers limited graphical parameter customisation.","code":"plotOccupancyProfile(predictedProfile=pred,                      ChIPScore=chip,                      chromatinState=Access,                      occupancy=occup,                      goodnessOfFit=accu,                      geneRef=geneRef)"},{"path":"/articles/ChIPanalyser.html","id":"parameter-description","dir":"Articles","previous_headings":"Work Flow","what":"Parameter Description","title":"The ChIPanalyser User's Guide","text":"following section, describe different parameters present parameterOptions genomicProfiles. Information concerning arguments functions described manual pages function. reminder, parameter options parameterOptions object. Parameters divided different categories depending required internally. chipMean: Average ChIP peak width. Peak width used smoothing ChIP data. chipSd: Standard deviation peak width. SD peak width used smoothing ChIP data. chipSmooth: Window width used ChIP data smoothing. lociWidth: loci provided, ChIPanalyser split ChIP data bins width equals lociWidth. noiseFilter: Noise filter applied ChIP data. ChIPanalyser provides four filters (zero, mean, median sigmoid). Zero assigns 0 score zero. Mean median assign 0 score mean median score. Sigmoid applies weight ChIP score based logistic distribution. Scores 95th quantile weighted score 1 2. Scores 95th quantile weighted score 1 0. maxSignal: Maximum ChIP score normalisation. Required later step analysis. However, score computed internally stored ChIPscore object , result processingChIP. backgroundSignal: Average ChIP score normalisation. Required later step analysis. However, score computed internally stored ChIPscore object , result processingChIP. naturalLog: Log transform applied PFM PWM conversion. TRUE, natural log used otherwise log2 used. noOfSites: Number sites PWM used analysis. Default set “” meaning sites used. case argument changed, ChIPanalyser requires numeric value describing number sites selected (first site). PWMpseudocount: Pseudo-count used PFM PWM conversion. strandRule: PWM score computation mode. max returns highest PWM score regardless strand. sum returns sum PWM scores strands. mean returns average PWM score oer strands. noted argument relevant strands considered. See . whichstrand: Strand used analysis. Options : +- -+, plus + negative -. lambdaPWM: Value assigned \\(\\lambda\\) . Positive numeric value. ploidy: Ploidy level organim used analysis. boundMolecules: Number molecules used run analysis. Positive numeric value. can see, parameters used multiple steps analysis. paremeters changed either parameterOptions object genomicProfiles object, please ensure parse objects function. function extract values assigned parameter use values analysis. possible update, parameters step analysis however, recommend set parameters beforehand avoid unwanted parameter mismatch. Next, describe content genomicProfiles objects. reminder, genomicProfiles object following structure: can see, using structure function show internal slots. genomicProfiles object inherit parameterOptions, contain slots user updatetable finally show method applied genomicProfiles varies step analysis. intended reduce information overload “looking” object. PWM: Position Weight Matrix. Either directly user provided built internally Position Frequency Matrix provided. PFM: Position Frequency Matrix. argument can either path towards file containing PFM (RAW, JASPAR Transfac format) matrix rows , C, T, G columns PFM sites. PFMFormat: Format provided PFM. PFMFormat can one following: RAW, JASPAR, transfac matrix. Matrix format used provided PFM R matrix. BPFrequency: Genome alphabet Frequency. parameter can user provided form numeric vector (Frequency base pair following order , C, T, G). convenience, ChIPanalyser automatically compute genome wide base pair frequency DNAStringSet object BSgenome object provided argument. minPWMScore: minimum PWM score entire genome. Internally updated. maxPWMScore: maximum PWM score entire genome. Internally updated. profiles: Storage slot PWM scores threshold, Occupancy, ChIP like profiles Goodness Fit. slot holds results step analysis. Updated internally. DNASequenceLength: Length DNA sequence used analysis. Updated internally can provided user. averageExpPWMScore: Average Exponetial PWM score. Updated Internally. drop: Regions contain accessible DNA contain sites threshold. parameters either explained part internal working package. parameters mainly used keep track advancement analysis step. changed user. Finally, provide list setter/getter functions slot:","code":"parameterOptions() ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##                         parameterOptions  ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##  processingChIP options  ##   ##  chipMean:                                                  200  ##  chipSd:                                                    200  ##  chipSmooth:                                                250  ##  lociWidth:                                               20000  ##  noiseFilter:                                              zero  ##   ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##  processingChIP options Updated  ##   ##  maxSignal:                                                   1  ##  backgroundSignal:                                            0  ##   ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##  Position Weight Matrix Options  ##   ##  naturalLog:                                               TRUE  ##  noOfSites:                                                 all  ##  PWMpseudocount:                                              1  ##   ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##  Genome Wide Score options  ##   ##  strandRule:                                                max  ##  whichstrand:                                                +-  ##  lambdaPWM:                                                   1  ##   ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##  PWM Scores above Threshold options  ##   ##  strandRule:                                                max  ##  whichstrand:                                                +-  ##   ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##  Occupancy options  ##   ##  Ploidy:                                                      2  ##  lambdaPWM:                                                   1  ##  boundMolecules:                                           1000  ##  maxSignal:                                                   1  ##  backgroundSignal:                                            0  ##   ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  ##  ChIP Profile options  ##   ##  chipMean:                                                  200  ##  chipSd:                                                    200  ##  chipSmooth:                                                250  ##  stepSize:                                                   10  ##   ## _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ str(genomicProfiles()) ## Formal class 'genomicProfiles' [package \"ChIPanalyser\"] with 31 slots ##   ..@ PWM               : num[0 , 0 ]  ##   ..@ PFM               : num[0 , 0 ]  ##   ..@ PFMFormat         : chr \"raw\" ##   ..@ BPFrequency       : num [1:4] 0.25 0.25 0.25 0.25 ##   ..@ minPWMScore       : logi(0)  ##   ..@ maxPWMScore       : logi(0)  ##   ..@ profiles          :Formal class 'CompressedGRangesList' [package \"GenomicRanges\"] with 5 slots ##   .. .. ..@ unlistData     :Formal class 'GRanges' [package \"GenomicRanges\"] with 7 slots ##   .. .. .. .. ..@ seqnames       :Formal class 'Rle' [package \"S4Vectors\"] with 4 slots ##   .. .. .. .. .. .. ..@ values         : Factor w/ 0 levels:  ##   .. .. .. .. .. .. ..@ lengths        : int(0)  ##   .. .. .. .. .. .. ..@ elementMetadata: NULL ##   .. .. .. .. .. .. ..@ metadata       : list() ##   .. .. .. .. ..@ ranges         :Formal class 'IRanges' [package \"IRanges\"] with 6 slots ##   .. .. .. .. .. .. ..@ start          : int(0)  ##   .. .. .. .. .. .. ..@ width          : int(0)  ##   .. .. .. .. .. .. ..@ NAMES          : NULL ##   .. .. .. .. .. .. ..@ elementType    : chr \"ANY\" ##   .. .. .. .. .. .. ..@ elementMetadata: NULL ##   .. .. .. .. .. .. ..@ metadata       : list() ##   .. .. .. .. ..@ strand         :Formal class 'Rle' [package \"S4Vectors\"] with 4 slots ##   .. .. .. .. .. .. ..@ values         : Factor w/ 3 levels \"+\",\"-\",\"*\":  ##   .. .. .. .. .. .. ..@ lengths        : int(0)  ##   .. .. .. .. .. .. ..@ elementMetadata: NULL ##   .. .. .. .. .. .. ..@ metadata       : list() ##   .. .. .. .. ..@ seqinfo        :Formal class 'Seqinfo' [package \"GenomeInfoDb\"] with 4 slots ##   .. .. .. .. .. .. ..@ seqnames   : chr(0)  ##   .. .. .. .. .. .. ..@ seqlengths : int(0)  ##   .. .. .. .. .. .. ..@ is_circular: logi(0)  ##   .. .. .. .. .. .. ..@ genome     : chr(0)  ##   .. .. .. .. ..@ elementMetadata:Formal class 'DFrame' [package \"S4Vectors\"] with 6 slots ##   .. .. .. .. .. .. ..@ rownames       : NULL ##   .. .. .. .. .. .. ..@ nrows          : int 0 ##   .. .. .. .. .. .. ..@ elementType    : chr \"ANY\" ##   .. .. .. .. .. .. ..@ elementMetadata: NULL ##   .. .. .. .. .. .. ..@ metadata       : list() ##   .. .. .. .. .. .. ..@ listData       : Named list() ##   .. .. .. .. ..@ elementType    : chr \"ANY\" ##   .. .. .. .. ..@ metadata       : list() ##   .. .. ..@ elementMetadata:Formal class 'DFrame' [package \"S4Vectors\"] with 6 slots ##   .. .. .. .. ..@ rownames       : NULL ##   .. .. .. .. ..@ nrows          : int 0 ##   .. .. .. .. ..@ elementType    : chr \"ANY\" ##   .. .. .. .. ..@ elementMetadata: NULL ##   .. .. .. .. ..@ metadata       : list() ##   .. .. .. .. ..@ listData       : Named list() ##   .. .. ..@ elementType    : chr \"GRanges\" ##   .. .. ..@ metadata       : list() ##   .. .. ..@ partitioning   :Formal class 'PartitioningByEnd' [package \"IRanges\"] with 5 slots ##   .. .. .. .. ..@ end            : int(0)  ##   .. .. .. .. ..@ NAMES          : NULL ##   .. .. .. .. ..@ elementType    : chr \"ANY\" ##   .. .. .. .. ..@ elementMetadata: NULL ##   .. .. .. .. ..@ metadata       : list() ##   ..@ DNASequenceLength : logi(0)  ##   ..@ averageExpPWMScore: logi(0)  ##   ..@ ZeroBackground    : logi(0)  ##   ..@ drop              : logi(0)  ##   ..@ tags              : chr \"empty\" ##   ..@ ploidy            : num 2 ##   ..@ boundMolecules    : num 1000 ##   ..@ backgroundSignal  : num 0 ##   ..@ maxSignal         : num 1 ##   ..@ lociWidth         : num 20000 ##   ..@ chipMean          : num 200 ##   ..@ chipSd            : num 200 ##   ..@ chipSmooth        : num 250 ##   ..@ stepSize          : num 10 ##   ..@ removeBackground  : num 0 ##   ..@ noiseFilter       : chr \"zero\" ##   ..@ PWMThreshold      : num 0.7 ##   ..@ strandRule        : chr \"max\" ##   ..@ whichstrand       : chr \"+-\" ##   ..@ lambdaPWM         : num 1 ##   ..@ naturalLog        : logi TRUE ##   ..@ noOfSites         : chr \"all\" ##   ..@ PWMpseudocount    : num 1 ##   ..@ paramTag          : chr \"empty\" ## Accessors and Setters for parameterOptions and genomicProfiles     avrageExpPWMScore(obj)     backgroundSignal(obj)     backgroundSignal(obj)<-value     boundMolecules(obj)     boundMolecules(obj)<-value     BPFrequency(obj)     BPFrequency(obj)<-value     chipMean(obj)     chipMean(obj)<-value     chipSd(obj)     chipSd(obj)<-value     chipSmooth(obj)     chipSmooth(obj)<-value     DNASequenceLength(obj)     drop(obj)     lambdaPWM(obj)     lambdaPWM(obj)<-value     lociWidth(obj)     lociWidth(obj)<-value     maxPWMScore(obj)     maxSignal(obj)     maxSignal(obj)<-value     minPWMScore(obj)     naturalLog(obj)     naturalLog(obj)<-value     noiseFilter(obj)     noiseFilter(obj)<-value     noOfSites(obj)     noOfSites(obj)<-value     PFMFormat(obj)     PFMFormat(obj)<-value     ploidy(obj)     ploidy(obj)<-value     PositionFrequencyMatrix(obj)     PositionFrequencyMatrix(obj)<-value     PositionWeightMatrix(obj)     PositionWeightMatrix(obj)<-value     profiles(obj)     PWMpseudocount(obj)     PWMpseudocount(obj)<-value     PWMThreshold(obj)     PWMThreshold(obj)<-value     removeBackground(obj)     removeBackground(obj)<-value     stepSize(obj)     stepSize(obj)<-value     strandRule(obj)     strandRule(obj)<-value     whichstrand(obj)     whichstrand(obj)<-value     ## ChIPScore slots accessors      loci(obj)     scores(obj)"},{"path":"/articles/ChIPanalyser.html","id":"session-info","dir":"Articles","previous_headings":"Work Flow","what":"Session Info","title":"The ChIPanalyser User's Guide","text":"","code":"sessionInfo() ## R version 4.2.0 (2022-04-22) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur/Monterey 10.16 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## attached base packages: ## [1] parallel  stats4    stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] BSgenome.Dmelanogaster.UCSC.dm6_1.4.1 ChIPanalyser_2.0.1                    ##  [3] RcppRoll_0.3.0                        BSgenome_1.64.0                       ##  [5] rtracklayer_1.56.1                    Biostrings_2.64.0                     ##  [7] XVector_0.36.0                        GenomicRanges_1.48.0                  ##  [9] GenomeInfoDb_1.32.2                   IRanges_2.30.0                        ## [11] S4Vectors_0.34.0                      BiocGenerics_0.42.0                   ##  ## loaded via a namespace (and not attached): ##  [1] SummarizedExperiment_1.26.1 xfun_0.31                   ##  [3] bslib_0.4.0                 purrr_0.3.4                 ##  [5] lattice_0.20-45             htmltools_0.5.3             ##  [7] yaml_2.3.5                  XML_3.99-0.10               ##  [9] rlang_1.0.4                 pkgdown_2.0.6               ## [11] jquerylib_0.1.4             BiocParallel_1.30.3         ## [13] RColorBrewer_1.1-3          matrixStats_0.62.0          ## [15] GenomeInfoDbData_1.2.8      stringr_1.4.0               ## [17] zlibbioc_1.42.0             MatrixGenerics_1.8.1        ## [19] ragg_1.2.2                  codetools_0.2-18            ## [21] memoise_2.0.1               evaluate_0.15               ## [23] restfulr_0.0.15             Biobase_2.56.0              ## [25] knitr_1.39                  fastmap_1.1.0               ## [27] highr_0.9                   Rcpp_1.0.9                  ## [29] ROCR_1.0-11                 BiocManager_1.30.18         ## [31] cachem_1.0.6                DelayedArray_0.22.0         ## [33] desc_1.4.1                  jsonlite_1.8.0              ## [35] systemfonts_1.0.4           fs_1.5.2                    ## [37] Rsamtools_2.12.0            textshaping_0.3.6           ## [39] rjson_0.2.21                digest_0.6.29               ## [41] stringi_1.7.8               BiocIO_1.6.0                ## [43] rprojroot_2.0.3             grid_4.2.0                  ## [45] cli_3.3.0                   tools_4.2.0                 ## [47] bitops_1.0-7                magrittr_2.0.3              ## [49] sass_0.4.2                  RCurl_1.98-1.8              ## [51] crayon_1.5.1                Matrix_1.4-1                ## [53] rmarkdown_2.14              R6_2.5.1                    ## [55] GenomicAlignments_1.32.1    compiler_4.2.0"},{"path":"/articles/ChIPanalyser.html","id":"references","dir":"Articles","previous_headings":"Work Flow","what":"References","title":"The ChIPanalyser User's Guide","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/articles/GA_ChIPanalyser.html","id":"introduction---what-is-this-package","dir":"Articles","previous_headings":"","what":"Introduction - What is this package?","title":"The ChIPanalyser User's Guide","text":"ChIPanalyser provides quick easy method predict explain TF binding. package uses statistical thermodynamic framework model binding proteins DNA. model assumes four main driver TF binding: Chromatin State affinity Binding Energy Number bound Molecules Scaling Factor modulating binding affinity binding energy given PWM matrices, parameters inferred maximizing minimizing goodness fit score ChIP data ChIPanalyser predictions. , ChIPanalyser provides genetic algorithm infer optimal values parameter.","code":""},{"path":"/articles/GA_ChIPanalyser.html","id":"methods---the-chromatin-state-model","dir":"Articles","previous_headings":"","what":"Methods - The Chromatin State Model","title":"The ChIPanalyser User's Guide","text":"chromatin state model described following equation derived statistical thermodynamics: \\[P(N,,\\lambda,\\omega)_j = \\frac{N \\cdot a_{j} \\cdot e^{(\\frac{1}{\\lambda} \\cdot \\omega_{j})}}{N \\cdot a_{j} \\cdot e^{(\\frac{1}{\\lambda} \\cdot \\omega_{j})}+ L \\cdot n \\cdot [a_{} \\cdot e^{(\\frac{1}{\\lambda} \\cdot \\omega_{j})}]_ {}} \\] \\(N\\) , average number bound molecules \\(a_{j}\\) , chromatin state affinity site j \\(\\omega\\) , binding energy required TF bind site \\(j\\) - form Position Weight Matrix Score \\(\\lambda\\) , scaling factor Position Weight Matrix score \\(L\\) , length genome interest \\(n\\) , ploidy level organism Chromatin state affinity defined following: \\[a_{j} = \\sum_{k} \\alpha_k \\cdot c_{j}^k\\] \\(\\alpha\\) chromatin state affinity scores given TF \\(c\\) chromatin state site \\(j\\). Shortly, model generates ChIP like profiles describes affinity TF chromatin states. affinity scores \\(\\), number bound molecules \\(N\\), lambda \\(\\lambda\\) inferred optimising fit predicted profiles ChIP data using genetic algortihm.","code":""},{"path":[]},{"path":"/articles/GA_ChIPanalyser.html","id":"loading-data","dir":"Articles","previous_headings":"Using ChIPanalyser","what":"Loading data","title":"The ChIPanalyser User's Guide","text":"demonstrate use ChIPanalyser genetic algorithm, provide internal data sets. complement data external data source DNA sequence sets taken BSgenomepackage suit.","code":""},{"path":"/articles/GA_ChIPanalyser.html","id":"chipanalyser","dir":"Articles","previous_headings":"Using ChIPanalyser > Loading data","what":"ChIPanalyser","title":"The ChIPanalyser User's Guide","text":"First, load ChIPanlyser internal data","code":"library(ChIPanalyser) ## Loading required package: GenomicRanges ## Loading required package: stats4 ## Loading required package: BiocGenerics ##  ## Attaching package: 'BiocGenerics' ## The following objects are masked from 'package:stats': ##  ##     IQR, mad, sd, var, xtabs ## The following objects are masked from 'package:base': ##  ##     anyDuplicated, append, as.data.frame, basename, cbind, colnames, ##     dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep, ##     grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget, ##     order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, ##     rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply, ##     union, unique, unsplit, which.max, which.min ## Loading required package: S4Vectors ##  ## Attaching package: 'S4Vectors' ## The following objects are masked from 'package:base': ##  ##     expand.grid, I, unname ## Loading required package: IRanges ## Loading required package: GenomeInfoDb ## Loading required package: Biostrings ## Loading required package: XVector ##  ## Attaching package: 'Biostrings' ## The following object is masked from 'package:base': ##  ##     strsplit ## Loading required package: BSgenome ## Loading required package: rtracklayer ## Loading required package: RcppRoll ## Loading required package: parallel ##  ## Attaching package: 'ChIPanalyser' ## The following object is masked from 'package:IRanges': ##  ##     drop ## The following object is masked from 'package:base': ##  ##     drop # Input data  data(ChIPanalyserData) # PFM Matrix  PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\")"},{"path":"/articles/GA_ChIPanalyser.html","id":"external-data","dir":"Articles","previous_headings":"Using ChIPanalyser > Loading data","what":"External Data","title":"The ChIPanalyser User's Guide","text":"reduce size internal data size, complement data Drosophila DNA sequence taken BSgenome package suit.","code":"library(BSgenome.Dmelanogaster.UCSC.dm6)  DNASequenceSet <- getSeq(BSgenome.Dmelanogaster.UCSC.dm6)"},{"path":"/articles/GA_ChIPanalyser.html","id":"input-data-what-is-it","dir":"Articles","previous_headings":"Using ChIPanalyser > Loading data","what":"Input data : What is it?","title":"The ChIPanalyser User's Guide","text":"Now loaded data, exactly looking ? environment contain following new objects: chip - GRanges object containing ChIP scores. Essentially, ChIP data used train model. cs - GRanges object containing Chromatin State (CS) information. Essentially, CS can found genome. top - GRanges object containing regions interest. Esssentially, genomic regions use training testing. PFM - Path file containing Position Frequency Matrix. Essentially, represents binding affinity TF (using BEAF-32) DNASequenceSet - DNAStringSet containing DNASequenceSet organism looking . geneRef - GRanges object containing gene reference taken (Genome UCSC website)[https://genome.ucsc.edu/]","code":""},{"path":"/articles/GA_ChIPanalyser.html","id":"setting-parameters","dir":"Articles","previous_headings":"Using ChIPanalyser","what":"Setting Parameters","title":"The ChIPanalyser User's Guide","text":"next step consitst setting initial parameters run genetic algorithm. Please note parameters presented sake vignette. recommend using following parameters first trial data. Please advised parameters depend nature data using. can also define parameters wish optimise. example, optimise number bound molecules (\\(N\\)), lambda (\\(\\lambda\\)), PWM Threshold 11 different chromatin states. Alternatively, can also set custom ranges parameters. use custom ranges reduce computational time.","code":"# Number of individuals per generation  pop <- 10   # Number of generations  gen <- 2  # Mutation Probability  mut <- 0.3  # Children - Number of ofspring passed to the next generation  child <- 2   # Method - Goodness of fit metric used to optimise the Genetic algorithm  method <- \"MSE\" # Number of individuals per generation  pop <- 100   # Number of generations  gen <- 50  # Mutation Probability  mut <- 0.3  # Children - Number of ofspring passed to the next generation  child <- 10  # Method - Goodness of fit metric used to optimise the Genetic algorithm  method <- \"MSE\" # Parameters to optimised params <- c(\"N\",\"lambda\",\"PWMThreshold\", paste0(\"CS\",seq(1:11))) params_custom <- vector(\"list\", 14) names(params_custom) <- c(\"N\",\"lambda\",\"PWMThreshold\", paste0(\"CS\",seq(1:11)))  # vector in the format of min value, max value and number of values  params_custom$N <- c(1,1000000,5)  params_custom$lambda <- c(1,5,5)  # Bound between 0 and 1  params_custom$PWMThreshold <- c(0.1,0.9,5)  # Bound between 0 and 1  CS <- c(0,1,5) CS_loc <- grep(\"CS\",names(params_custom)) for(i in CS_loc){     params_custom[[i]] <- CS }"},{"path":[]},{"path":"/articles/GA_ChIPanalyser.html","id":"building-initial-objects","dir":"Articles","previous_headings":"Using ChIPanalyser > Initializing ChIPanalyser","what":"Building Initial objects","title":"The ChIPanalyser User's Guide","text":"first step ChIPanalyser anaylsis create parameter object. object contain input paramters hold basic data. , load PFM PWM compute Base Pair Frequency DNASequenceSet.","code":"GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\", BPFrequency=DNASequenceSet)"},{"path":"/articles/GA_ChIPanalyser.html","id":"generating-a-starting-population","dir":"Articles","previous_headings":"Using ChIPanalyser > Initializing ChIPanalyser","what":"Generating a starting population","title":"The ChIPanalyser User's Guide","text":"clairty, show starting population looks like. step stricly required evolve function can take number individuals poppulation (defined pop) parameters optimised (defined params params_custom).","code":"start_pop <- generateStartingPopulation(pop, params_custom)"},{"path":"/articles/GA_ChIPanalyser.html","id":"pre-processing-chip-data","dir":"Articles","previous_headings":"Using ChIPanalyser > Initializing ChIPanalyser","what":"Pre-processing ChIP data","title":"The ChIPanalyser User's Guide","text":"pre-proccess ChIP data reducing noise converting GRanges ChIPscore object. object contains normalised smoothed ChIP scores used train test model.","code":"chipProfile <- processingChIP(chip,loci = top)  # Splitting data into training and testing # We recommend setting dist to 20/80. However, here we only have 4 loci.  splitdata <- splitData(chipProfile,dist = c(50,50),as.proportion = TRUE)  trainingSet <- splitdata$trainingSet testingSet <- splitdata$testingSet"},{"path":"/articles/GA_ChIPanalyser.html","id":"evolution","dir":"Articles","previous_headings":"Using ChIPanalyser","what":"Evolution","title":"The ChIPanalyser User's Guide","text":"can run Genetic algorithm provided ChIPanalyser using single function. function generate intermediate files allow check status algorithm running. noted intermediate files updated generation. method also provides lambda database. allows faster run time larger data sets values lambda pre-computed. want intermediate files, set checkpoint argument FALSE. want pre-compute lambda values, set lambda argument FALSE. purpose vignette, save intermediate files. output function returns list 3 elements: database - data frame parameters computed generation poppulation - list containing last generated population fitest - list containing goodness metric best perfomring individuals","code":"evo <- evolve(population = pop,     DNASequenceSet = DNASequenceSet,     ChIPScore = trainingSet,     genomicProfiles = GPP,     parameters = params_custom,     mutationProbability = mut,     generations = gen,     offsprings = child,     chromatinState = cs,     method = method,     filename = \"This_TF_is_Best_TF\",     checkpoint = FALSE,     cores= 1) ## Generating Lambda DataBase ## Generation: 1 ## Generation Fitness: c(MSEMean = 0.0152890975452475) ## Generation: 2 ## Generation Fitness: c(MSEMean = 0.0152876578576124)"},{"path":"/articles/GA_ChIPanalyser.html","id":"fitest-of-them-all","dir":"Articles","previous_headings":"Using ChIPanalyser","what":"Fitest of them all","title":"The ChIPanalyser User's Guide","text":"best perfomring paramters, can plug single run ChIPanalyser use parameters tesing set.","code":""},{"path":"/articles/GA_ChIPanalyser.html","id":"get-fitest-individual","dir":"Articles","previous_headings":"Using ChIPanalyser > Fitest of them all","what":"Get fitest individual","title":"The ChIPanalyser User's Guide","text":"first step extract best performing individual associated traits population.","code":"SuperFit <- getHighestFitnessSolutions(evo$population,child=1,method=method) single<-evo[[\"population\"]][SuperFit]"},{"path":"/articles/GA_ChIPanalyser.html","id":"running-chipanalyser-with-fitest-individual","dir":"Articles","previous_headings":"Using ChIPanalyser > Fitest of them all","what":"Running ChIPanalyser with fitest individual","title":"The ChIPanalyser User's Guide","text":"can use parameters input singleRun function obtain ChIP like profiles. run represents predicted run TF binding affinity TF choice. set fitness . means function return goodness fit metrics available. final sections returns list containing 3 elements: occupnacy - genomicProfiles object containing occupancy scores region ChIP - genomicProfiles object containing ChIP like scores region gof - goodness fit scores regions mean scores regions.","code":"# Set chromatin states for single run - create CS Granges with affinity scores cs_single <- setChromatinStates(single,cs)[[1]]  superFit <- singleRun(indiv = single,     DNAAffinity = cs_single,     genomicProfiles = GPP,     DNASequenceSet = DNASequenceSet,     ChIPScore = testingSet,     fitness = \"all\") ## Warning in ks.test.default(predicted, locusProfile): p-value will be approximate ## in the presence of ties  ## Warning in ks.test.default(predicted, locusProfile): p-value will be approximate ## in the presence of ties"},{"path":"/articles/GA_ChIPanalyser.html","id":"plotting","dir":"Articles","previous_headings":"Using ChIPanalyser","what":"Plotting","title":"The ChIPanalyser User's Guide","text":"Finally, plot resulting profiles.","code":"pdf(\"test.pdf\",height=8,width=15) par(mfrow = c(2,1)) plotOccupancyProfile(predictedProfile = superFit$ChIP,     ChIPScore = testingSet,     chromatinState = cs_single,     occupancy = superFit$occupancy,     goodnessOfFit = superFit$gof,     geneRef = geneRef,     addLegend = TRUE) dev.off() ## agg_png  ##       2"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Patrick CN Martin. Maintainer, author. Nicolea Radu Zabet. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zabet NR & Adryan B. Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Research, gku1269, https://dx.doi.org/10.1093%2Fnar%2Fgku1269 (2015).","code":"@Article{,   author = {Zabet NR & Adryan B},   doi = {10.1093/nar/gku1269},   journal = {Nucleic Acids Research},   title = {Estimating binding properties of transcription factors from genome-wide binding profiles},   year = {2015}, }"},{"path":[]},{"path":"/index.html","id":"chipanalyser-1","dir":"","previous_headings":"","what":"ChIPanalyser","title":"ChIPanalyser: Predicting Transcription Factor Binding Sites","text":"ChIPanalyser: Predicting Transcription Factor Binding Sites","code":""},{"path":"/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"ChIPanalyser: Predicting Transcription Factor Binding Sites","text":"Patrick C.N. Martin pcnmartin@gmail.com Dr. Nicolae Radu Zabet nzabet@essex.ac.uk","code":""},{"path":"/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"ChIPanalyser: Predicting Transcription Factor Binding Sites","text":"Based statistical thermodynamic framework, ChIPanalyser tries produce ChIP-seq like profile. model relies four consideration: TF binding sites can scored using Position weight Matrix, DNA accessibility plays role Transcription Factor binding, binding profiles dependant number transcription factors bound DNA finally binding energy (another way describing PWM’s) binding specificity modulated (hence introduction binding specificity modulator). end result ChIPanalyser produce profiles simulating real ChIP-seq profile provide accuracy measurements predicted profiles compared real ChIP-seq data. ultimate goal produce ChIP-seq like profiles predicting ChIP-seq like profile circumvent need produce costly ChIP-seq experiments.","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"ChIPanalyser: Predicting Transcription Factor Binding Sites","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/BPFrequency-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function BPFrequency  ~~ — BPFrequency-methods","title":"~~ Methods for Function BPFrequency  ~~ — BPFrequency-methods","text":"~~ Methods function BPFrequency  ~~","code":""},{"path":"/reference/BPFrequency-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function BPFrequency  ~~ — BPFrequency-methods","text":"signature(object = \"genomicProfilesInternal\")","code":""},{"path":"/reference/BPFrequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency","title":"Accessor method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency","text":"Extract Access BPFrequency slot genomicProfiles object.","code":""},{"path":"/reference/BPFrequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency","text":"","code":"BPFrequency(object)"},{"path":"/reference/BPFrequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency","text":"object object genomicProfiles","code":""},{"path":"/reference/BPFrequency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency","text":"Default value c(0.25,0.25,0.25,0.25) generating Postion Weight Matrix Position Frequency Matrix, probability occurrence base pair (Base Pair Frequency) necessary (originally described Gary Stormo). possible set custom values BPFrequency vector length 4 containing probability occurrence base pair (,C,G,T) order. Base pair frequency unknown, BPFrequency compute base pair frequency DNA sequence. nature sequence can BSgenome DNAStringSet. order decrease run time, advised use DNAStringSet","code":""},{"path":"/reference/BPFrequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency","text":"Returns BPFrequency slot genomicProfiles object.","code":""},{"path":"/reference/BPFrequency.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/BPFrequency.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/BPFrequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency","text":"","code":"data(ChIPanalyserData) # path to Position Frequency Matrix PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") # Building genomicProfiles object GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\") #Extracting BPFrequency slot BPFrequency(GPP) #> [1] 0.25 0.25 0.25 0.25"},{"path":"/reference/BPFrequency_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function BPFrequency<-  ~~ — BPFrequency<--methods","title":"~~ Methods for Function BPFrequency<-  ~~ — BPFrequency<--methods","text":"~~ Methods function BPFrequency<-  ~~","code":""},{"path":"/reference/BPFrequency_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function BPFrequency<-  ~~ — BPFrequency<--methods","text":"signature(object = \"genomicProfilesInternal\", value = \"DNAStringSet\")  signature(object = \"genomicProfilesInternal\", value = \"vector\")","code":""},{"path":"/reference/BPFrequency_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency<-","title":"Setter method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency<-","text":"Setter method BPFrequency slot genomicProfiles object. base pair frequency unknown, BPFrequency compute base pair frequency DNA sequence.","code":""},{"path":"/reference/BPFrequency_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency<-","text":"","code":"BPFrequency(object)<-value"},{"path":"/reference/BPFrequency_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency<-","text":"object object genomicProfiles object. value value can three different objects: vector length 4 containing probability occurrence base     pair (,C,G,T) order.     Default value c(0.25,0.25,0.25,0.25). BSgenome organism interest. base pair frequency     automatically computed updated     genomicProfiles. DNAStringSet organisme interest.     base pair frequency automatically computed updated     genomicProfiles (Prefered method).","code":""},{"path":"/reference/BPFrequency_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency<-","text":"Default value c(0.25,0.25,0.25,0.25) generating Postion Weight Matrix Position Frequency Matrix, probability occurrence base pair (Base Pair Frequency) necessary (originally described Gary Stormo). possible set custom values BPFrequency vector length 4 containing probability occurrence base pair (,C,G,T) order. Base pair frequency unknown, BPFrequency compute base pair frequency DNA sequence building genomicProfiles object. nature sequence can aBSgenome object DNAStringSet. order decrease run time, advised use DNAStringSet.","code":""},{"path":"/reference/BPFrequency_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency<-","text":"Returns genomicProfiles object updated value BPFrequency.","code":""},{"path":"/reference/BPFrequency_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/BPFrequency_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency<-","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/BPFrequency_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter method for BPFrequency slot in a\ngenomicProfiles object. — BPFrequency<-","text":"","code":"data(ChIPanalyserData) # path to Position Frequency Matrix PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #As an example of genome, this example will run on the Drosophila genome # \\donttest{ if(!require(\"BSgenome.Dmelanogaster.UCSC.dm6\", character.only = TRUE)){     if (!requireNamespace(\"BiocManager\", quietly=TRUE))         install.packages(\"BiocManager\")     BiocManager::install(\"BSgenome.Dmelanogaster.UCSC.dm6\")     } #> Loading required package: BSgenome.Dmelanogaster.UCSC.dm6 library(BSgenome.Dmelanogaster.UCSC.dm6) DNASequenceSet <- getSeq(BSgenome.Dmelanogaster.UCSC.dm6) # Building genomicProfiles object GPP <- genomicProfiles(PFM=PFM,PFMFormat = \"JASPAR\", BPFrequency=DNASequenceSet) # Updating BPFrequency ## !! Note!! BPFrequency is used to compute PWM from PFM ## IF updated after building GPP, then it will not influence PWM ## Advised to build with BPFrequency directly BPFrequency(GPP) <- DNASequenceSet BPFrequency(GPP) <- c(0.25,0.25,0.25,0.25) # }"},{"path":"/reference/ChIPScore-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"ChIPScore result processingChIP function. object contains extracted ChIP Score ChIP data, loci interest optional paramters associated ChIPanalyser. loci interest either user provided top n regions defined reduce argument im processingChIP. object sole purpose aiding storage parsing data parameters.","code":""},{"path":"/reference/ChIPScore-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Object class created internaly parsed objects .","code":""},{"path":"/reference/ChIPScore-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"scores: Object class \"list\" List extracted ChIP scores loci: Object class \"loci\" GRanges containing loci interest ploidy: Object class \"numeric\" Ploidy level organism boundMolecules: Object class \"vector\" Number Bound molecules DNA backgroundSignal: Object class \"numeric\" ChIP background signal (average ChIP score) maxSignal: Object class \"numeric\" max ChIP signal lociWidth: Object class \"numeric\" Width loci reduce used loci provided chipMean: Object class \"numeric\" Average ChIP peak width chipSd: Object class \"numeric\" Standard Deviation ChIP peak width chipSmooth: Object class \"vector\" Smoothing window width ChIP score stepSize: Object class \"numeric\" Defining resolution size ChIP like profiles (10bp = signal considered every 10bp) removeBackground: Object class \"numeric\" Signal Threshold removed. Default removes negative scores noiseFilter: Object class \"character\" Type noise filter used ChIP data. PWMThreshold: Object class \"numeric\" Threshold PWM scores selected strandRule: Object class \"character\" Rule compute strand score (max, mean sum) whichstrand: Object class \"character\" strand used compute PWM scores. lambdaPWM: Object class \"vector\" Lambda value - Scaling factor PWM naturalLog: Object class \"logical\" PFM PWM conversion log transform ( natural log log2) noOfSites: Object class \"nos\" Number Sites PWM used compute PWM scores. PWMpseudocount: Object class \"numeric\" PWM pseudocount value PFM PWM conversion. paramTag: Object class \"character\" Internal Tag - Code progression","code":""},{"path":"/reference/ChIPScore-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class ","text":"Class \"parameterOptions\", directly.","code":""},{"path":"/reference/ChIPScore-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":".loci<- signature(object = \"ChIPScore\", value = \"loci\"): ... .scores<- signature(object = \"ChIPScore\", value = \"list\"): ... initialize signature(.Object = \"ChIPScore\"): ... loci signature(object = \"ChIPScore\"): ... scores signature(object = \"ChIPScore\"): ... show signature(object = \"ChIPScore\"): ...","code":""},{"path":"/reference/ChIPScore-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class ","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/ChIPScore-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Patrick C.N. Martin","code":""},{"path":[]},{"path":"/reference/ChIPScore-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"ChIPScore\") #> Class \"ChIPScore\" [package \"ChIPanalyser\"] #>  #> Slots: #>                                                                            #> Name:            scores             loci           ploidy   boundMolecules #> Class:             list             loci          numeric           vector #>                                                                            #> Name:  backgroundSignal        maxSignal        lociWidth         chipMean #> Class:          numeric          numeric          numeric          numeric #>                                                                            #> Name:            chipSd       chipSmooth         stepSize removeBackground #> Class:          numeric           vector          numeric          numeric #>                                                                            #> Name:       noiseFilter     PWMThreshold       strandRule      whichstrand #> Class:        character          numeric        character        character #>                                                                            #> Name:         lambdaPWM       naturalLog        noOfSites   PWMpseudocount #> Class:           vector          logical              nos          numeric #>                         #> Name:          paramTag #> Class:        character #>  #> Extends: \"parameterOptions\""},{"path":"/reference/ChIPanalyser-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ChIPanalyser: Predicting Transcription Factor Binding Sites — ChIPanalyser-package","title":"ChIPanalyser: Predicting Transcription Factor Binding Sites — ChIPanalyser-package","text":"ChIPanalyser package predict understand TF binding     utilizing statistical thermodynamic model. model incorporates 4     main factors thought drive TF binding: Chromatin State, Binding energy,     Number bound molecules scaling factor modulating TF binding     affinity. Taken together, ChIPanalyser produces ChIP-like profiles     closely mimic patterns seens real ChIP-seq data.","code":""},{"path":"/reference/ChIPanalyser-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ChIPanalyser: Predicting Transcription Factor Binding Sites — ChIPanalyser-package","text":"DESCRIPTION file: package yet installed build time.   Index:  package yet installed build time.","code":""},{"path":"/reference/ChIPanalyser-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ChIPanalyser: Predicting Transcription Factor Binding Sites — ChIPanalyser-package","text":"Patrick C.N. Martin <pm16057@essex.ac.uk> Nicolae Radu Zabet <nzabet@essex.ac.uk> Maintainer: Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/ChIPanalyser-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ChIPanalyser: Predicting Transcription Factor Binding Sites — ChIPanalyser-package","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/ChIPanalyser-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ChIPanalyser: Predicting Transcription Factor Binding Sites — ChIPanalyser-package","text":"","code":"# \\donttest{ #Data extraction data(ChIPanalyserData) # path to Position Frequency Matrix PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #As an example of genome, this example will run on the Drosophila genome  if(!require(\"BSgenome.Dmelanogaster.UCSC.dm6\", character.only = TRUE)){     if (!requireNamespace(\"BiocManager\", quietly=TRUE))         install.packages(\"BiocManager\")     BiocManager::install(\"BSgenome.Dmelanogaster.UCSC.dm6\") } library(BSgenome.Dmelanogaster.UCSC.dm6) DNASequenceSet <- getSeq(BSgenome.Dmelanogaster.UCSC.dm6) #Building data objects GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\",BPFrequency=DNASequenceSet)  chip<-processingChIP(chip,top) # Computing Genome Wide GenomeWide <- computeGenomeWideScores(DNASequenceSet = DNASequenceSet,     genomicsProfiles = GPP) #> Error in computeGenomeWideScores(DNASequenceSet = DNASequenceSet, genomicsProfiles = GPP): unused argument (genomicsProfiles = GPP)  #Compute PWM Scores PWMScores <- computePWMScore(genomicsProfiles = GenomeWide,     DNASequenceSet = DNASequenceSet,     loci = top, chromatinState = Access) #> Error in computePWMScore(genomicsProfiles = GenomeWide, DNASequenceSet = DNASequenceSet,     loci = top, chromatinState = Access): unused argument (genomicsProfiles = GenomeWide) #Compute Occupnacy Occupancy <- computeOccupancy(genomicsProfiles = PWMScores,     parameterOptions = OPP) #> Error in computeOccupancy(genomicsProfiles = PWMScores, parameterOptions = OPP): unused argument (genomicsProfiles = PWMScores)  #Compute ChIP profiles chipProfile <- computeChIPProfile(genomicProfiles = Occupancy,      loci = top,     parameterOptions = OPP) #> Error in .is.genomicProfiles(genomicProfiles): object 'Occupancy' not found #Estimating accuracy estimate AccuracyEstimate <- profileAccuracyEstimate(genomicProfiles = chipProfile,      ChIPScore = chip,      parameterOptions = OPP) #> Error in .is.genomicProfiles(genomicProfiles): object 'chipProfile' not found      # }"},{"path":"/reference/DNASequenceLength-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function DNASequenceLength  ~~ — DNASequenceLength-methods","title":"~~ Methods for Function DNASequenceLength  ~~ — DNASequenceLength-methods","text":"~~ Methods function DNASequenceLength  ~~","code":""},{"path":"/reference/DNASequenceLength-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function DNASequenceLength  ~~ — DNASequenceLength-methods","text":"signature(object = \"genomicProfilesInternal\")","code":""},{"path":"/reference/DNASequenceLength.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor method for DNASequenceLength slot in a\ngenomicProfiles — DNASequenceLength","title":"Accessor method for DNASequenceLength slot in a\ngenomicProfiles — DNASequenceLength","text":"Accessor method DNASequenceLength slot genomicProfiles","code":""},{"path":"/reference/DNASequenceLength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor method for DNASequenceLength slot in a\ngenomicProfiles — DNASequenceLength","text":"","code":"DNASequenceLength(object)"},{"path":"/reference/DNASequenceLength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor method for DNASequenceLength slot in a\ngenomicProfiles — DNASequenceLength","text":"object object  genomicProfiles","code":""},{"path":"/reference/DNASequenceLength.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor method for DNASequenceLength slot in a\ngenomicProfiles — DNASequenceLength","text":"model based ChIPanalyser requires length DNA sequence used compute scores. circustance, DNA Length total length DNA organism interest Accessible DNA genome wide scale.","code":""},{"path":"/reference/DNASequenceLength.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor method for DNASequenceLength slot in a\ngenomicProfiles — DNASequenceLength","text":"Returns DNASequenceLength slot genomicProfiles object.","code":""},{"path":"/reference/DNASequenceLength.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor method for DNASequenceLength slot in a\ngenomicProfiles — DNASequenceLength","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/DNASequenceLength.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor method for DNASequenceLength slot in a\ngenomicProfiles — DNASequenceLength","text":"Patrick C. N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/DNASequenceLength.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor method for DNASequenceLength slot in a\ngenomicProfiles — DNASequenceLength","text":"","code":"#Data extraction data(ChIPanalyserData) # path to Position Frequency Matrix PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #As an example of genome, this example will run on the Drosophila genome # \\donttest{ if(!require(\"BSgenome.Dmelanogaster.UCSC.dm6\", character.only = TRUE)){     if (!requireNamespace(\"BiocManager\", quietly=TRUE))         install.packages(\"BiocManager\")     BiocManager::install(\"BSgenome.Dmelanogaster.UCSC.dm6\") } library(BSgenome.Dmelanogaster.UCSC.dm6) DNASequenceSet <- getSeq(BSgenome.Dmelanogaster.UCSC.dm6)  #Building genomicProfiles object GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\",BPFrequency=DNASequenceSet) # Computing Genome Wide GenomceWide <- computeGenomeWideScores(DNASequenceSet = DNASequenceSet,     genomicProfiles = GPP) #> Extracting genome wide scores  #> Whole Genome ~ Both strands  #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Computing Mean waiting time   DNASequenceLength(GenomceWide) #> [1] 143726002  # }"},{"path":"/reference/GRList-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Virutal Class handle multiple data types one slot ( profiles)","code":""},{"path":"/reference/GRList-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"virtual Class: objects may created .","code":""},{"path":"/reference/GRList-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":"GRList-class purpose virtual classe store data     two different formats  one slot: GRangesList Lists","code":""},{"path":"/reference/GRList-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class ","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/GRList-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Patrick C. N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/GRList-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"GRList\") #> Virtual Class \"GRList\" [package \"ChIPanalyser\"] #>  #> No Slots, prototype of class \"CompressedGRangesList\" #>  #> Known Subclasses:  #> Class \"CompressedGRangesList\", directly #> Class \"list\", directly #> Class \"GRanges\", directly #> Class \"data.frame\", by class \"list\", distance 2 #> Class \"namedList\", by class \"list\", distance 2 #> Class \"GPos\", by class \"GRanges\", distance 2 #> Class \"listOfMethods\", by class \"list\", distance 3 #> Class \"UnstitchedGPos\", by class \"GRanges\", distance 3 #> Class \"StitchedGPos\", by class \"GRanges\", distance 3"},{"path":"/reference/PFMFormat-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function PFMFormat  ~~ — PFMFormat-methods","title":"~~ Methods for Function PFMFormat  ~~ — PFMFormat-methods","text":"Accesor method PFMFormat slot genomicProfiles object","code":""},{"path":"/reference/PFMFormat-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function PFMFormat  ~~ — PFMFormat-methods","text":"PFMFormat(object)","code":""},{"path":"/reference/PFMFormat.html","id":null,"dir":"Reference","previous_headings":"","what":"Accesor method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat","title":"Accesor method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat","text":"Accesor method PFMFormat slot genomicProfiles object","code":""},{"path":"/reference/PFMFormat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accesor method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat","text":"","code":"PFMFormat(object)"},{"path":"/reference/PFMFormat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accesor method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat","text":"object object genomicProfiles object","code":""},{"path":"/reference/PFMFormat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accesor method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat","text":"loading PositionFrequencyMatrix file, format file specified. Default raw. Please keep mind argument used parsing PositionFrequencyMatrix file. argument changed building genomicProfiles PositionFrequencyMatrix file, influence parsing file. PFMFormat can one following: \"raw\",\"transfac\",\"JASPAR\" \"sequences\"","code":""},{"path":"/reference/PFMFormat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accesor method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat","text":"Returns value assigned PFMFormat slot genomicProfiles","code":""},{"path":"/reference/PFMFormat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accesor method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/PFMFormat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accesor method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/PFMFormat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accesor method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat","text":"","code":"# Loading data data(ChIPanalyserData) #Loading PFM files PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #Building data objects #### THIS IS THE PREFFERED METHOD FOR SETTING PFMFormat GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\") #Setting New value for PFMFormat PFMFormat(GPP) #> [1] \"JASPAR\""},{"path":"/reference/PFMFormat_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function PFMFormat<-  ~~ — PFMFormat<--methods","title":"~~ Methods for Function PFMFormat<-  ~~ — PFMFormat<--methods","text":"Setter method PFMFormat slot genomicProfiles object","code":""},{"path":"/reference/PFMFormat_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function PFMFormat<-  ~~ — PFMFormat<--methods","text":"PFMFormat(object)<-value","code":""},{"path":"/reference/PFMFormat_.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat<-","title":"Setter method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat<-","text":"Setter method PFMFormat slot genomicProfiles object","code":""},{"path":"/reference/PFMFormat_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat<-","text":"","code":"PFMFormat(object) <- value"},{"path":"/reference/PFMFormat_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat<-","text":"object object genomicProfiles object value value character string one following:     \"raw\",\"transfac\",\"JASPAR\" \"sequences\". loading     PositionFrequencyMatrix file, format     file specified. Default JASPAR.","code":""},{"path":"/reference/PFMFormat_.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat<-","text":"loading PositionFrequencyMatrix file, format file specified. Default JASPAR. Please keep mind argument used parsing PositionFrequencyMatrix file. argument changed building genomicProfiles PositionFrequencyMatrix file, influence parsing file.","code":""},{"path":"/reference/PFMFormat_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat<-","text":"Returns genomicProfiles object updated value PFMFormat slot.","code":""},{"path":"/reference/PFMFormat_.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/PFMFormat_.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat<-","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/PFMFormat_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter method for the PFMFormat slot in a\ngenomicProfiles object — PFMFormat<-","text":"","code":"# Loading data data(ChIPanalyserData) #Loading PFM files PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #Building data objects #### THIS IS THE PREFFERED METHOD FOR SETTING PFMFormat GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\") #Setting New value for PFMFormat PFMFormat(GPP) <- \"JASPAR\""},{"path":"/reference/PWMThreshold-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function PWMThreshold  ~~ — PWMThreshold-methods","title":"~~ Methods for Function PWMThreshold  ~~ — PWMThreshold-methods","text":"Accessor method PWMThreshold slot  parameterOptions object","code":""},{"path":"/reference/PWMThreshold-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function PWMThreshold  ~~ — PWMThreshold-methods","text":"PWMThreshold(object)","code":""},{"path":"/reference/PWMThreshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor method for the PWMThreshold slot in  a\nparameterOptions object — PWMThreshold","title":"Accessor method for the PWMThreshold slot in  a\nparameterOptions object — PWMThreshold","text":"Accessor method PWMThreshold slot  parameterOptions object","code":""},{"path":"/reference/PWMThreshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor method for the PWMThreshold slot in  a\nparameterOptions object — PWMThreshold","text":"","code":"PWMThreshold(object)"},{"path":"/reference/PWMThreshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor method for the PWMThreshold slot in  a\nparameterOptions object — PWMThreshold","text":"object object parameterOptions object","code":""},{"path":"/reference/PWMThreshold.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor method for the PWMThreshold slot in  a\nparameterOptions object — PWMThreshold","text":"computePWMScore function requires -called PWM Threshold. threshold represents Threshold PWM Score selected. PWMThreshold positive numeric value (0 1. set 0, sites selected. set 0.7 (Default value), 70 % PWM Score (extension binding sites) IGNORED. top 30 % selected.","code":""},{"path":"/reference/PWMThreshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor method for the PWMThreshold slot in  a\nparameterOptions object — PWMThreshold","text":"Returns value assinged PWMThreshold slot parameterOptions object","code":""},{"path":"/reference/PWMThreshold.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor method for the PWMThreshold slot in  a\nparameterOptions object — PWMThreshold","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/PWMThreshold.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor method for the PWMThreshold slot in  a\nparameterOptions object — PWMThreshold","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/PWMThreshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor method for the PWMThreshold slot in  a\nparameterOptions object — PWMThreshold","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects GPP <- parameterOptions(PWMThreshold=0.7) #Accessing Value for  PWMThreshold PWMThreshold(GPP) #> [1] 0.7"},{"path":"/reference/PWMThreshold_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function PWMThreshold<-  ~~ — PWMThreshold<--methods","title":"~~ Methods for Function PWMThreshold<-  ~~ — PWMThreshold<--methods","text":"Setter Method PWMThreshold slot parameterOptions object","code":""},{"path":"/reference/PWMThreshold_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function PWMThreshold<-  ~~ — PWMThreshold<--methods","text":"PWMThreshold(object)<-value","code":""},{"path":"/reference/PWMThreshold_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter Method for the PWMThreshold slot in a\nparameterOptions object — PWMThreshold<-","title":"Setter Method for the PWMThreshold slot in a\nparameterOptions object — PWMThreshold<-","text":"Setter Method PWMThreshold slot parameterOptions object","code":""},{"path":"/reference/PWMThreshold_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter Method for the PWMThreshold slot in a\nparameterOptions object — PWMThreshold<-","text":"","code":"PWMThreshold(object) <- value"},{"path":"/reference/PWMThreshold_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter Method for the PWMThreshold slot in a\nparameterOptions object — PWMThreshold<-","text":"object object parameterOptions object value value numeric value (0 1) assigned     PWMThreshold slot     parameterOptions object.     Default set 0.7","code":""},{"path":"/reference/PWMThreshold_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter Method for the PWMThreshold slot in a\nparameterOptions object — PWMThreshold<-","text":"computePWMScore function requires -called PWM Threshold. threshold represents Threshold PWM Score selected. PWMThreshold positive numeric value (0 1. set 0, sites selected. set 0.7 (Default value), 70 % PWM Score (extension binding sites) IGNORED. top 30 % selected.","code":""},{"path":"/reference/PWMThreshold_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter Method for the PWMThreshold slot in a\nparameterOptions object — PWMThreshold<-","text":"Returns  parameterOptions objetc updated value PWMThreshold slot","code":""},{"path":"/reference/PWMThreshold_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter Method for the PWMThreshold slot in a\nparameterOptions object — PWMThreshold<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/PWMThreshold_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter Method for the PWMThreshold slot in a\nparameterOptions object — PWMThreshold<-","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/PWMThreshold_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter Method for the PWMThreshold slot in a\nparameterOptions object — PWMThreshold<-","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects GPP <- parameterOptions(PWMThreshold=0.7) #Setting Value for new PWMThreshold PWMThreshold(GPP) <- 0.8"},{"path":"/reference/PWMpseudocount-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function PWMpseudocount  ~~ — PWMpseudocount-methods","title":"~~ Methods for Function PWMpseudocount  ~~ — PWMpseudocount-methods","text":"Accessor Method PWMpseudocount slot parameterOptions","code":""},{"path":"/reference/PWMpseudocount-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function PWMpseudocount  ~~ — PWMpseudocount-methods","text":"PWMpseudocount(object)","code":""},{"path":"/reference/PWMpseudocount.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor Method for a PWMpseudocount slot in a\nparameterOptions — PWMpseudocount","title":"Accessor Method for a PWMpseudocount slot in a\nparameterOptions — PWMpseudocount","text":"Accessor Method PWMpseudocount slot parameterOptions","code":""},{"path":"/reference/PWMpseudocount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor Method for a PWMpseudocount slot in a\nparameterOptions — PWMpseudocount","text":"","code":"PWMpseudocount(object)"},{"path":"/reference/PWMpseudocount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor Method for a PWMpseudocount slot in a\nparameterOptions — PWMpseudocount","text":"object object parameterOptions object.","code":""},{"path":"/reference/PWMpseudocount.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor Method for a PWMpseudocount slot in a\nparameterOptions — PWMpseudocount","text":"context Position Weight Matricies, pseudocount used avoid 0 probabilities transformation Position Frequency Matrix Position Probability Matrix finally Postion Weight Matrix. essentially sample correction added case small sample size. effect base pair pseudocount assigned influence model create mathematical issues infinities zero division. Default set 1.","code":""},{"path":"/reference/PWMpseudocount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor Method for a PWMpseudocount slot in a\nparameterOptions — PWMpseudocount","text":"Returns value assigned PWMpseudocount slot parameterOptions object","code":""},{"path":"/reference/PWMpseudocount.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor Method for a PWMpseudocount slot in a\nparameterOptions — PWMpseudocount","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/PWMpseudocount.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor Method for a PWMpseudocount slot in a\nparameterOptions — PWMpseudocount","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/PWMpseudocount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor Method for a PWMpseudocount slot in a\nparameterOptions — PWMpseudocount","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects GPP <- parameterOptions(PWMpseudocount=0) #Accessing slot value PWMpseudocount(GPP) #> [1] 0"},{"path":"/reference/PWMpseudocount_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function PWMpseudocount<-  ~~ — PWMpseudocount<--methods","title":"~~ Methods for Function PWMpseudocount<-  ~~ — PWMpseudocount<--methods","text":"Setter Method pseudocount slot parameterOptions object","code":""},{"path":"/reference/PWMpseudocount_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function PWMpseudocount<-  ~~ — PWMpseudocount<--methods","text":"PWMpseudocount(object)<-value","code":""},{"path":"/reference/PWMpseudocount_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter Method for the pseudocount slot in a\nparameterOptions object — PWMpseudocount<-","title":"Setter Method for the pseudocount slot in a\nparameterOptions object — PWMpseudocount<-","text":"Setter Method pseudocount slot parameterOptions object","code":""},{"path":"/reference/PWMpseudocount_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter Method for the pseudocount slot in a\nparameterOptions object — PWMpseudocount<-","text":"","code":"PWMpseudocount(object) <- value"},{"path":"/reference/PWMpseudocount_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter Method for the pseudocount slot in a\nparameterOptions object — PWMpseudocount<-","text":"object object parameterOptions object value value numeric value assigned     pseudocount slot. Defualt set 1","code":""},{"path":"/reference/PWMpseudocount_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter Method for the pseudocount slot in a\nparameterOptions object — PWMpseudocount<-","text":"context Position Weight Matricies, pseudocount used avoid 0 probabilities transformation Position Frequency Matrix Position Probability Matrix finally Postion Weight Matrix. essentially sample correction added case small sample size. effect base pair pseudocount assigned influence model create mathematical issues infinities zero division.","code":""},{"path":"/reference/PWMpseudocount_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter Method for the pseudocount slot in a\nparameterOptions object — PWMpseudocount<-","text":"Returns parameterOptions object updated value pseudocount slot.","code":""},{"path":"/reference/PWMpseudocount_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter Method for the pseudocount slot in a\nparameterOptions object — PWMpseudocount<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/PWMpseudocount_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter Method for the pseudocount slot in a\nparameterOptions object — PWMpseudocount<-","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/PWMpseudocount_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter Method for the pseudocount slot in a\nparameterOptions object — PWMpseudocount<-","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects GPP <- parameterOptions( PWMpseudocount=0) #Setting Value for new PWMpseudocount PWMpseudocount(GPP) <- 1"},{"path":"/reference/PositionFrequencyMatrix-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function PositionFrequencyMatrix  ~~ — PositionFrequencyMatrix-methods","title":"~~ Methods for Function PositionFrequencyMatrix  ~~ — PositionFrequencyMatrix-methods","text":"Accessor method PFM slot genomicProfiles object","code":""},{"path":"/reference/PositionFrequencyMatrix-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function PositionFrequencyMatrix  ~~ — PositionFrequencyMatrix-methods","text":"PositionFrequencyMatrix(object)","code":""},{"path":"/reference/PositionFrequencyMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix","title":"Accessor method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix","text":"Accessor method PFM slot genomicProfiles object","code":""},{"path":"/reference/PositionFrequencyMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix","text":"","code":"PositionFrequencyMatrix(object)"},{"path":"/reference/PositionFrequencyMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix","text":"object object genomicProfiles object","code":""},{"path":"/reference/PositionFrequencyMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix","text":"creating genomicProfiles object, possible access Position Frequency Matrix slot. However slot empty genomicProfiles object built using directly Position Weight Matrix. See genomicProfiles","code":""},{"path":"/reference/PositionFrequencyMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix","text":"Returns Position Frequency Matrix (PFM slot) used compute PositionWeightMatrix genomicProfiles object","code":""},{"path":"/reference/PositionFrequencyMatrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/PositionFrequencyMatrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/PositionFrequencyMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix","text":"","code":"#Loading data data(ChIPanalyserData) #Loading PFM files PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #Building genomicProfiles object GPP<-genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\") # Accessing Slot PositionFrequencyMatrix(GPP) #>   [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> A  746  959 1256 1871 1982 2196 1547  745 3908     0     0    77  3613   428 #> C  872 1437  847 1358  344  324 1841  635    0     0  3985     0     0   170 #> G 1132  847 1309  756  671 1013  597    0   77     0     0  3908   372     0 #> T 1235  742  573    0  988  452    0 2605    0  3985     0     0     0  3387 #>   [,15] #> A  2162 #> C     0 #> G   788 #> T  1035"},{"path":"/reference/PositionFrequencyMatrix_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function PositionFrequencyMatrix<-  ~~ — PositionFrequencyMatrix<--methods","title":"~~ Methods for Function PositionFrequencyMatrix<-  ~~ — PositionFrequencyMatrix<--methods","text":"Setter method PFM slot genomicProfiles object","code":""},{"path":"/reference/PositionFrequencyMatrix_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function PositionFrequencyMatrix<-  ~~ — PositionFrequencyMatrix<--methods","text":"PositionFrequencyMatrix(object)<-\"path//file/\"  PositionFrequencyMatrix(object)<-value","code":""},{"path":"/reference/PositionFrequencyMatrix_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix<-","title":"Setter method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix<-","text":"Setter method PFM slot genomicProfiles object","code":""},{"path":"/reference/PositionFrequencyMatrix_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix<-","text":"","code":"PositionFrequencyMatrix(object)<- value"},{"path":"/reference/PositionFrequencyMatrix_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix<-","text":"object object genomicProfiles object value value can two forms. Either matrix form     Position Frequency Matrix path//file character string.","code":""},{"path":"/reference/PositionFrequencyMatrix_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix<-","text":"Position Frequency Matrix one fundamental object needs supplied  genomicProfiles. building genomicProfiles, Position Frequency Matrix needs modified possible manually update value matrix using function . two options type data may supplied PFM slot: matrix form Position Frequency Matrix (matrix four rows - one base pair (ACTG) number columns equal number sites binding site), possible (also recommended) provide path file containing Position Frequency Matrix. Position Frequency Matrix file may come multiple form RAW, Transfac JASPAR. WARNING: genomicProfiles object already created PFM supplied/updated , Positon Weight Matrix automatically updated well.","code":""},{"path":"/reference/PositionFrequencyMatrix_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix<-","text":"Returns genomicProfiles updated PFM slot (described lead updated PositionWeightMatrix).","code":""},{"path":"/reference/PositionFrequencyMatrix_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/PositionFrequencyMatrix_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix<-","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/PositionFrequencyMatrix_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter method for the PFM slot in a\ngenomicProfiles object — PositionFrequencyMatrix<-","text":"","code":"#Loading data data(ChIPanalyserData) #Loading PFM files PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #Building genomicProfiles object # NOT ADVISED!!!! PLEASE PARSE PFM AND PFMFormat together GPP<-genomicProfiles(PFMFormat = \"JASPAR\") #Setting PFM PositionFrequencyMatrix(GPP) <- PFM"},{"path":"/reference/PositionWeightMatrix-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function PositionWeightMatrix  ~~ — PositionWeightMatrix-methods","title":"~~ Methods for Function PositionWeightMatrix  ~~ — PositionWeightMatrix-methods","text":"Accessor Method PWM slot genomicProfiles object","code":""},{"path":"/reference/PositionWeightMatrix-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function PositionWeightMatrix  ~~ — PositionWeightMatrix-methods","text":"PositionWeightMatrix(object)","code":""},{"path":"/reference/PositionWeightMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor Method for the PWM slot in a\ngenomicProfiles object — PositionWeightMatrix","title":"Accessor Method for the PWM slot in a\ngenomicProfiles object — PositionWeightMatrix","text":"Accessor Method PWM slot genomicProfiles object","code":""},{"path":"/reference/PositionWeightMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor Method for the PWM slot in a\ngenomicProfiles object — PositionWeightMatrix","text":"","code":"PositionWeightMatrix(object)"},{"path":"/reference/PositionWeightMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor Method for the PWM slot in a\ngenomicProfiles object — PositionWeightMatrix","text":"object object genomicProfiles","code":""},{"path":"/reference/PositionWeightMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor Method for the PWM slot in a\ngenomicProfiles object — PositionWeightMatrix","text":"creating genomicProfiles object, possible access Position Weight Matrix stored slot. slot always contain something. slot either supplied user directly computed Position Frequency Matrix supplied.","code":""},{"path":"/reference/PositionWeightMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor Method for the PWM slot in a\ngenomicProfiles object — PositionWeightMatrix","text":"Returns matrix form Position Weight Matrix","code":""},{"path":"/reference/PositionWeightMatrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor Method for the PWM slot in a\ngenomicProfiles object — PositionWeightMatrix","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/PositionWeightMatrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor Method for the PWM slot in a\ngenomicProfiles object — PositionWeightMatrix","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/PositionWeightMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor Method for the PWM slot in a\ngenomicProfiles object — PositionWeightMatrix","text":"","code":"#Loading data data(ChIPanalyserData) #Loading PFM files PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #Building genomicProfiles object GPP<-genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\") # Accessing Slot PositionWeightMatrix(GPP) #>         [,1]        [,2]       [,3]       [,4]         [,5]        [,6] #> A -0.2891885 -0.03809741  0.2316372  0.6301128  0.687738702  0.79025750 #> C -0.1331731  0.36623770 -0.1622533  0.3097032 -1.062881002 -1.12273432 #> G  0.1277129 -0.16225333  0.2729606 -0.2758771 -0.395107494  0.01666913 #> T  0.2147795 -0.29456303 -0.5529272 -8.2905435 -0.008313437 -0.79001402 #>         [,7]       [,8]      [,9]     [,10]     [,11]     [,12]      [,13] #> A  0.4399853 -0.2905294  1.366596 -8.290544 -8.290544 -2.557202  1.2881138 #> C  0.6139508 -0.4502305 -8.290544 -8.290544  1.386106 -8.290544 -8.2905435 #> G -0.5119134 -8.2905435 -2.557202 -8.290544 -8.290544  1.366596 -0.9846835 #> T -8.2905435  0.9610348 -8.290544  1.386106 -8.290544 -8.290544 -8.2905435 #>       [,14]       [,15] #> A -0.844542  0.77465549 #> C -1.766981 -8.29054350 #> G -8.290544 -0.23443384 #> T  1.223525  0.03814908"},{"path":"/reference/PositionWeightMatrix_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function PositionWeightMatrix<-  ~~ — PositionWeightMatrix<--methods","title":"~~ Methods for Function PositionWeightMatrix<-  ~~ — PositionWeightMatrix<--methods","text":"Setter Method PositionWeightMatrix slot genomicProfiles object","code":""},{"path":"/reference/PositionWeightMatrix_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function PositionWeightMatrix<-  ~~ — PositionWeightMatrix<--methods","text":"PositionWeightMatrix(object)<-value","code":""},{"path":"/reference/PositionWeightMatrix_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter Method for the PositionWeightMatrix slot in a\ngenomicProfiles object — PositionWeightMatrix<-","title":"Setter Method for the PositionWeightMatrix slot in a\ngenomicProfiles object — PositionWeightMatrix<-","text":"Setter Method PositionWeightMatrix slot genomicProfiles object","code":""},{"path":"/reference/PositionWeightMatrix_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter Method for the PositionWeightMatrix slot in a\ngenomicProfiles object — PositionWeightMatrix<-","text":"","code":"PositionWeightMatrix(object) <- value"},{"path":"/reference/PositionWeightMatrix_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter Method for the PositionWeightMatrix slot in a\ngenomicProfiles object — PositionWeightMatrix<-","text":"object object genomicProfiles object value value matrix form Position Weight Matrix.","code":""},{"path":"/reference/PositionWeightMatrix_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter Method for the PositionWeightMatrix slot in a\ngenomicProfiles object — PositionWeightMatrix<-","text":"Position Weight Matrix readily available, possible directly assign matrix PWM slot. However, possible genomicProfiles object already created. case, advise first create genomicProfiles object. noted Position Weight Matrix automatically computed Position Frequency Matrix. Position Frequency Matrix available, Position Weight Matrix can directly assigned slot.","code":""},{"path":"/reference/PositionWeightMatrix_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter Method for the PositionWeightMatrix slot in a\ngenomicProfiles object — PositionWeightMatrix<-","text":"Returns genomicProfiles object updated value PWM slot","code":""},{"path":"/reference/PositionWeightMatrix_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter Method for the PositionWeightMatrix slot in a\ngenomicProfiles object — PositionWeightMatrix<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/PositionWeightMatrix_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter Method for the PositionWeightMatrix slot in a\ngenomicProfiles object — PositionWeightMatrix<-","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/PositionWeightMatrix_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter Method for the PositionWeightMatrix slot in a\ngenomicProfiles object — PositionWeightMatrix<-","text":"","code":"#Building genomicProfiles object GPP <- genomicProfiles() #Setting PWM to PositionWeightMatrix slot PWM <- matrix(runif(32,-10,20), ncol=8) rownames(PWM) <- c(\"A\",\"C\",\"T\",\"G\") PositionWeightMatrix(GPP) <- PWM"},{"path":"/reference/averageExpPWMScore-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function averageExpPWMScore  ~~ — averageExpPWMScore-methods","title":"~~ Methods for Function averageExpPWMScore  ~~ — averageExpPWMScore-methods","text":"~~ Methods function averageExpPWMScore  ~~","code":""},{"path":"/reference/averageExpPWMScore-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function averageExpPWMScore  ~~ — averageExpPWMScore-methods","text":"signature(object = \"genomicProfilesInternal\")","code":""},{"path":"/reference/averageExpPWMScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor for averageExpPWMScore slot in a\ngenomicProfiles object. — averageExpPWMScore","title":"Accessor for averageExpPWMScore slot in a\ngenomicProfiles object. — averageExpPWMScore","text":"Extract Access averageExpPWMScore slot genomicProfiles","code":""},{"path":"/reference/averageExpPWMScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor for averageExpPWMScore slot in a\ngenomicProfiles object. — averageExpPWMScore","text":"","code":"averageExpPWMScore(object)"},{"path":"/reference/averageExpPWMScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor for averageExpPWMScore slot in a\ngenomicProfiles object. — averageExpPWMScore","text":"object object genomicProfiles","code":""},{"path":"/reference/averageExpPWMScore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor for averageExpPWMScore slot in a\ngenomicProfiles object. — averageExpPWMScore","text":"general rule, averageExpPWMScore computed updated internally computeGenomeWideScores. Idealy, slot updated user. averageExpPWMScore sum exponential every PWM score given DNA sequence divided length said DNA sequence (DNASequenceLength). can either full length sequence accessible sequence (see computeGenomeWideScores).","code":""},{"path":"/reference/averageExpPWMScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor for averageExpPWMScore slot in a\ngenomicProfiles object. — averageExpPWMScore","text":"Returns averageExpPWMScore genomicProfiles computed.","code":""},{"path":"/reference/averageExpPWMScore.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor for averageExpPWMScore slot in a\ngenomicProfiles object. — averageExpPWMScore","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/averageExpPWMScore.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor for averageExpPWMScore slot in a\ngenomicProfiles object. — averageExpPWMScore","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/averageExpPWMScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor for averageExpPWMScore slot in a\ngenomicProfiles object. — averageExpPWMScore","text":"","code":"# Accessing Data data(ChIPanalyserData) # path to Position Frequency Matrix PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") # Building genomicProfiles object GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\") # Extracting AllSitesAboveThreshold slot averageExpPWMScore(GPP) #> logical(0)  ## Note this slot is now empty as nothing has yet been computed"},{"path":"/reference/backgroundSignal-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function backgroundSignal  ~~ — backgroundSignal-methods","title":"~~ Methods for Function backgroundSignal  ~~ — backgroundSignal-methods","text":"~~ Methods function backgroundSignal  ~~","code":""},{"path":"/reference/backgroundSignal-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function backgroundSignal  ~~ — backgroundSignal-methods","text":"signature(object = \"parameterOptions\")","code":""},{"path":"/reference/backgroundSignal.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor method for the backgroundSignal slot in a\nparameterOptions object. — backgroundSignal","title":"Accessor method for the backgroundSignal slot in a\nparameterOptions object. — backgroundSignal","text":"Extract access backgroundSignal slot parameterOptions object.","code":""},{"path":"/reference/backgroundSignal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor method for the backgroundSignal slot in a\nparameterOptions object. — backgroundSignal","text":"","code":"backgroundSignal(object)"},{"path":"/reference/backgroundSignal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor method for the backgroundSignal slot in a\nparameterOptions object. — backgroundSignal","text":"object object parameterOptions","code":""},{"path":"/reference/backgroundSignal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor method for the backgroundSignal slot in a\nparameterOptions object. — backgroundSignal","text":"Default Value: 0 computing computeOccupancy, ChIP-seq background signal used scale Occupancy considering backgroundSignal maxSignal. backgroundSignal also used nomalise occupancies maxOccupancy. backgroundSignal usually comes experimental data provided user. general rule, ChIP-seq data available used computeChIPProfile , profileAccuracyEstimate plotOccupancyProfile, advised use backgroundSignal data. strongly encourage set values building parameterOptions object.","code":""},{"path":"/reference/backgroundSignal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor method for the backgroundSignal slot in a\nparameterOptions object. — backgroundSignal","text":"Returns backgroundSignal parameterOptions object.","code":""},{"path":"/reference/backgroundSignal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor method for the backgroundSignal slot in a\nparameterOptions object. — backgroundSignal","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/backgroundSignal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor method for the backgroundSignal slot in a\nparameterOptions object. — backgroundSignal","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/backgroundSignal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor method for the backgroundSignal slot in a\nparameterOptions object. — backgroundSignal","text":"","code":"# Building occupancyProfileParameters object OPP <- parameterOptions() #Viewing single value in object backgroundSignal(OPP) #> [1] 0"},{"path":"/reference/backgroundSignal_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function backgroundSignal<-  ~~ — backgroundSignal<--methods","title":"~~ Methods for Function backgroundSignal<-  ~~ — backgroundSignal<--methods","text":"~~ Methods function backgroundSignal<-  ~~","code":""},{"path":"/reference/backgroundSignal_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function backgroundSignal<-  ~~ — backgroundSignal<--methods","text":"backgroundSignal(object)<-value","code":""},{"path":"/reference/backgroundSignal_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter method for backgroundSignal slot in a\nparameterOptions — backgroundSignal<-","title":"Setter method for backgroundSignal slot in a\nparameterOptions — backgroundSignal<-","text":"Setter method backgroundSignal slot parameterOptions","code":""},{"path":"/reference/backgroundSignal_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter method for backgroundSignal slot in a\nparameterOptions — backgroundSignal<-","text":"","code":"backgroundSignal(object)<-value"},{"path":"/reference/backgroundSignal_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter method for backgroundSignal slot in a\nparameterOptions — backgroundSignal<-","text":"object object parameterOptions object. value value value assigned backgroundSignal     slot     parameterOptions.     backgroundSignal positive value.     Defualt value 0.","code":""},{"path":"/reference/backgroundSignal_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter method for backgroundSignal slot in a\nparameterOptions — backgroundSignal<-","text":"Defualt value: 0. computing computeOccupancy, ChIP-seq background signal used scale Occupancy considering backgroundSignal maxSignal. backgroundSignal also used nomalise occupancies maxOccupancy. backgroundSignal usually comes experimental data provided user. general rule, ChIP-seq data available used computeChIPProfile , profileAccuracyEstimate plotOccupancyProfile, advised use backgroundSignal data. strongly encourage set values building parameterOptions object.","code":""},{"path":"/reference/backgroundSignal_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter method for backgroundSignal slot in a\nparameterOptions — backgroundSignal<-","text":"Returns parameterOptions object new value assigned backgroundSignal slot.","code":""},{"path":"/reference/backgroundSignal_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter method for backgroundSignal slot in a\nparameterOptions — backgroundSignal<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/backgroundSignal_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter method for backgroundSignal slot in a\nparameterOptions — backgroundSignal<-","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/backgroundSignal_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter method for backgroundSignal slot in a\nparameterOptions — backgroundSignal<-","text":"","code":"# Building occupancyProfileParameters object OPP <- parameterOptions() # Setting new value for backgroundSignal backgroundSignal(OPP) <- 0.2 # Viewing whole object with new updated value OPP #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>                         parameterOptions  #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  processingChIP options  #>   #>  chipMean:                                                  200  #>  chipSd:                                                    200  #>  chipSmooth:                                                250  #>  lociWidth:                                               20000  #>  noiseFilter:                                              zero  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  processingChIP options Updated  #>   #>  maxSignal:                                                   1  #>  backgroundSignal:                                          0.2  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  Position Weight Matrix Options  #>   #>  naturalLog:                                               TRUE  #>  noOfSites:                                                 all  #>  PWMpseudocount:                                              1  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  Genome Wide Score options  #>   #>  strandRule:                                                max  #>  whichstrand:                                                +-  #>  lambdaPWM:                                                   1  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  PWM Scores above Threshold options  #>   #>  strandRule:                                                max  #>  whichstrand:                                                +-  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  Occupancy options  #>   #>  Ploidy:                                                      2  #>  lambdaPWM:                                                   1  #>  boundMolecules:                                           1000  #>  maxSignal:                                                   1  #>  backgroundSignal:                                          0.2  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  ChIP Profile options  #>   #>  chipMean:                                                  200  #>  chipSd:                                                    200  #>  chipSmooth:                                                250  #>  stepSize:                                                   10  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #Viewing single value in object backgroundSignal(OPP) #> [1] 0.2"},{"path":"/reference/boundMolecules-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function boundMolecules  ~~ — boundMolecules-methods","title":"~~ Methods for Function boundMolecules  ~~ — boundMolecules-methods","text":"~~ Methods function boundMolecules  ~~","code":""},{"path":"/reference/boundMolecules-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function boundMolecules  ~~ — boundMolecules-methods","text":"signature(object = \"parameterOptions\")","code":""},{"path":"/reference/boundMolecules.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor methods for boundMolecules slot in\nparameterOptions object. — boundMolecules","title":"Accessor methods for boundMolecules slot in\nparameterOptions object. — boundMolecules","text":"Extract Access boundMolecules slot parameterOptions object.","code":""},{"path":"/reference/boundMolecules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor methods for boundMolecules slot in\nparameterOptions object. — boundMolecules","text":"","code":"boundMolecules(object)"},{"path":"/reference/boundMolecules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor methods for boundMolecules slot in\nparameterOptions object. — boundMolecules","text":"object object parameterOptions object.","code":""},{"path":"/reference/boundMolecules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor methods for boundMolecules slot in\nparameterOptions object. — boundMolecules","text":"Defaut value: 1000 computing occupancy (computeOccupancy), value number bound Molecules DNA needed. value can updated set parameterOptions object. number molecules unknown,possible infer value computeOptimal. strongly encourage set values building parameterOptions object.","code":""},{"path":"/reference/boundMolecules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor methods for boundMolecules slot in\nparameterOptions object. — boundMolecules","text":"Returns boundMolecules slot parameterOptions object.","code":""},{"path":"/reference/boundMolecules.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor methods for boundMolecules slot in\nparameterOptions object. — boundMolecules","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/boundMolecules.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor methods for boundMolecules slot in\nparameterOptions object. — boundMolecules","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/boundMolecules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor methods for boundMolecules slot in\nparameterOptions object. — boundMolecules","text":"","code":"# Building parameterOptions object OPP <- parameterOptions() #Checking single value by slot accessor boundMolecules(OPP) #> [1] 1000"},{"path":"/reference/boundMolecules_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function boundMolecules<-  ~~ — boundMolecules<--methods","title":"~~ Methods for Function boundMolecules<-  ~~ — boundMolecules<--methods","text":"~~ Methods function boundMolecules<-  ~~","code":""},{"path":"/reference/boundMolecules_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function boundMolecules<-  ~~ — boundMolecules<--methods","text":"signature(object = \"parameterOptions\", value = \"vector\")","code":""},{"path":"/reference/boundMolecules_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter method for the boundMolecules slot in a\nparameterOptions object. — boundMolecules<-","title":"Setter method for the boundMolecules slot in a\nparameterOptions object. — boundMolecules<-","text":"Setter method boundMolecules slot parameterOptions object.","code":""},{"path":"/reference/boundMolecules_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter method for the boundMolecules slot in a\nparameterOptions object. — boundMolecules<-","text":"","code":"boundMolecules(object)<-value"},{"path":"/reference/boundMolecules_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter method for the boundMolecules slot in a\nparameterOptions object. — boundMolecules<-","text":"object object parameterOptions object. value value positive integer vector positive     integers describing number ofmolecules bound DNA.     Defaut value 1000.","code":""},{"path":"/reference/boundMolecules_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter method for the boundMolecules slot in a\nparameterOptions object. — boundMolecules<-","text":"Default value: 1000 computing occupancy (computeOccupancy), value number bound Molecules DNA needed. value can updated set parameterOptions object. number molecules unknown, possible infer value computeOptimal. strongly encourage set values building parameterOptions object.","code":""},{"path":"/reference/boundMolecules_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter method for the boundMolecules slot in a\nparameterOptions object. — boundMolecules<-","text":"Returns parameterOptions object updated value boundMolecules.","code":""},{"path":"/reference/boundMolecules_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter method for the boundMolecules slot in a\nparameterOptions object. — boundMolecules<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/boundMolecules_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter method for the boundMolecules slot in a\nparameterOptions object. — boundMolecules<-","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/boundMolecules_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter method for the boundMolecules slot in a\nparameterOptions object. — boundMolecules<-","text":"","code":"# Building parameterOptions object OPP <- parameterOptions() # Setting new boundMolecules value in OPP boundMolecules(OPP) <- 5000 #Checking value in whole object OPP #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>                         parameterOptions  #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  processingChIP options  #>   #>  chipMean:                                                  200  #>  chipSd:                                                    200  #>  chipSmooth:                                                250  #>  lociWidth:                                               20000  #>  noiseFilter:                                              zero  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  processingChIP options Updated  #>   #>  maxSignal:                                                   1  #>  backgroundSignal:                                            0  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  Position Weight Matrix Options  #>   #>  naturalLog:                                               TRUE  #>  noOfSites:                                                 all  #>  PWMpseudocount:                                              1  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  Genome Wide Score options  #>   #>  strandRule:                                                max  #>  whichstrand:                                                +-  #>  lambdaPWM:                                                   1  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  PWM Scores above Threshold options  #>   #>  strandRule:                                                max  #>  whichstrand:                                                +-  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  Occupancy options  #>   #>  Ploidy:                                                      2  #>  lambdaPWM:                                                   1  #>  boundMolecules:                                           5000  #>  maxSignal:                                                   1  #>  backgroundSignal:                                            0  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  ChIP Profile options  #>   #>  chipMean:                                                  200  #>  chipSd:                                                    200  #>  chipSmooth:                                                250  #>  stepSize:                                                   10  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #Checking single value by slot accessor boundMolecules(OPP) #> [1] 5000"},{"path":"/reference/chipMean-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function chipMean  ~~ — chipMean-methods","title":"~~ Methods for Function chipMean  ~~ — chipMean-methods","text":"~~ Methods function chipMean  ~~","code":""},{"path":"/reference/chipMean-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function chipMean  ~~ — chipMean-methods","text":"chipMean(object)","code":""},{"path":"/reference/chipMean.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor method for chipMean slot in a\nparameterOptions object. — chipMean","title":"Accessor method for chipMean slot in a\nparameterOptions object. — chipMean","text":"Accessor method chipMean slot parameterOptions object.","code":""},{"path":"/reference/chipMean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor method for chipMean slot in a\nparameterOptions object. — chipMean","text":"","code":"chipMean(object)"},{"path":"/reference/chipMean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor method for chipMean slot in a\nparameterOptions object. — chipMean","text":"object object parameterOptions","code":""},{"path":"/reference/chipMean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor method for chipMean slot in a\nparameterOptions object. — chipMean","text":"Default vlaue : 150 computing ChIP-seq like profiles (computeChIPProfile, occupancy values given computeOccupancy transformed ChIP-seq like profiles. average size ChIP-seq peak described Kaplan (Kaplan et al. , 2011). advised use average width ChIP peaks actual ChIP-seq data. strongly encourage set values building parameterOptions object.","code":""},{"path":"/reference/chipMean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor method for chipMean slot in a\nparameterOptions object. — chipMean","text":"Returns chipMean slot parameterOptions object.","code":""},{"path":"/reference/chipMean.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor method for chipMean slot in a\nparameterOptions object. — chipMean","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Kaplan T.,Li X.-Y.,Sabo P.J.,Thomas S.,Stamatoyannopoulos J.., Biggin M.D., EisenM.B. Quantitative models mechanisms control genome-wide patterns transcription factor binding early Drosophila development, PLoS Genet.,2011, vol. 7 pg. e1001290","code":""},{"path":"/reference/chipMean.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor method for chipMean slot in a\nparameterOptions object. — chipMean","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/chipMean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor method for chipMean slot in a\nparameterOptions object. — chipMean","text":"","code":"# Building parameterOptions object OPP <- parameterOptions() #Accessing chipMean slot in OPP chipMean(OPP) #> [1] 200"},{"path":"/reference/chipMean_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function chipMean<-  ~~ — chipMean<--methods","title":"~~ Methods for Function chipMean<-  ~~ — chipMean<--methods","text":"~~ Methods function chipMean<-  ~~","code":""},{"path":"/reference/chipMean_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function chipMean<-  ~~ — chipMean<--methods","text":"chipMean(object)<-value","code":""},{"path":"/reference/chipMean_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Access methods for chipMean slot in\nparameterOptions object. — chipMean<-","title":"Access methods for chipMean slot in\nparameterOptions object. — chipMean<-","text":"Access methods chipMean slot parameterOptions object.","code":""},{"path":"/reference/chipMean_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access methods for chipMean slot in\nparameterOptions object. — chipMean<-","text":"","code":"chipMean(object)<-value"},{"path":"/reference/chipMean_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access methods for chipMean slot in\nparameterOptions object. — chipMean<-","text":"object object parameterOptions object. value value positive numeric value assigned     chipMean slot.     chipMean describes average size     ChIP-seq peak base pairs.","code":""},{"path":"/reference/chipMean_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Access methods for chipMean slot in\nparameterOptions object. — chipMean<-","text":"Default vlaue : 150 computing ChIP-seq like profiles (computeChIPProfile, occupancy values given computeOccupancy transformed ChIP-seq like profiles. average size ChIP-seq peak described Kaplan (Kaplan et al. , 2011). advised use average width ChIP peaks actual ChIP-seq data. strongly encourage set values building parameterOptions object.","code":""},{"path":"/reference/chipMean_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access methods for chipMean slot in\nparameterOptions object. — chipMean<-","text":"Returns parameterOptions object updated value chipMean slot.","code":""},{"path":"/reference/chipMean_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Access methods for chipMean slot in\nparameterOptions object. — chipMean<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Kaplan T.,Li X.-Y.,Sabo P.J.,Thomas S.,Stamatoyannopoulos J.., Biggin M.D.,EisenM.B. Quantitative models mechanisms control genome-wide patterns transcription factor binding early Drosophila development, PLoS Genet.,2011, vol. 7 pg. e1001290","code":""},{"path":"/reference/chipMean_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Access methods for chipMean slot in\nparameterOptions object. — chipMean<-","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/chipMean_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access methods for chipMean slot in\nparameterOptions object. — chipMean<-","text":"","code":"# Building parameterOptions object OPP <- parameterOptions() # Setting new value for slot chipMean(OPP) <- 250"},{"path":"/reference/chipSd-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function chipSd  ~~ — chipSd-methods","title":"~~ Methods for Function chipSd  ~~ — chipSd-methods","text":"~~ Methods function chipSd  ~~","code":""},{"path":"/reference/chipSd-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function chipSd  ~~ — chipSd-methods","text":"chipSd(object)","code":""},{"path":"/reference/chipSd.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor method for chipSd slot in a\nparameterOptions object. — chipSd","title":"Accessor method for chipSd slot in a\nparameterOptions object. — chipSd","text":"Access Extract chipSd slot parameterOptions object.","code":""},{"path":"/reference/chipSd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor method for chipSd slot in a\nparameterOptions object. — chipSd","text":"","code":"chipSd(object)"},{"path":"/reference/chipSd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor method for chipSd slot in a\nparameterOptions object. — chipSd","text":"object object parameterOptions","code":""},{"path":"/reference/chipSd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor method for chipSd slot in a\nparameterOptions object. — chipSd","text":"computing ChIP-seq like profiles (computeChIPProfile, occupancy values given computeOccupancy transformed ChIP-seq like profiles. average size ChIP-seq peak described Kaplan (Kaplan et al. , 2011). average peak size subject variation. variation accounted chipSd. advised use standard deviation ChIP peak width actual ChIP-seq data. strongly encourage set values building parameterOptions object.","code":""},{"path":"/reference/chipSd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor method for chipSd slot in a\nparameterOptions object. — chipSd","text":"Returns parameterOptions object updated value chipSd.","code":""},{"path":"/reference/chipSd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor method for chipSd slot in a\nparameterOptions object. — chipSd","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Kaplan T.,Li X.-Y.,Sabo P.J.,Thomas S.,Stamatoyannopoulos J.., Biggin M.D., Eisen M.B. Quantitative models mechanisms control genome-wide patterns transcription factor binding early Drosophila development, PLoS Genet.,2011, vol. 7 pg. e1001290","code":""},{"path":"/reference/chipSd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor method for chipSd slot in a\nparameterOptions object. — chipSd","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/chipSd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor method for chipSd slot in a\nparameterOptions object. — chipSd","text":"","code":"# Building parameterOptions object OPP <- parameterOptions() # Accessing chipSd slot chipSd(OPP) #> [1] 200"},{"path":"/reference/chipSd_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function chipSd<-  ~~ — chipSd<--methods","title":"~~ Methods for Function chipSd<-  ~~ — chipSd<--methods","text":"~~ Methods function chipSd<-  ~~","code":""},{"path":"/reference/chipSd_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function chipSd<-  ~~ — chipSd<--methods","text":"chipSd(object)<-value","code":""},{"path":"/reference/chipSd_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter methods for chipSd slot in a\nparameterOptions object. — chipSd<-","title":"Setter methods for chipSd slot in a\nparameterOptions object. — chipSd<-","text":"Setter methods chipSd slot parameterOptions object.","code":""},{"path":"/reference/chipSd_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter methods for chipSd slot in a\nparameterOptions object. — chipSd<-","text":"","code":"chipSd(object)<-value"},{"path":"/reference/chipSd_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter methods for chipSd slot in a\nparameterOptions object. — chipSd<-","text":"object object parameterOptions object. value value positive nurmeric value assigned     chipSd slot.     Default value 150.","code":""},{"path":"/reference/chipSd_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter methods for chipSd slot in a\nparameterOptions object. — chipSd<-","text":"computing ChIP-seq like profiles (computeChIPProfile, occupancy values given computeOccupancy transformed ChIP-seq like profiles. average size ChIP-seq peak described Kaplan (Kaplan et al. , 2011). average peak size subject variation. variation accounted chipSd. advised use standard deviation ChIP peak width actual ChIP-seq data. strongly encourage set values building parameterOptions object.","code":""},{"path":"/reference/chipSd_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter methods for chipSd slot in a\nparameterOptions object. — chipSd<-","text":"Returns parameterOptions object updated value chipSd.","code":""},{"path":"/reference/chipSd_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter methods for chipSd slot in a\nparameterOptions object. — chipSd<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Kaplan T.,Li X.-Y.,Sabo P.J.,Thomas S.,Stamatoyannopoulos J.., Biggin M.D., Eisen M.B. Quantitative models mechanisms control genome-wide patterns transcription factor binding early Drosophila development, PLoS Genet.,2011, vol. 7 pg. e1001290","code":""},{"path":"/reference/chipSd_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter methods for chipSd slot in a\nparameterOptions object. — chipSd<-","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/chipSd_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter methods for chipSd slot in a\nparameterOptions object. — chipSd<-","text":"","code":"# Building parameterOptions object OPP <- parameterOptions() # Setting new value for chipSd slot chipSd(OPP) <-  250"},{"path":"/reference/chipSmooth-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function chipSmooth  ~~ — chipSmooth-methods","title":"~~ Methods for Function chipSmooth  ~~ — chipSmooth-methods","text":"~~ Methods function chipSmooth  ~~","code":""},{"path":"/reference/chipSmooth-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function chipSmooth  ~~ — chipSmooth-methods","text":"signature(object = \"parameterOptions\")","code":""},{"path":"/reference/chipSmooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor methods for chipSmooth slot in a\nparameterOptions object. — chipSmooth","title":"Accessor methods for chipSmooth slot in a\nparameterOptions object. — chipSmooth","text":"Access Extract chipSmooth slot parameterOptions object.","code":""},{"path":"/reference/chipSmooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor methods for chipSmooth slot in a\nparameterOptions object. — chipSmooth","text":"","code":"chipSmooth(object)"},{"path":"/reference/chipSmooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor methods for chipSmooth slot in a\nparameterOptions object. — chipSmooth","text":"object object parameterOptions object.","code":""},{"path":"/reference/chipSmooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor methods for chipSmooth slot in a\nparameterOptions object. — chipSmooth","text":"computing ChIP-seq like (computeChIPProfile) profile occupancy data (see computeOccupancy), profiles smoothed using window given size. default value set 250 base pairs. chipSmooth set 0 profile smoothed. strongly encourage set values building parameterOptions object.","code":""},{"path":"/reference/chipSmooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor methods for chipSmooth slot in a\nparameterOptions object. — chipSmooth","text":"Returns chipSmooth slot parameterOptions object.","code":""},{"path":"/reference/chipSmooth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor methods for chipSmooth slot in a\nparameterOptions object. — chipSmooth","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/chipSmooth.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor methods for chipSmooth slot in a\nparameterOptions object. — chipSmooth","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/chipSmooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor methods for chipSmooth slot in a\nparameterOptions object. — chipSmooth","text":"","code":"# Building parameterOptions object OPP <- parameterOptions() # Accessing chipSd slot chipSmooth(OPP) #> [1] 250"},{"path":"/reference/chipSmooth_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function chipSmooth<-  ~~ — chipSmooth<--methods","title":"~~ Methods for Function chipSmooth<-  ~~ — chipSmooth<--methods","text":"~~ Methods function chipSmooth<-  ~~","code":""},{"path":"/reference/chipSmooth_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function chipSmooth<-  ~~ — chipSmooth<--methods","text":"signature(object = \"parameterOptions\", value = \"vector\")","code":""},{"path":"/reference/chipSmooth_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter method for chipSmooth slot in\nparameterOptions object. — chipSmooth<-","title":"Setter method for chipSmooth slot in\nparameterOptions object. — chipSmooth<-","text":"Setter method chipSmooth slot parameterOptions object.","code":""},{"path":"/reference/chipSmooth_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter method for chipSmooth slot in\nparameterOptions object. — chipSmooth<-","text":"","code":"chipSmooth(object) <- value"},{"path":"/reference/chipSmooth_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter method for chipSmooth slot in\nparameterOptions object. — chipSmooth<-","text":"object object parameterOptions object. value value positive numeric value assigned     chipSmooth slot parameterOptions     Default value 250 base pairs.","code":""},{"path":"/reference/chipSmooth_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter method for chipSmooth slot in\nparameterOptions object. — chipSmooth<-","text":"computing ChIP-seq like (computeChIPProfile) profile occupancy data (see computeOccupancy), profiles smoothed using window given size. default value set 250 base pairs.chipSmooth set 0 profile smoothed. strongly encourage set values building parameterOptions object.","code":""},{"path":"/reference/chipSmooth_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter method for chipSmooth slot in\nparameterOptions object. — chipSmooth<-","text":"Returns parameterOptions object updated value chipSmooth slot.","code":""},{"path":"/reference/chipSmooth_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter method for chipSmooth slot in\nparameterOptions object. — chipSmooth<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/chipSmooth_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter method for chipSmooth slot in\nparameterOptions object. — chipSmooth<-","text":"Patrick C.N Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/chipSmooth_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter method for chipSmooth slot in\nparameterOptions object. — chipSmooth<-","text":"","code":"# Building parameterOptions object OPP <- parameterOptions() # Setting new value for chipSd slot chipSmooth(OPP) <-  250"},{"path":"/reference/computeChIPProfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Computing ChIP-seq like profiles from Occupancy data. — computeChIPProfile","title":"Computing ChIP-seq like profiles from Occupancy data. — computeChIPProfile","text":"computeChIPProfile compute ChIP-seq like profile occupancy data. Occupancy data computed using computeOccupancy.","code":""},{"path":"/reference/computeChIPProfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computing ChIP-seq like profiles from Occupancy data. — computeChIPProfile","text":"","code":"computeChIPProfile(genomicProfiles, loci, parameterOptions = NULL,     norm = TRUE, method = c(\"moving_kernel\",\"truncated_kernel\",\"exact\"),     peakSignificantThreshold= NULL,cores=1, verbose = TRUE)"},{"path":"/reference/computeChIPProfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computing ChIP-seq like profiles from Occupancy data. — computeChIPProfile","text":"genomicProfiles genomicProfiles result computeOccupancy.     object genomicProfiles object. loci loci either GRanges ChIPScore     object. ChIPScore-class result processingChIP.     object represents set Loci interested analysing.     followed full ChIPanalyser pipe line, used     processingChIP function return ChIPScore-class object containing     loci interest. GRanges also supported using     part pipeline. parameterOptions parameterOptions parameterOptions object.     object used store numerous paramters offered ChIPanalyser.     argument optional arguments also parse ChIPScore-class     genomicProfiles objects. wanted make last minute changes,     parameterOptions way go. recomend set     desired options hand. norm norm logical value. TRUE, ChIP-seq like profile     normalised towards maximum Occupancy.     FALSE, profile left . method method character string  one following:     c(\"moving_kernel\",\"truncated_kernel\",\"exact\"). set moving_kernel,     peaks approximated using Rcpp (Default).     set truncated_kernel, peaks approximated     however method require Rcpp. set exact, peaks     approximated.  peakSignificantThreshold peakSignificantThreshold threshold peaks     selected. IMPORTANT: select \"moving_kernel\" described     method threshold numeric value describing     peak tail hight cutoff value (Default = 0.001).     case \"truncated_kernel\" \"exact\", threhsold represents     distance base pair peak summit peak     cut (Default = 1250). default set NULL     function. just means either value provided bu user     appropriate method. , default selected depending     method selected. cores cores number cores used compute     ChIP profiles. verbose verbose logical value. TRUE, progress messages     displayed console.     FALSE, progress messages dispalyed console.","code":""},{"path":"/reference/computeChIPProfile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computing ChIP-seq like profiles from Occupancy data. — computeChIPProfile","text":"computeChIPProfile converts Transcription Factor occuapncy profile resembling one ChIP-seq profile. Internally paramters required build ChIP like profile. parameters either defined stored ChIPScore object (Paramters updated based ChIP data ), genomicProfiles (user defined start analysis) parameterOptions (want update values go along)","code":""},{"path":"/reference/computeChIPProfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computing ChIP-seq like profiles from Occupancy data. — computeChIPProfile","text":"Returns genomicProfiles objec containing ChIP-seq like profile every combination lambdaPWM boundMolecules provided user.","code":""},{"path":"/reference/computeChIPProfile.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Computing ChIP-seq like profiles from Occupancy data. — computeChIPProfile","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/computeChIPProfile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computing ChIP-seq like profiles from Occupancy data. — computeChIPProfile","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/computeChIPProfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computing ChIP-seq like profiles from Occupancy data. — computeChIPProfile","text":"","code":"#Extracting Data data(ChIPanalyserData) # path to Position Frequency Matrix PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #As an example of genome, this example will run on the Drosophila genome # \\donttest{ if(!require(\"BSgenome.Dmelanogaster.UCSC.dm6\", character.only = TRUE)){     if (!requireNamespace(\"BiocManager\", quietly=TRUE))         install.packages(\"BiocManager\")     BiocManager::install(\"BSgenome.Dmelanogaster.UCSC.dm6\")     } library(BSgenome.Dmelanogaster.UCSC.dm6) DNASequenceSet <- getSeq(BSgenome.Dmelanogaster.UCSC.dm6) # Building genomicProfiles object GPP <- genomicProfiles(PFM=PFM, PFMFormat=\"JASPAR\",BPFrequency=DNASequenceSet)   # Computing Genome Wide GenomeWide <- computeGenomeWideScores(genomicProfiles = GPP,     DNASequenceSet = DNASequenceSet) #> Extracting genome wide scores  #> Whole Genome ~ Both strands  #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Computing Mean waiting time   #Compute PWM Scores PWMScores <- computePWMScore(genomicProfiles = GenomeWide,      DNASequenceSet = DNASequenceSet, loci = top, chromatinState = Access) #> PWM Scores Extraction #Compute Occupnacy Occupancy <- computeOccupancy(genomicProfiles = PWMScores) #> Computing Occupancy at sites higher than threshold.   #Compute ChIP profiles chipProfile <- computeChIPProfile(genomicProfiles=Occupancy,loci=top) #> Computing ChIP Profile  chipProfile #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>   #>                         genomicProfiles object: ChIP like Profiles  #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>   #>  Parameter combination:  lambda = 1 & boundMolecules = 1000  #>   #> $`lambda = 1 & boundMolecules = 1000` #> GRangesList object of length 4: #> $`chr3L:20300001..20320000` #> GRanges object with 2000 ranges and 1 metadata column: #>                            seqnames            ranges strand |        ChIP #>                               <Rle>         <IRanges>  <Rle> |   <numeric> #>   chr3L:20300001..20320000    chr3L 20300001-20300010      * | 1.57008e-05 #>   chr3L:20300001..20320000    chr3L 20300011-20300020      * | 1.65058e-05 #>   chr3L:20300001..20320000    chr3L 20300021-20300030      * | 1.73521e-05 #>   chr3L:20300001..20320000    chr3L 20300031-20300040      * | 1.68246e-05 #>   chr3L:20300001..20320000    chr3L 20300041-20300050      * | 1.61817e-05 #>                        ...      ...               ...    ... .         ... #>   chr3L:20300001..20320000    chr3L 20319951-20319960      * | 2.50940e-10 #>   chr3L:20300001..20320000    chr3L 20319961-20319970      * | 2.38702e-10 #>   chr3L:20300001..20320000    chr3L 20319971-20319980      * | 2.27060e-10 #>   chr3L:20300001..20320000    chr3L 20319981-20319990      * | 2.15986e-10 #>   chr3L:20300001..20320000    chr3L 20319991-20320000      * | 2.05453e-10 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths #>  #> ... #> <3 more elements> #>  #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>   #>                         Associated parameter Options  #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>   #>  lambdaPWM:                                                 1 #>  boundMolecules:                                         1000 #>  stepSize:                                                 10 #>  backgroundSignal:                                          0 #>  maxSignal:                                                 1 #>  removeBackground:                                          0 #>  chipMean:                                                200 #>  chipSd:                                                  200 #>  chipSmooth:                                              250 # }"},{"path":"/reference/computeGenomeWideScores.html","id":null,"dir":"Reference","previous_headings":"","what":"Computing Genome Wide scores — computeGenomeWideScores","title":"Computing Genome Wide scores — computeGenomeWideScores","text":"computeGenomeWideScores compute max min PWM score entire genome.","code":""},{"path":"/reference/computeGenomeWideScores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computing Genome Wide scores — computeGenomeWideScores","text":"","code":"computeGenomeWideScores(genomicProfiles, DNASequenceSet, chromatinState = NULL, parameterOptions = NULL, cores = 1, verbose = TRUE)"},{"path":"/reference/computeGenomeWideScores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computing Genome Wide scores — computeGenomeWideScores","text":"genomicProfiles genomicProfiles genomicProfiles object containing PFM, PWM interest. DNASequenceSet DNASequenceSet BSgenome DNAStringSet containing sequence organism interest. chromatinState chromatinState GRanges object containing chromatin States. can either represent regions accessible DNA Chromatin state affinities. parameterOptions parameterOptions parameterOptions object containing parameters wish change. genomicProfiles object updated using values assigned parameterOptions cores cores number cores used (Numeric value - Default = 1 ) verbose verbose logical value determine internal progress message printed.","code":""},{"path":"/reference/computeGenomeWideScores.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computing Genome Wide scores — computeGenomeWideScores","text":"computeGenomeWideScores function computes PWM scores entire genome (accessible Genome chromatin State provided ). Genome wide scores used determine maximum minimum PWM score well average exponential score. scores turn used determine score PWM theshold. average exponential score integrale part equation used compute Occupancy. Using defualt settings, ChIPanalyser compute occupancy top 70% PWM scores. threshold can changed. See PWMThreshold","code":""},{"path":"/reference/computeGenomeWideScores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computing Genome Wide scores — computeGenomeWideScores","text":"Returns genomicsProfiles object updated values max score, min score averageExpPWMScore.","code":""},{"path":"/reference/computeGenomeWideScores.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Computing Genome Wide scores — computeGenomeWideScores","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/computeGenomeWideScores.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computing Genome Wide scores — computeGenomeWideScores","text":"Patrick C.N Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/computeGenomeWideScores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computing Genome Wide scores — computeGenomeWideScores","text":"","code":"# \\donttest{   if(!require(\"BSgenome.Dmelanogaster.UCSC.dm6\", character.only = TRUE)){       if (!requireNamespace(\"BiocManager\", quietly=TRUE))           install.packages(\"BiocManager\")       BiocManager::install(\"BSgenome.Dmelanogaster.UCSC.dm6\")       }   library(BSgenome.Dmelanogaster.UCSC.dm6)   DNASequenceSet <- getSeq(BSgenome.Dmelanogaster.UCSC.dm6)   # Building genomicProfiles object   GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\", BPFrequency=DNASequenceSet) #> Error in genomicProfiles(PFM = PFM, PFMFormat = \"JASPAR\", BPFrequency = DNASequenceSet): object 'PFM' not found     # Computing Genome Wide   GenomeWide <- computeGenomeWideScores(genomicProfiles = GPP,       DNASequenceSet = DNASequenceSet) #> Error in .is.genomicProfiles(genomicProfiles): object 'GPP' not found   # }"},{"path":"/reference/computeOccupancy.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Occupancy values from PWM Scores based on model. — computeOccupancy","title":"Compute Occupancy values from PWM Scores based on model. — computeOccupancy","text":"computeOccupancy compute Occupancy PWM Scores. described detail vignette, ChIPanalyser uses PWM Scores, DNA Accessibility data, number bound molecules sclaing factor Transcription Factor specificty. function compute occupancy using values assigned variable.","code":""},{"path":"/reference/computeOccupancy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Occupancy values from PWM Scores based on model. — computeOccupancy","text":"","code":"computeOccupancy(genomicProfiles,parameterOptions = NULL,     norm = TRUE, verbose = TRUE)"},{"path":"/reference/computeOccupancy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Occupancy values from PWM Scores based on model. — computeOccupancy","text":"genomicProfiles genomicProfiles genomicProfiles     object resulting computePWMScore.     important use resulting object occuapancy     computed sites threshold. parameterOptions parameterOptions     parameterOptions object containing adequate     values assigned Parameter. Supplied     (parameterOptions = NULL), new object created     internally using default values. norm norm logical value determines     occupancy normalised . verbose verbose logical value determines     progress messages printed .","code":""},{"path":"/reference/computeOccupancy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Occupancy values from PWM Scores based on model. — computeOccupancy","text":"computeOccupancy compute Occupancy PWM Scores. described detail vignette, ChIPanalyser uses PWM Scores, DNA Accessibility data, number bound molecules sclaing factor Transcription Factor specificty. function compute occupancy using values assigned variable. also noted parameterOptions object contains set parameters used compute Occupancy (restricted ). parameters often dependant real ChIP-Seq data influence goodness fit predicted model real ChIP-seq data. strongly advise values assigned parameter customiszed order increase model ageement real world biological data.","code":""},{"path":"/reference/computeOccupancy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Occupancy values from PWM Scores based on model. — computeOccupancy","text":"computeOccupancy return genomicProfiles. main difference reside profiles slot. slot generally list GRangesList. Within list type structures enclosed GRanges containing positions site threshold, PWMScores Occupancy site. series GRanges  depend number loci tested number element list depend various combinations lambdaPWM boundMolecules.","code":""},{"path":"/reference/computeOccupancy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Occupancy values from PWM Scores based on model. — computeOccupancy","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/computeOccupancy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Occupancy values from PWM Scores based on model. — computeOccupancy","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/computeOccupancy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Occupancy values from PWM Scores based on model. — computeOccupancy","text":"","code":"#Data extraction data(ChIPanalyserData) # path to Position Frequency Matrix PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #As an example of genome, this example will run on the Drosophila genome # \\donttest{ if(!require(\"BSgenome.Dmelanogaster.UCSC.dm6\", character.only = TRUE)){     if (!requireNamespace(\"BiocManager\", quietly=TRUE))         install.packages(\"BiocManager\")     BiocManager::install(\"BSgenome.Dmelanogaster.UCSC.dm6\")     } library(BSgenome.Dmelanogaster.UCSC.dm6) DNASequenceSet <- getSeq(BSgenome.Dmelanogaster.UCSC.dm6)  #Building data objects GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\",BPFrequency=DNASequenceSet) OPP <- parameterOptions() # Computing Genome Wide GenomeWide <- computeGenomeWideScores(genomicProfiles = GPP,     DNASequenceSet = DNASequenceSet) #> Extracting genome wide scores  #> Whole Genome ~ Both strands  #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Computing Mean waiting time   #Compute PWM Scores PWMScores <- computePWMScore(genomicProfiles = GenomeWide,     DNASequenceSet = DNASequenceSet,     loci = top,     chromatinState = Access) #> PWM Scores Extraction #Compute Occupnacy Occupancy <- computeOccupancy(genomicProfiles = PWMScores,     parameterOptions = OPP) #> Computing Occupancy at sites higher than threshold.  Occupancy #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>   #>                         genomicProfiles object: Occupancy at sites above Threshold  #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>   #>  Parameter combination:  lambda = 1 & boundMolecules = 1000  #>   #> $`lambda = 1 & boundMolecules = 1000` #> GRangesList object of length 4: #> $`chr3L:20300001..20320000` #> GRanges object with 162 ranges and 3 metadata columns: #>                            seqnames            ranges strand |  PWMScore #>                               <Rle>         <IRanges>  <Rle> | <numeric> #>   chr3L:20300001..20320000    chr3L 20300005-20300019      - | -0.260743 #>   chr3L:20300001..20320000    chr3L 20300015-20300029      + | -3.581791 #>   chr3L:20300001..20320000    chr3L 20300022-20300036      - |  2.266402 #>   chr3L:20300001..20320000    chr3L 20300066-20300080      + | -7.941449 #>   chr3L:20300001..20320000    chr3L 20300293-20300307      + | -6.443234 #>                        ...      ...               ...    ... .       ... #>   chr3L:20300001..20320000    chr3L 20318562-20318576      - |  -3.48805 #>   chr3L:20300001..20320000    chr3L 20318607-20318621      - |  -9.10951 #>   chr3L:20300001..20320000    chr3L 20318620-20318634      + |  -3.39948 #>   chr3L:20300001..20320000    chr3L 20318724-20318738      + |  -7.80125 #>   chr3L:20300001..20320000    chr3L 20318728-20318742      + |  -6.63695 #>                            DNAaffinity   Occupancy #>                              <numeric>   <numeric> #>   chr3L:20300001..20320000           1 1.05032e-06 #>   chr3L:20300001..20320000           1 3.79323e-08 #>   chr3L:20300001..20320000           1 1.31475e-05 #>   chr3L:20300001..20320000           1 4.84880e-10 #>   chr3L:20300001..20320000           1 2.16921e-09 #>                        ...         ...         ... #>   chr3L:20300001..20320000           1 4.16600e-08 #>   chr3L:20300001..20320000           1 1.50782e-10 #>   chr3L:20300001..20320000           1 4.55182e-08 #>   chr3L:20300001..20320000           1 5.57854e-10 #>   chr3L:20300001..20320000           1 1.78720e-09 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths #>  #> ... #> <3 more elements> #>  #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>   #>                         Associated parameters  #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>   #>  lambdaPWM:                                                 1 #>  boundMolecules:                                         1000  # }"},{"path":"/reference/computeOptimal.html","id":null,"dir":"Reference","previous_headings":"","what":"compute Optimal Parameters — computeOptimal","title":"compute Optimal Parameters — computeOptimal","text":"ChIPanalyser contains set functions require two parameters known lambdaPWM boundMolecules. two paramters always known. computeOptimal compute values maximising correlation minimising Mean Squared Error predicted ChIP-seq-like profile real ChIP-seq profile given loci.","code":""},{"path":"/reference/computeOptimal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compute Optimal Parameters — computeOptimal","text":"","code":"computeOptimal(genomicProfiles,DNASequenceSet, ChIPScore,chromatinState = NULL,     parameterOptions = NULL, optimalMethod = \"all\",rank=FALSE,returnAll=TRUE,     peakMethod=\"moving_kernel\",cores=1)"},{"path":"/reference/computeOptimal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compute Optimal Parameters — computeOptimal","text":"genomicProfiles genomicProfiles genomicProfiles      object containing least Postion Frequency Matrix      Position Weight Matrix. strongly advised customize object      increase goodness fit model compared real ChIP-seq data. DNASequenceSet DNASequenceSet DNAStringSet     BSgenome full sequence organism interest. ChIPScore ChIPScore named list containing ChIP-seq enrichements     Loci interest. Profile normalised base     pair level. words, enrichement score     base pair given Locus. chromatinState chromatinState GRanges object     containing either accesible sites DNA affinity scores. parameterOptions parameterOptions     parameterOptions object.     object provided (parameterOptions = NULL),     new object created internally.     However, strongly advised tailor object maximise     goodness fit model compared ChIP-seq data. optimalMethod optimalMethod character string determines     method optimal parameter selection selected. optimalMethod     can one following:     pearson, spearman, kendall, ks, fscore, geometric,MSE, . Default set     . rank rank logical value indicating optimal parameters     based rank (parameter combination occuring regions)     avaerage score (best perfomring combination paramters average     regions selected). DEFAULT = FALSE returnAll returnAll logical value indicating internal objects     returned. DEFAULT = TRUE. Internal objects following:     Occupancy Scores, ChIP like profiles, goodness fit metrics optimal     paramters. set FALSE, computeOptimal return optimal     parameters. peakMethod peakMethod character string  one following:     c(\"moving_kernel\",\"truncated_kernel\",\"exact\"). set moving_kernel,     peaks approximated using Rcpp (Default).     set truncated_kernel, peaks approximated     however method require Rcpp. set exact, peaks     approximated.  cores cores number cores used compute optimal     set parameters.","code":""},{"path":"/reference/computeOptimal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"compute Optimal Parameters — computeOptimal","text":"order backward infer values lambdaPWM boundMolecules, possible use computeOptimal find parameters. noted functions requires ChIP-seq data input. ChIPScore (ChIP-seq data). output processingChIP function.","code":""},{"path":"/reference/computeOptimal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compute Optimal Parameters — computeOptimal","text":"computeOptimal returns list respectivly described optimal set Parameters (lambda - lambdaPWM boundMolecules), optimal matrix (matrix containing accuracy estimates dependant parameter chosen), finally chosen parameter. parameter chosen \"\", element list contain optimal set parameters, optimal matricies aforementioned paramters (see optimalMethod).","code":""},{"path":"/reference/computeOptimal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"compute Optimal Parameters — computeOptimal","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/computeOptimal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"compute Optimal Parameters — computeOptimal","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/computeOptimal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"compute Optimal Parameters — computeOptimal","text":"","code":"#Data extraction data(ChIPanalyserData) # path to Position Frequency Matrix PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #As an example of genome, this example will run on the Drosophila genome # \\donttest{ if(!require(\"BSgenome.Dmelanogaster.UCSC.dm6\", character.only = TRUE)){     if (!requireNamespace(\"BiocManager\", quietly=TRUE))         install.packages(\"BiocManager\")     BiocManager::install(\"BSgenome.Dmelanogaster.UCSC.dm6\")     } library(BSgenome.Dmelanogaster.UCSC.dm6) DNASequenceSet <- getSeq(BSgenome.Dmelanogaster.UCSC.dm6) chip<-processingChIP(chip,top) #Building data objects GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\",BPFrequency=DNASequenceSet) OPP <- parameterOptions() #Computing Optimal set of Parameters optimalParam <- computeOptimal(genomicProfiles = GPP,     DNASequenceSet = DNASequenceSet,     ChIPScore = chip,     chromatinState = Access,     parameterOptions = OPP,     parameter = \"all\",     peakMethod=\"moving_kernel\") #> Error in computeOptimal(genomicProfiles = GPP, DNASequenceSet = DNASequenceSet,     ChIPScore = chip, chromatinState = Access, parameterOptions = OPP,     parameter = \"all\", peakMethod = \"moving_kernel\"): unused argument (parameter = \"all\") # }"},{"path":"/reference/computePWMScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute PWM Scores of sites above threshold. — computePWMScore","title":"Compute PWM Scores of sites above threshold. — computePWMScore","text":"computePWMScore compute extract sites exhibit PWM Score higher threshold. threshold (see PWMThreshold) determine percentage total sites considered.","code":""},{"path":"/reference/computePWMScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute PWM Scores of sites above threshold. — computePWMScore","text":"","code":"computePWMScore(genomicProfiles,DNASequenceSet,     loci = NULL, chromatinState = NULL,parameterOptions=NULL,cores=1, verbose = TRUE)"},{"path":"/reference/computePWMScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute PWM Scores of sites above threshold. — computePWMScore","text":"DNASequenceSet DNASequenceSet DNAStringSet     BSgenome containing full sequence organism interest. genomicProfiles genomicProfiles genomicProfiles     object resulting computeGenomeWideScores function. loci loci GRanges     object containing Loci interest ChIPScore object     result processingChIP function. parameterOptions parameterOptions parameterOptions     object containing parameters wish parse/change computing     PWMScores. chromatinState chromatinState GRanges     object sites accessible DNA DNA affinity scores. cores cores number cores used compute PWM Scores. verbose verbose logical value indicating progress messages     printed .","code":""},{"path":"/reference/computePWMScore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute PWM Scores of sites above threshold. — computePWMScore","text":"determining genome wide scores, possible compute extract high affinity sites (sense high PWM Score). PWMThreshold set user, default value set 0.7. means 70 % sites selected. top 30 % computed extracted. one interested PWM Scores genome wide scale ( accessible DNA ), possible setting PWMThreshold zero.","code":""},{"path":"/reference/computePWMScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute PWM Scores of sites above threshold. — computePWMScore","text":"computePWMScore return genomicProfiles object. profiles slot updated. slot now contain GRangesList element GRanges. GRanges contain postion sites (start, end strand) PWMScore associated site.","code":""},{"path":"/reference/computePWMScore.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute PWM Scores of sites above threshold. — computePWMScore","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/computePWMScore.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute PWM Scores of sites above threshold. — computePWMScore","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/computePWMScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute PWM Scores of sites above threshold. — computePWMScore","text":"","code":"#Data extraction data(ChIPanalyserData) # path to Position Frequency Matrix PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #As an example of genome, this example will run on the Drosophila genome # \\donttest{ if(!require(\"BSgenome.Dmelanogaster.UCSC.dm6\", character.only = TRUE)){     if (!requireNamespace(\"BiocManager\", quietly=TRUE))         install.packages(\"BiocManager\")     BiocManager::install(\"BSgenome.Dmelanogaster.UCSC.dm6\")     } library(BSgenome.Dmelanogaster.UCSC.dm6) DNASequenceSet <- getSeq(BSgenome.Dmelanogaster.UCSC.dm6) chip<-processingChIP(chip,top) #Building data objects GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\",BPFrequency=DNASequenceSet)   # Computing Genome Wide GenomeWide <- computeGenomeWideScores(DNASequenceSet = DNASequenceSet,     genomicProfiles = GPP) #> Extracting genome wide scores  #> Whole Genome ~ Both strands  #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Computing Mean waiting time   #Compute PWM Scores PWMScores <- computePWMScore(DNASequenceSet = DNASequenceSet,     genomicProfiles = GenomeWide,     loci  = chip, chromatinState = Access) #> PWM Scores Extraction PWMScores #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>   #>                         genomicProfiles object: PWM scores above Threshold  #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>   #>  Scores above Threshold in locus:   #> GRanges object with 162 ranges and 2 metadata columns: #>                            seqnames            ranges strand |  PWMScore #>                               <Rle>         <IRanges>  <Rle> | <numeric> #>   chr3L:20300001..20320000    chr3L 20300005-20300019      - | -0.260743 #>   chr3L:20300001..20320000    chr3L 20300015-20300029      + | -3.581791 #>   chr3L:20300001..20320000    chr3L 20300022-20300036      - |  2.266402 #>   chr3L:20300001..20320000    chr3L 20300066-20300080      + | -7.941449 #>   chr3L:20300001..20320000    chr3L 20300293-20300307      + | -6.443234 #>                        ...      ...               ...    ... .       ... #>   chr3L:20300001..20320000    chr3L 20318562-20318576      - |  -3.48805 #>   chr3L:20300001..20320000    chr3L 20318607-20318621      - |  -9.10951 #>   chr3L:20300001..20320000    chr3L 20318620-20318634      + |  -3.39948 #>   chr3L:20300001..20320000    chr3L 20318724-20318738      + |  -7.80125 #>   chr3L:20300001..20320000    chr3L 20318728-20318742      + |  -6.63695 #>                            DNAaffinity #>                              <numeric> #>   chr3L:20300001..20320000           1 #>   chr3L:20300001..20320000           1 #>   chr3L:20300001..20320000           1 #>   chr3L:20300001..20320000           1 #>   chr3L:20300001..20320000           1 #>                        ...         ... #>   chr3L:20300001..20320000           1 #>   chr3L:20300001..20320000           1 #>   chr3L:20300001..20320000           1 #>   chr3L:20300001..20320000           1 #>   chr3L:20300001..20320000           1 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #>  3  remaining loci  #>  Locus:                chr2L:6480001..6500000 (length = 142) #>  Locus:                chr3R:16140001..16160000 (length = 116) #>  Locus:                chr2L:19500001..19520000 (length = 78) #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>   #>                         Associated parameters  #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>   #>  minPWMScore:                               -62.9823294882894 #>  maxPWMScore:                                12.9532005236194 #>  lambdaPWM:                                                 1 #>  PWMThreshold:                                            0.7 # }"},{"path":"/reference/data.html","id":null,"dir":"Reference","previous_headings":"","what":"ChIPanalyserData — ChIPanalyserData","title":"ChIPanalyserData — ChIPanalyserData","text":"ChIPanalyserData derived real biological data. source organism Drosophila melanogaster. data can described genomic data contains DNA sequences, loci, genetic information, DNA accessibility data ChIP-seq data.","code":""},{"path":"/reference/data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ChIPanalyserData — ChIPanalyserData","text":"","code":"data(ChIPanalyserData)"},{"path":"/reference/data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ChIPanalyserData — ChIPanalyserData","text":"Accessis GRanges     containing DNA Accesibility data sequences described . csis GRanges     containing Chromatin State data sequences described . topis GRanges     containing locus interest.     case eve strip Locus     chromosome 2R Drosophila melanogaster chipis GRanges containing ChIP score eve     strip locus Drosophila melanogaster. geneRefis GRanges     containing UCSC gene reference information","code":""},{"path":"/reference/data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ChIPanalyserData — ChIPanalyserData","text":"Returns set Rdata objects described .","code":""},{"path":"/reference/data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ChIPanalyserData — ChIPanalyserData","text":"Transcription Factor PFM: Berkeley Drosophila Transcription Network Project (bdtnp.lbl.gov)","code":""},{"path":"/reference/data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ChIPanalyserData — ChIPanalyserData","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ChIPanalyserData — ChIPanalyserData","text":"","code":"data(ChIPanalyserData)"},{"path":"/reference/drop-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function drop  ~~ — drop-methods","title":"~~ Methods for Function drop  ~~ — drop-methods","text":"~~ Methods function drop  ~~","code":""},{"path":"/reference/drop-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function drop  ~~ — drop-methods","text":"signature(object = \"genomicProfilesInternal\")","code":""},{"path":"/reference/drop.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor Method for the drop slot in a\ngenomicProfiles object. — drop","title":"Accessor Method for the drop slot in a\ngenomicProfiles object. — drop","text":"Accessor Method drop slot genomicProfiles object.","code":""},{"path":"/reference/drop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor Method for the drop slot in a\ngenomicProfiles object. — drop","text":"","code":"drop(object)"},{"path":"/reference/drop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor Method for the drop slot in a\ngenomicProfiles object. — drop","text":"object object genomicProfiles object.","code":""},{"path":"/reference/drop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor Method for the drop slot in a\ngenomicProfiles object. — drop","text":"certain computations, possible Loci interest show overlap accesible DNA. case, warning message appear console inaccessible Loci stored slot. also reasons imperative Loci interest named (case, named GRanges).","code":""},{"path":"/reference/drop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor Method for the drop slot in a\ngenomicProfiles object. — drop","text":"Returns character string loci containing accesible DNA.","code":""},{"path":"/reference/drop.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor Method for the drop slot in a\ngenomicProfiles object. — drop","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/drop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor Method for the drop slot in a\ngenomicProfiles object. — drop","text":"Patrick C.N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/drop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor Method for the drop slot in a\ngenomicProfiles object. — drop","text":"","code":"# Loading data data(ChIPanalyserData) #Loading PFM files PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #Building data objects GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\")  # Loci with no acces - a warning message will be issued #if loci do no contain accesible DNA # Otherwise this slot will remain empty  drop(GPP) #> logical(0)"},{"path":"/reference/evolve.html","id":null,"dir":"Reference","previous_headings":"","what":"Running the ChIPanalyser implementation of a Genetic algorithm. — evolve","title":"Running the ChIPanalyser implementation of a Genetic algorithm. — evolve","text":"evolve pushes starting population evolve genetic algorithm.","code":""},{"path":"/reference/evolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Running the ChIPanalyser implementation of a Genetic algorithm. — evolve","text":"","code":"evolve(population,DNASequenceSet,ChIPScore,        genomicProfiles,parameters=NULL,generations=100,mutationProbability=0.3,        offsprings=5,chromatinState=NULL,        method=\"geometric\", lambda=TRUE,        checkpoint=TRUE,        filename=NULL, cores=1)"},{"path":"/reference/evolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Running the ChIPanalyser implementation of a Genetic algorithm. — evolve","text":"population numeric value describing number individuals starting population.     Alternatively - starting population list returned generateStartingPopulation.     NOTE: numeric - parameter argument also required. DNASequenceSet DNAStringSet object containing DNA sequences interest (Extracted BSgenome) ChIPScore ChIPScore object  returned processingChIPfunction genomicProfiles genomicProfiles object containing minimal information (PWM) parameters vector list containing parameter added chromosome.     See generateStartingPopulation generations numeric describing number generation Genetic algorithm     halt. mutationProbability numeric descrbining rate mutations surviving individual offsprings numeric descrbining number individuals surviving next generation chromatinState GRanges object containing chromatin state information. state     labled meta data column named \"name\". advised use numeric values     state name. method character string describing scoring metric used.     ChIPanalyser offers twelve different metrics: correlation coefficients      (Pearson, Spearman Kendall), Mean Squared Error (MSE),      Kolmogorov–Smirnov Distance, precision, recall, accuracy, F-score,      Matthew’s correlation coefficient (MCC)      Area Curve Receiver Operator Characteristic (AUC ROC just AUC) lambda logical describing lambda value pre-computed. Setting TRUE     increases speed algorithm. checkpoint logical describing intermediate files saved. Intermediate files     contain optimsed values individuals current past generations,     well current population. Saved .Rda filename character string serve prefix saved intermediate files. cores numeric describing number cores used run GA.","code":""},{"path":"/reference/evolve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Running the ChIPanalyser implementation of a Genetic algorithm. — evolve","text":"ChIPanalyser offers way finding optimal solution using genetic algorithm. Instead running stadard analysis, TF binding affinities chromatin states can extracted via complex method. noted method better suited analysis chromatin states. algorithm still works simple DNA Accessibility (long fits specified formatting), potentially take time accuracy minor gains. three intermediate files saved (requested) analysis. _OptimalOutputTraining_Generation_ saves last population         chromosome values _DatabaseTraining_Generation_ saves data frame containing         scores individual since generation 1 _MrOlympiaTraining_Generation_saves fittest individual          given generation files overwritten keep recent generation.","code":""},{"path":"/reference/evolve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Running the ChIPanalyser implementation of a Genetic algorithm. — evolve","text":"Returns named list three elements.  database saves data frame containing   scores individual since generation 1 population saves last population   chromosome values Olympiasaves fittest individual    given generation","code":""},{"path":"/reference/evolve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Running the ChIPanalyser implementation of a Genetic algorithm. — evolve","text":"Patrick C.N. Martin <pcnmartin@gmail.com","code":""},{"path":"/reference/evolve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Running the ChIPanalyser implementation of a Genetic algorithm. — evolve","text":"","code":"library(ChIPanalyser) data(ChIPanalyserData) # See GA vignette for usage"},{"path":"/reference/generateStartingPopulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Starting population for ChIPanalyser Genetic algortihm — generateStartingPopulation","title":"Generate Starting population for ChIPanalyser Genetic algortihm — generateStartingPopulation","text":"generateStartingPopulation generates starting population random traits individual","code":""},{"path":"/reference/generateStartingPopulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Starting population for ChIPanalyser Genetic algortihm — generateStartingPopulation","text":"","code":"generateStartingPopulation(population,parameters,names=NULL)"},{"path":"/reference/generateStartingPopulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Starting population for ChIPanalyser Genetic algortihm — generateStartingPopulation","text":"population numeric value describing number individuals starting population. parameters vector list containing parameter added chromosome. names character describing names added individual.","code":""},{"path":"/reference/generateStartingPopulation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Starting population for ChIPanalyser Genetic algortihm — generateStartingPopulation","text":"generateStartingPopulation generates starting poppulation used genetic algortihm implemented ChIPanalyser. two main ways starting population can generated: name           Using names parameter parse \"chromosome\".           possible paramters N, lambda, PWMThreshold, CS           ( DNAAffinity DNAAccessibility also works). CS values also contain           numeric value associated chromatin state wish parse.           e.g CS1 ... CS14           generate value sampling set predefined value           paramters. value range           Using named list (names parameters). element list           contain three numeric values : length range, min value, max value.           (Internally - values parse runif)","code":""},{"path":"/reference/generateStartingPopulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Starting population for ChIPanalyser Genetic algortihm — generateStartingPopulation","text":"Returns list individuals random traits","code":""},{"path":"/reference/generateStartingPopulation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Starting population for ChIPanalyser Genetic algortihm — generateStartingPopulation","text":"Patrick C.N. Martin","code":""},{"path":"/reference/generateStartingPopulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Starting population for ChIPanalyser Genetic algortihm — generateStartingPopulation","text":"","code":"## by name param <- c(\"N\",\"lambda\",\"PWMThreshold\",\"CS1\",\"CS2\",\"CS3\")  pop <- generateStartingPopulation(20,param, names = NULL)  # by range  paramValue <- list(c(10,1,1000),c(10,0,5),c(10,0,0.9),c(10,0,1),c(10,0,1),c(10,0,1))  pop <- generateStartingPopulation(20,paramValue,names= param)"},{"path":"/reference/genomicProfiles-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"genomicProfiles S4 object serving two purposes: () storing internal computed data (ii) storing paramter options. object parsed different steps pipeline facilitate parsing changing paramters.","code":""},{"path":"/reference/genomicProfiles-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form genomicProfiles(ploidy, boundMolecules, backgroundSignal, maxSignal, lociWidth, chipMean, chipSd, chipSmooth, stepSize, noiseFilter, removeBackground, lambdaPWM, PWMpseudocount, naturalLog, noOfSites, PWMThreshold, strandRule, whichstrand, PFM, PWM, PFMFormat, BPFrequency, minPWMScore, maxPWMScore, profiles, DNASequenceLength, averageExpPWMScore).","code":""},{"path":"/reference/genomicProfiles-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"PWM: Object class \"matrix\":   Position Weight Matrix (either supplied internally computed   PFM provided) PFM: Object class \"matrix\":   Position Frequency Matrix (may also path file containing PFM) PFMFormat: Object class \"character\":   character string one following: raw, transfac,JASPAR   sequences BPFrequency: Object class \"vector\":   Base Pair Frequency genome (DNA sequence provided   (DNAStringSet BSgenome),   automatically computed internally). Default:c(0.25,0.25,0.25,0.25) minPWMScore: Object class \"vector\":   Lowest PWM score accros genome (computed updated internally) maxPWMScore: Object class \"vector\":   Highest PWM score across genome (computed updated internally) profiles: Object class \"GRList\":     Containins GRanges sites threshold associated metrics     (PWMscore Occupancy) - Computed Internally DNASequenceLength: Object class \"vector\":     Length Genome (accesible genome) - computed internally averageExpPWMScore: Object class \"vector\":     Average exponential PWM score across genome     (accesible genome) - computed internally ZeroBackground: Object class \"vector\":     Internal background value (computed internally) drop: Object class \"vector\":     Stores Loci contain accesible DNA case     (computed updated internally) tags: Object class \"character\" ~Internal Tags~ ploidy: Object class \"numeric\":     numeric Value descibing ploidy organism. Default: 2 boundMolecules: Object class \"vector\":     vector (single value) containing number bound Molecules     (bound Transcription Factors): Default: 1000 backgroundSignal: Object class \"numeric\":     numeric value descibing ChIP-seq background Signal     (average signal real ChIP seq data). Default: 0 maxSignal: Object class \"numeric\":     numeric value describing highest ChIP-seq signal     (real ChIP-seq data). Default: 1 lociWidth: Object class \"numeric\" ~~ chipMean: Object class \"numeric\":     numeric value describing mean width ChIP- seq peak.     Default:150 chipSd: Object class \"numeric\":     numeric value describing standard deviation ChIP-seq peaks.     Default: 150 chipSmooth: Object class \"vector\":     numeric value describing width window used smooth     Occupancy profiles ChIP profiles. Default:250 stepSize: Object class \"numeric\":     numeric value describing step Size (base pairs)     ChIP-seq score. Default:10 (Scored every 10 base pairs) removeBackground: Object class \"numeric\":     numeric value describing value score removed.     Defualt:0 (negative scores remove) noiseFilter: Object class \"character\" ~Describes     noiseFilter method applied ChIP data (Zero, mean, median,     sigmoid)~ PWMThreshold: Object class \"numeric\":     Threshold PWM Score selected (sites     threshold selected - 0 1) strandRule: Object class \"character\":     \"mean\", \"max\" \"sum\"  dertermine strand handle     computing PWM Scores. Default : \"max\" whichstrand: Object class \"character\":     \"+\",\"-\" \"+-\" strand PWM Score computed.     Default: \"+-\" lambdaPWM: Object class \"vector\" vector (single value) contaning values lambdaPWM Default:1 naturalLog: Object class \"logical\":     logical value describing natural Log used compute     PWM (FALSE log2 used). Default: TRUE noOfSites: Object class \"nos\" Positive integer descibing number sites (base pair)     used PFM compute PWM. Default =0 (Full width     binding site used set 0) PWMpseudocount: Object class \"numeric\":     numeric value describing PWMpseudocount PWM computation.     Default:1 paramTag: Object class \"character\" ~Internal~","code":""},{"path":"/reference/genomicProfiles-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class ","text":"Class \"genomicProfilesInternal\", directly. Class \"parameterOptions\", directly.","code":""},{"path":"/reference/genomicProfiles-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":"initialize signature(.Object = \"genomicProfiles\"): ... show signature(object = \"genomicProfiles\"): ...","code":""},{"path":"/reference/genomicProfiles-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class ","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/genomicProfiles-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Partick C. N. Martin <p.martin@essex.ac.uk>","code":""},{"path":[]},{"path":"/reference/genomicProfiles-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"genomicProfiles\") #> Class \"genomicProfiles\" [package \"ChIPanalyser\"] #>  #> Slots: #>                                                                 #> Name:                 PWM                PFM          PFMFormat #> Class:             matrix             matrix          character #>                                                                 #> Name:         BPFrequency        minPWMScore        maxPWMScore #> Class:             vector             vector             vector #>                                                                 #> Name:            profiles  DNASequenceLength averageExpPWMScore #> Class:             GRList             vector             vector #>                                                                 #> Name:      ZeroBackground               drop               tags #> Class:             vector             vector          character #>                                                                 #> Name:              ploidy     boundMolecules   backgroundSignal #> Class:            numeric             vector            numeric #>                                                                 #> Name:           maxSignal          lociWidth           chipMean #> Class:            numeric            numeric            numeric #>                                                                 #> Name:              chipSd         chipSmooth           stepSize #> Class:            numeric             vector            numeric #>                                                                 #> Name:    removeBackground        noiseFilter       PWMThreshold #> Class:            numeric          character            numeric #>                                                                 #> Name:          strandRule        whichstrand          lambdaPWM #> Class:          character          character             vector #>                                                                 #> Name:          naturalLog          noOfSites     PWMpseudocount #> Class:            logical                nos            numeric #>                           #> Name:            paramTag #> Class:          character #>  #> Extends: \"genomicProfilesInternal\", \"parameterOptions\""},{"path":"/reference/genomicProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Genomic Profile object — genomicProfiles","title":"Genomic Profile object — genomicProfiles","text":"genomicProfiles S4 object serving two purposes: () storing internal computed data (ii) storing paramter options. object parsed different steps pipeline facilitate parsing changing paramters.","code":""},{"path":"/reference/genomicProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genomic Profile object — genomicProfiles","text":"","code":"genomicProfiles(..., parameterOptions = NULL, genomicProfiles = NULL, ChIPScore = NULL)"},{"path":"/reference/genomicProfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Genomic Profile object — genomicProfiles","text":"... user available slots genomicProfiles. parameterOptions parameters already previously computed stored parameterOptions,   parsing object use values instead default ones. genomicProfiles parameters already previously computed stored genomicProfiles,   parsing object use values instead default ones. ChIPScore parameters already previously computed stored ChIPScore,   parsing object use values instead default ones.","code":""},{"path":"/reference/genomicProfiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Genomic Profile object — genomicProfiles","text":"genomicProfiles object serves purpose storing, parsing paramters computed data different steps pipeline. creating genomicProfiles  object possible use previously computed values simply parsing object constructor function.","code":""},{"path":"/reference/genomicProfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Genomic Profile object — genomicProfiles","text":"Returns genomicsProfiles object updated slots paramters parsed.","code":""},{"path":"/reference/genomicProfiles.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Genomic Profile object — genomicProfiles","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/genomicProfiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Genomic Profile object — genomicProfiles","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":[]},{"path":"/reference/genomicProfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Genomic Profile object — genomicProfiles","text":"","code":"PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") genomicProfiles() #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>   #>                         genomicProfiles object with no internal data  #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  Suggested Slots :                                          PWM  #>  Suggested Slots :                                          PFM  #>  Suggested Slots :                                    PFMFormat  #>  Suggested Slots :                                  BPFrequency  genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\") #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>   #>                         genomicProfiles object: Position Weight Matrix  #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>   #> Position Weight Matrix (PWM):  #>   #>         [,1]        [,2]       [,3]       [,4]         [,5]        [,6] #> A -0.2891885 -0.03809741  0.2316372  0.6301128  0.687738702  0.79025750 #> C -0.1331731  0.36623770 -0.1622533  0.3097032 -1.062881002 -1.12273432 #> G  0.1277129 -0.16225333  0.2729606 -0.2758771 -0.395107494  0.01666913 #> T  0.2147795 -0.29456303 -0.5529272 -8.2905435 -0.008313437 -0.79001402 #>         [,7]       [,8]      [,9]     [,10]     [,11]     [,12]      [,13] #> A  0.4399853 -0.2905294  1.366596 -8.290544 -8.290544 -2.557202  1.2881138 #> C  0.6139508 -0.4502305 -8.290544 -8.290544  1.386106 -8.290544 -8.2905435 #> G -0.5119134 -8.2905435 -2.557202 -8.290544 -8.290544  1.366596 -0.9846835 #> T -8.2905435  0.9610348 -8.290544  1.386106 -8.290544 -8.290544 -8.2905435 #>       [,14]       [,15] #> A -0.844542  0.77465549 #> C -1.766981 -8.29054350 #> G -8.290544 -0.23443384 #> T  1.223525  0.03814908 #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>   #> Base pairs frequency for PWM weighting :  #>   #>    A    C    G    T  #> 0.25 0.25 0.25 0.25  #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>   #> PWM built from (PFM - Format  JASPAR ) :  #>   #>   [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> A  746  959 1256 1871 1982 2196 1547  745 3908     0     0    77  3613   428 #> C  872 1437  847 1358  344  324 1841  635    0     0  3985     0     0   170 #> G 1132  847 1309  756  671 1013  597    0   77     0     0  3908   372     0 #> T 1235  742  573    0  988  452    0 2605    0  3985     0     0     0  3387 #>   [,15] #> A  2162 #> C     0 #> G   788 #> T  1035 #>  #>  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"},{"path":"/reference/genomicProfilesInternal-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Non exported class. Represents stripped version genomicProfiles.","code":""},{"path":"/reference/genomicProfilesInternal-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Created Internally.","code":""},{"path":"/reference/genomicProfilesInternal-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"PWM: Object class \"matrix\" ~~ PFM: Object class \"matrix\" ~~ PFMFormat: Object class \"character\" ~~ BPFrequency: Object class \"vector\" ~~ minPWMScore: Object class \"vector\" ~~ maxPWMScore: Object class \"vector\" ~~ profiles: Object class \"GRList\" ~~ DNASequenceLength: Object class \"vector\" ~~ averageExpPWMScore: Object class \"vector\" ~~ ZeroBackground: Object class \"vector\" ~~ drop: Object class \"vector\" ~~ tags: Object class \"character\" ~~","code":""},{"path":"/reference/genomicProfilesInternal-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":".averageExpPWMScore<- signature(object = \"genomicProfilesInternal\", value = \"numeric\"): ... .DNASequenceLength<- signature(object = \"genomicProfilesInternal\", value = \"vector\"): ... .drop<- signature(object = \"genomicProfilesInternal\", value = \"vector\"): ... .generatePWM signature(object = \"genomicProfilesInternal\"): ... .maxPWMScore<- signature(object = \"genomicProfilesInternal\", value = \"vector\"): ... .minPWMScore<- signature(object = \"genomicProfilesInternal\", value = \"vector\"): ... .profiles<- signature(object = \"genomicProfilesInternal\", value = \"GRList\"): ... .tags signature(object = \"genomicProfilesInternal\"): ... .tags<- signature(object = \"genomicProfilesInternal\", value = \"character\"): ... averageExpPWMScore signature(object = \"genomicProfilesInternal\"): ... BPFrequency signature(object = \"genomicProfilesInternal\"): ... BPFrequency<- signature(object = \"genomicProfilesInternal\", value = \"DNAStringSet\"): ... BPFrequency<- signature(object = \"genomicProfilesInternal\", value = \"vector\"): ... DNASequenceLength signature(object = \"genomicProfilesInternal\"): ... drop signature(object = \"genomicProfilesInternal\"): ... maxPWMScore signature(object = \"genomicProfilesInternal\"): ... minPWMScore signature(object = \"genomicProfilesInternal\"): ... PFMFormat signature(object = \"genomicProfilesInternal\"): ... PFMFormat<- signature(object = \"genomicProfilesInternal\", value = \"character\"): ... PositionFrequencyMatrix signature(object = \"genomicProfilesInternal\"): ... PositionFrequencyMatrix<- signature(object = \"genomicProfilesInternal\", value = \"character\"): ... PositionFrequencyMatrix<- signature(object = \"genomicProfilesInternal\", value = \"matrix\"): ... PositionWeightMatrix signature(object = \"genomicProfilesInternal\"): ... PositionWeightMatrix<- signature(object = \"genomicProfilesInternal\", value = \"matrix\"): ... profiles signature(object = \"genomicProfilesInternal\"): ...","code":""},{"path":"/reference/genomicProfilesInternal-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class ","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/genomicProfilesInternal-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":[]},{"path":"/reference/genomicProfilesInternal-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"genomicProfilesInternal\") #> Class \"genomicProfilesInternal\" [package \"ChIPanalyser\"] #>  #> Slots: #>                                                                 #> Name:                 PWM                PFM          PFMFormat #> Class:             matrix             matrix          character #>                                                                 #> Name:         BPFrequency        minPWMScore        maxPWMScore #> Class:             vector             vector             vector #>                                                                 #> Name:            profiles  DNASequenceLength averageExpPWMScore #> Class:             GRList             vector             vector #>                                                                 #> Name:      ZeroBackground               drop               tags #> Class:             vector             vector          character #>  #> Known Subclasses: \"genomicProfiles\""},{"path":"/reference/getHighestFitnessSolutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Highest Fitness Solutions — getHighestFitnessSolutions","title":"Get Highest Fitness Solutions — getHighestFitnessSolutions","text":"getHighestFitnessSolutions extract best solution ChIPanalyser GA/evolve Run.","code":""},{"path":"/reference/getHighestFitnessSolutions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Highest Fitness Solutions — getHighestFitnessSolutions","text":"","code":"getHighestFitnessSolutions(population,child=2,method=\"geometric\")"},{"path":"/reference/getHighestFitnessSolutions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Highest Fitness Solutions — getHighestFitnessSolutions","text":"population Population list output evolve function. child numeric describing number solution extracted Population list. method character string describing scoring method used selected     \"geometric\",\"ks\",\"MSE\",\"pearson\",\"spearman\",\"kendall\",     \"recall\",\"precesion\",\"fscore\",\"MCC\",\"Accuracy\" \"AUC\".","code":""},{"path":"/reference/getHighestFitnessSolutions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Highest Fitness Solutions — getHighestFitnessSolutions","text":"function serves way extracting data poppulation list. Ultimately - just wrapper indexing.","code":""},{"path":"/reference/getHighestFitnessSolutions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Highest Fitness Solutions — getHighestFitnessSolutions","text":"Return index top \"child\" solutions.","code":""},{"path":"/reference/getHighestFitnessSolutions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Highest Fitness Solutions — getHighestFitnessSolutions","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/getHighestFitnessSolutions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Highest Fitness Solutions — getHighestFitnessSolutions","text":"","code":"library(ChIPanalyser) data(ChIPanalyserData) # See GA vignette for usage"},{"path":"/reference/getTestingData.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract testing data from ChIPscore object — getTestingData","title":"Extract testing data from ChIPscore object — getTestingData","text":"getTestingData extracts selected regions ChIPscore object used testing set.","code":""},{"path":"/reference/getTestingData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract testing data from ChIPscore object — getTestingData","text":"","code":"getTestingData(ChIPscore,loci = 1)"},{"path":"/reference/getTestingData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract testing data from ChIPscore object — getTestingData","text":"ChIPscore ChIPscore object returned processingChIP loci numeric describing index loci used testing data.","code":""},{"path":"/reference/getTestingData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract testing data from ChIPscore object — getTestingData","text":"Returns ChIPscore object selected testing loci.","code":""},{"path":"/reference/getTestingData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract testing data from ChIPscore object — getTestingData","text":"Patrick C.N. Martin <pcnmartin@gmail.com","code":""},{"path":"/reference/getTestingData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract testing data from ChIPscore object — getTestingData","text":"","code":"library(ChIPanalyser) data(ChIPanalyserData) # See GA vignette for usage  test <- processingChIP(chip,top) test <- getTestingData(test, 1:2)"},{"path":"/reference/getTrainingData.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract training data from ChIPscore object — getTrainingData","title":"Extract training data from ChIPscore object — getTrainingData","text":"getTrainingData extracts selected regions ChIPScore object used training set.","code":""},{"path":"/reference/getTrainingData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract training data from ChIPscore object — getTrainingData","text":"","code":"getTrainingData(ChIPscore,loci = 1)"},{"path":"/reference/getTrainingData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract training data from ChIPscore object — getTrainingData","text":"ChIPscore ChIPscore object returned processingChIP loci numeric describing index loci used training data.","code":""},{"path":"/reference/getTrainingData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract training data from ChIPscore object — getTrainingData","text":"Returns ChIPscore object selected training loci.","code":""},{"path":"/reference/getTrainingData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract training data from ChIPscore object — getTrainingData","text":"Patrick C.N. Martin <pcnmartin@gmail.com","code":""},{"path":"/reference/getTrainingData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract training data from ChIPscore object — getTrainingData","text":"","code":"library(ChIPanalyser) data(ChIPanalyserData) # See GA vignette for usage  test <- processingChIP(chip,top) test <- getTrainingData(test, 1:2)"},{"path":"/reference/initialize-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function initialize  ~~ — initialize-methods","title":"~~ Methods for Function initialize  ~~ — initialize-methods","text":"~~ Methods function initialize  ~~","code":""},{"path":"/reference/initialize-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function initialize  ~~ — initialize-methods","text":"signature(.Object = \"ChIPScore\") Initialize ChIPScore signature(.Object = \"genomicProfiles\") Initialize genomicProfiles signature(.Object = \"parameterOptions\") Initialize parameterOptions","code":""},{"path":"/reference/lambdaPWM-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function lambdaPWM  ~~ — lambdaPWM-methods","title":"~~ Methods for Function lambdaPWM  ~~ — lambdaPWM-methods","text":"~~ Methods function lambdaPWM  ~~","code":""},{"path":"/reference/lambdaPWM-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function lambdaPWM  ~~ — lambdaPWM-methods","text":"lambdaPWM(object)","code":""},{"path":"/reference/lambdaPWM.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM","title":"Accessor Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM","text":"Accessor Method lambdaPWM slot parameterOptions object","code":""},{"path":"/reference/lambdaPWM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM","text":"","code":"lambdaPWM(object)"},{"path":"/reference/lambdaPWM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM","text":"object object parameterOptions object","code":""},{"path":"/reference/lambdaPWM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM","text":"model underlying ChIPanalyser internally infers two paramters: number     bound molecules lambda. Lambda represents scaling factor     Position weight matrix (PWM). can described well TF     discriminate high affinity high affinity sites.","code":""},{"path":"/reference/lambdaPWM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM","text":"Returns value assigned lambdaPWM slot parameterOptions object.","code":""},{"path":"/reference/lambdaPWM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/lambdaPWM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM","text":"Patrick C. N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/lambdaPWM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects GPP <- parameterOptions(lambdaPWM=1) #Setting new Value for lambdaPWM lambdaPWM(GPP) #> [1] 1"},{"path":"/reference/lambdaPWM_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function lambdaPWM<-  ~~ — lambdaPWM<--methods","title":"~~ Methods for Function lambdaPWM<-  ~~ — lambdaPWM<--methods","text":"Setter method lambdaPWM slot parameterOptions","code":""},{"path":"/reference/lambdaPWM_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function lambdaPWM<-  ~~ — lambdaPWM<--methods","text":"lambdaPWM(object)<-value","code":""},{"path":"/reference/lambdaPWM_.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM<-","title":"Setter Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM<-","text":"Setter Method lambdaPWM slot parameterOptions object","code":""},{"path":"/reference/lambdaPWM_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM<-","text":"","code":"lambdaPWM(object)<-value"},{"path":"/reference/lambdaPWM_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM<-","text":"object object parameterOptions object value value numeric value assigned lambdaPWM slot.     Default set 1.","code":""},{"path":"/reference/lambdaPWM_.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM<-","text":"model underlying ChIPanalyser internally infers two paramters: number     bound molecules lambda. Lambda represents scaling factor     Position weight matrix (PWM). can described well TF     discriminate high affinity high affinity sites.","code":""},{"path":"/reference/lambdaPWM_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM<-","text":"Returns value assigned lambdaPWM slot parameterOptions object.","code":""},{"path":"/reference/lambdaPWM_.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/lambdaPWM_.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM<-","text":"Patrick C. N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/lambdaPWM_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter Method for the lambdaPWM slot in a\nparameterOptions object — lambdaPWM<-","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects GPP <- parameterOptions(lambdaPWM=1) #Setting new Value for lambdaPWM lambdaPWM(GPP) <- 2"},{"path":"/reference/loci-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Setter Loci interest parsed extracted ChIPScore object","code":""},{"path":"/reference/loci-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"virtual Class: objects may created .","code":""},{"path":"/reference/loci-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":".loci<- signature(object = \"ChIPScore\", value = \"loci\"): ...","code":""},{"path":"/reference/loci-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class ","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/loci-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":[]},{"path":"/reference/loci-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"loci\") #> Virtual Class \"loci\" [package \"ChIPanalyser\"] #>  #> No Slots, prototype of class \"NULL\" #>  #> Known Subclasses:  #> Class \"NULL\", directly #> Class \"GRanges\", directly #> Class \".NULL\", by class \"NULL\", distance 2, with explicit coerce #> Class \"GPos\", by class \"GRanges\", distance 2 #> Class \"UnstitchedGPos\", by class \"GRanges\", distance 3 #> Class \"StitchedGPos\", by class \"GRanges\", distance 3"},{"path":"/reference/loci-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function loci  ~~ — loci-methods","title":"~~ Methods for Function loci  ~~ — loci-methods","text":"Accessor method loci slot ChIPScore","code":""},{"path":"/reference/loci-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function loci  ~~ — loci-methods","text":"loci{Object} Loci interest parsed extracted ChIPScore object","code":""},{"path":"/reference/loci.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor Method for the loci slot in a\nChIPScore object — loci","title":"Accessor Method for the loci slot in a\nChIPScore object — loci","text":"Setter Method loci slot ChIPScore object","code":""},{"path":"/reference/loci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor Method for the loci slot in a\nChIPScore object — loci","text":"","code":"loci(object)"},{"path":"/reference/loci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor Method for the loci slot in a\nChIPScore object — loci","text":"object object ChIPScore object","code":""},{"path":"/reference/loci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor Method for the loci slot in a\nChIPScore object — loci","text":"using processingChIP, functions return     name GRanges loci interest. loci either result     user input extracted ChIP profiles (see processingChIP     lociWidth). functions enalbles     extract loci ChIPScore object.","code":""},{"path":"/reference/loci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor Method for the loci slot in a\nChIPScore object — loci","text":"Returns value assigned loci slot ChIPScore object.","code":""},{"path":"/reference/loci.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor Method for the loci slot in a\nChIPScore object — loci","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/loci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor Method for the loci slot in a\nChIPScore object — loci","text":"Patrick C. N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/loci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor Method for the loci slot in a\nChIPScore object — loci","text":"","code":"# Loading data data(ChIPanalyserData)  chip<-processingChIP(chip,top) loci(chip) #> GRanges object with 4 ranges and 0 metadata columns: #>                            seqnames            ranges strand #>                               <Rle>         <IRanges>  <Rle> #>   chr3L:20300001..20320000    chr3L 20300001-20320000      * #>     chr2L:6480001..6500000    chr2L   6480001-6500000      * #>   chr3R:16140001..16160000    chr3R 16140001-16160000      * #>   chr2L:19500001..19520000    chr2L 19500001-19520000      * #>   ------- #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/lociWidth-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function lociWidth  ~~ — lociWidth-methods","title":"~~ Methods for Function lociWidth  ~~ — lociWidth-methods","text":"Accessor method loci slot ChIPScore","code":""},{"path":"/reference/lociWidth-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function lociWidth  ~~ — lociWidth-methods","text":"lociWidth(object) Setting width regions using reduce argument providing loci using processingChIP function.","code":""},{"path":"/reference/lociWidth.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor Method for the lociWidth slot in a\nparameterOptions object — lociWidth","title":"Accessor Method for the lociWidth slot in a\nparameterOptions object — lociWidth","text":"Setter Method lociWidth slot parameterOptions object","code":""},{"path":"/reference/lociWidth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor Method for the lociWidth slot in a\nparameterOptions object — lociWidth","text":"","code":"lociWidth(object)"},{"path":"/reference/lociWidth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor Method for the lociWidth slot in a\nparameterOptions object — lociWidth","text":"object object parameterOptions object","code":""},{"path":"/reference/lociWidth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor Method for the lociWidth slot in a\nparameterOptions object — lociWidth","text":"using processingChIP function, provided ChIP     scores split bins given size. lociWidth determines Size     bin. Default set 20 000 bp.     means ChIP profiles provided split bins 20 000 bp     entire profile provided loci interest provided.","code":""},{"path":"/reference/lociWidth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor Method for the lociWidth slot in a\nparameterOptions object — lociWidth","text":"Returns value assigned lociWidth slot parameterOptions object.","code":""},{"path":"/reference/lociWidth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor Method for the lociWidth slot in a\nparameterOptions object — lociWidth","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/lociWidth.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor Method for the lociWidth slot in a\nparameterOptions object — lociWidth","text":"Patrick C. N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/lociWidth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor Method for the lociWidth slot in a\nparameterOptions object — lociWidth","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects GPP <- parameterOptions(lociWidth=20000) #Accessing new Value for lociWidth lociWidth(GPP) #> [1] 20000"},{"path":"/reference/lociWidth_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function lociWidth<-  ~~ — lociWidth<--methods","title":"~~ Methods for Function lociWidth<-  ~~ — lociWidth<--methods","text":"Setter method loci slot ChIPScore","code":""},{"path":"/reference/lociWidth_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function lociWidth<-  ~~ — lociWidth<--methods","text":"lociWidth(Object)<-value","code":""},{"path":"/reference/lociWidth_.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter Method for the lociWidth slot in a\nparameterOptions object — lociWidth<-","title":"Setter Method for the lociWidth slot in a\nparameterOptions object — lociWidth<-","text":"Setter Method lociWidth slot parameterOptions object","code":""},{"path":"/reference/lociWidth_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter Method for the lociWidth slot in a\nparameterOptions object — lociWidth<-","text":"","code":"lociWidth(object)<-value"},{"path":"/reference/lociWidth_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter Method for the lociWidth slot in a\nparameterOptions object — lociWidth<-","text":"object object parameterOptions object value value numeric value assigned lociWidth slot.     Default set 1.","code":""},{"path":"/reference/lociWidth_.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter Method for the lociWidth slot in a\nparameterOptions object — lociWidth<-","text":"using processingChIP function, provided ChIP     scores split bins given size. lociWidth determines Size     bin. Default set 20 000 bp.     mean ChIP profiles provided split bins 20 000 bp     entire profile provided loci interest provided.","code":""},{"path":"/reference/lociWidth_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter Method for the lociWidth slot in a\nparameterOptions object — lociWidth<-","text":"Returns value assigned lociWidth slot parameterOptions object.","code":""},{"path":"/reference/lociWidth_.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter Method for the lociWidth slot in a\nparameterOptions object — lociWidth<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/lociWidth_.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter Method for the lociWidth slot in a\nparameterOptions object — lociWidth<-","text":"Patrick C. N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/lociWidth_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter Method for the lociWidth slot in a\nparameterOptions object — lociWidth<-","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects GPP <- parameterOptions(lociWidth=20000) #Setting new Value for lociWidth lociWidth(GPP) <- 30000"},{"path":"/reference/maxPWMScore-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function maxPWMScore  ~~ — maxPWMScore-methods","title":"~~ Methods for Function maxPWMScore  ~~ — maxPWMScore-methods","text":"Accessor method maxPWMScore","code":""},{"path":"/reference/maxPWMScore-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function maxPWMScore  ~~ — maxPWMScore-methods","text":"maxPWMScore(object)","code":""},{"path":"/reference/maxPWMScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor function for maxPWMScore slot in a\ngenomicProfiles object. — maxPWMScore","title":"Accessor function for maxPWMScore slot in a\ngenomicProfiles object. — maxPWMScore","text":"Accessor function maxPWMScore slot genomicProfiles object.","code":""},{"path":"/reference/maxPWMScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor function for maxPWMScore slot in a\ngenomicProfiles object. — maxPWMScore","text":"","code":"maxPWMScore(object)"},{"path":"/reference/maxPWMScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor function for maxPWMScore slot in a\ngenomicProfiles object. — maxPWMScore","text":"object object genomicProfiles object.","code":""},{"path":"/reference/maxPWMScore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor function for maxPWMScore slot in a\ngenomicProfiles object. — maxPWMScore","text":"maxPWMScore numerical value can described highest PWM score computed genome wide scale. value computed updated genomicProfiles object using computeGenomeWideScores.","code":""},{"path":"/reference/maxPWMScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor function for maxPWMScore slot in a\ngenomicProfiles object. — maxPWMScore","text":"Returns value assigned maxPWMScore slot genomicProfiles object.","code":""},{"path":"/reference/maxPWMScore.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor function for maxPWMScore slot in a\ngenomicProfiles object. — maxPWMScore","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/maxPWMScore.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor function for maxPWMScore slot in a\ngenomicProfiles object. — maxPWMScore","text":"Patrick C. N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/maxPWMScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor function for maxPWMScore slot in a\ngenomicProfiles object. — maxPWMScore","text":"","code":"# Loading data #Data extraction data(ChIPanalyserData) # path to Position Frequency Matrix PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #As an example of genome, this example will run on the Drosophila genome # \\donttest{ if(!require(\"BSgenome.Dmelanogaster.UCSC.dm6\", character.only = TRUE)){     if (!requireNamespace(\"BiocManager\", quietly=TRUE))         install.packages(\"BiocManager\")     BiocManager::install(\"BSgenome.Dmelanogaster.UCSC.dm6\") } library(BSgenome.Dmelanogaster.UCSC.dm6) DNASequenceSet <- getSeq(BSgenome.Dmelanogaster.UCSC.dm6) #Building data objects GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\")  # Computing Genome Wide GenomeWide <- computeGenomeWideScores(DNASequenceSet = DNASequenceSet,     genomicProfiles = GPP) #> Extracting genome wide scores  #> Whole Genome ~ Both strands  #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Computing Mean waiting time  maxPWMScore(GenomeWide) #> [1] 13.28745 ## If used before computeGenomeWidePWMScore, will return NULL # }"},{"path":"/reference/maxSignal-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function maxSignal  ~~ — maxSignal-methods","title":"~~ Methods for Function maxSignal  ~~ — maxSignal-methods","text":"Accessor method maxSignal","code":""},{"path":"/reference/maxSignal-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function maxSignal  ~~ — maxSignal-methods","text":"maxSignal(object) Maximum ChIP signal extracted ChIP data (see processingChIP)","code":""},{"path":"/reference/maxSignal.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor method for the maxSignal slot in a\nparameterOptions object. — maxSignal","title":"Accessor method for the maxSignal slot in a\nparameterOptions object. — maxSignal","text":"Accessor method maxSignal slot parameterOptions object.","code":""},{"path":"/reference/maxSignal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor method for the maxSignal slot in a\nparameterOptions object. — maxSignal","text":"","code":"maxSignal(object)"},{"path":"/reference/maxSignal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor method for the maxSignal slot in a\nparameterOptions object. — maxSignal","text":"object object parameterOptions object.","code":""},{"path":"/reference/maxSignal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor method for the maxSignal slot in a\nparameterOptions object. — maxSignal","text":"context ChIPanalyser, maxSignal represents maximum normalised ChIP-Seq signal given Transcription factor (DNA binding protein). Although, default value 1 assigned slot, strongly recommend tailor value accordingly. strongly encourage set values building parameterOptions object.","code":""},{"path":"/reference/maxSignal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor method for the maxSignal slot in a\nparameterOptions object. — maxSignal","text":"Returns value assigned maxSignal slot parameterOptions object.","code":""},{"path":"/reference/maxSignal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor method for the maxSignal slot in a\nparameterOptions object. — maxSignal","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/maxSignal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor method for the maxSignal slot in a\nparameterOptions object. — maxSignal","text":"Patrick C.N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/maxSignal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor method for the maxSignal slot in a\nparameterOptions object. — maxSignal","text":"","code":"# Building parameterOptions object OPP <- parameterOptions() #Setting new Value for maxSignal maxSignal(OPP) #> [1] 1"},{"path":"/reference/maxSignal_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function maxSignal<-  ~~ — maxSignal<--methods","title":"~~ Methods for Function maxSignal<-  ~~ — maxSignal<--methods","text":"Setter method maxSignal","code":""},{"path":"/reference/maxSignal_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function maxSignal<-  ~~ — maxSignal<--methods","text":"maxSignal(Object)<-value Maximum ChIP signal extracted ChIP data (see processingChIP)","code":""},{"path":"/reference/maxSignal_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter method for maxSignal slot in a\nparameterOptions object. — maxSignal<-","title":"Setter method for maxSignal slot in a\nparameterOptions object. — maxSignal<-","text":"Setter method maxSignal slot parameterOptions object.","code":""},{"path":"/reference/maxSignal_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter method for maxSignal slot in a\nparameterOptions object. — maxSignal<-","text":"","code":"maxSignal(object) <- value"},{"path":"/reference/maxSignal_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter method for maxSignal slot in a\nparameterOptions object. — maxSignal<-","text":"object object parameterOptions object. value value numerical value assigned     maxSignal slot.","code":""},{"path":"/reference/maxSignal_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter method for maxSignal slot in a\nparameterOptions object. — maxSignal<-","text":"context ChIPanalyser, maxSignal represents maximum normalised ChIP-Seq signal given Transcription factor (DNA binding protein). Although, default value 1 assigned slot, strongly recommend tailor value accordingly. strongly encourage set values building parameterOptions object.","code":""},{"path":"/reference/maxSignal_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter method for maxSignal slot in a\nparameterOptions object. — maxSignal<-","text":"Returns parameterOptions updated value maxSignal.","code":""},{"path":"/reference/maxSignal_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter method for maxSignal slot in a\nparameterOptions object. — maxSignal<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/maxSignal_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter method for maxSignal slot in a\nparameterOptions object. — maxSignal<-","text":"Patrick C.N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/maxSignal_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter method for maxSignal slot in a\nparameterOptions object. — maxSignal<-","text":"","code":"# Building parameterOptions object OPP <- parameterOptions() #Setting new Value for maxSignal maxSignal(OPP) <- 1.8"},{"path":"/reference/minPWMScore-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function minPWMScore  ~~ — minPWMScore-methods","title":"~~ Methods for Function minPWMScore  ~~ — minPWMScore-methods","text":"Accessor minPWMScore","code":""},{"path":"/reference/minPWMScore-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function minPWMScore  ~~ — minPWMScore-methods","text":"minPWMScore(object) Minimum PWM score computed computeGenomeWideScores step.","code":""},{"path":"/reference/minPWMScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor method the minPWMScore slot in a\ngenomicProfiles object — minPWMScore","title":"Accessor method the minPWMScore slot in a\ngenomicProfiles object — minPWMScore","text":"Accessor method minPWMScore slot genomicProfiles object","code":""},{"path":"/reference/minPWMScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor method the minPWMScore slot in a\ngenomicProfiles object — minPWMScore","text":"","code":"minPWMScore(object)"},{"path":"/reference/minPWMScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor method the minPWMScore slot in a\ngenomicProfiles object — minPWMScore","text":"object object genomicProfiles object.","code":""},{"path":"/reference/minPWMScore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor method the minPWMScore slot in a\ngenomicProfiles object — minPWMScore","text":"minPWMScore can described lowest PWM score computed genome wide scale. Although possible assigne value minPWMScore, strongly advise use value computed assigned internally. value computed computeGenomeWideScores function.","code":""},{"path":"/reference/minPWMScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor method the minPWMScore slot in a\ngenomicProfiles object — minPWMScore","text":"Returns value assigned minPWMScore slot genomicProfiles object.","code":""},{"path":"/reference/minPWMScore.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor method the minPWMScore slot in a\ngenomicProfiles object — minPWMScore","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/minPWMScore.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor method the minPWMScore slot in a\ngenomicProfiles object — minPWMScore","text":"Patrick C. N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/minPWMScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor method the minPWMScore slot in a\ngenomicProfiles object — minPWMScore","text":"","code":"#Data extraction data(ChIPanalyserData) # path to Position Frequency Matrix PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #As an example of genome, this example will run on the Drosophila genome # \\donttest{ if(!require(\"BSgenome.Dmelanogaster.UCSC.dm6\", character.only = TRUE)){     if (!requireNamespace(\"BiocManager\", quietly=TRUE))         install.packages(\"BiocManager\")     BiocManager::install(\"BSgenome.Dmelanogaster.UCSC.dm6\") } library(BSgenome.Dmelanogaster.UCSC.dm6) DNASequenceSet <- getSeq(BSgenome.Dmelanogaster.UCSC.dm6) #Building data objects GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\")  # Computing Genome Wide GenomceWide <- computeGenomeWideScores(DNASequenceSet = DNASequenceSet,     genomicProfiles = GPP) #> Extracting genome wide scores  #> Whole Genome ~ Both strands  #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Computing Mean waiting time  minPWMScore(GenomceWide) #> [1] -63.54167  ## If used before computeGenomeWidePWMScore, will return NULL  # }"},{"path":"/reference/naturalLog-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function naturalLog  ~~ — naturalLog-methods","title":"~~ Methods for Function naturalLog  ~~ — naturalLog-methods","text":"Accessor method naturalLog slot parameterOptions object.","code":""},{"path":"/reference/naturalLog-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function naturalLog  ~~ — naturalLog-methods","text":"naturalLog(object)","code":""},{"path":"/reference/naturalLog.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor method the naturalLog slot in a\nparameterOptions object. — naturalLog","title":"Accessor method the naturalLog slot in a\nparameterOptions object. — naturalLog","text":"Accessor method naturalLog slot parameterOptions object.","code":""},{"path":"/reference/naturalLog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor method the naturalLog slot in a\nparameterOptions object. — naturalLog","text":"","code":"naturalLog(object)"},{"path":"/reference/naturalLog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor method the naturalLog slot in a\nparameterOptions object. — naturalLog","text":"object object parameterOptions object.","code":""},{"path":"/reference/naturalLog.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor method the naturalLog slot in a\nparameterOptions object. — naturalLog","text":"computation Postion Weight Matrix, Position Probability Matrix (derived Position Frequency Matrix) log transformed. parameter provides whcih \"log transform\" used. TRUE, Natural Log bu used (ln). FALSE, log2 used. strongly encourage set values building parameterOptions object.","code":""},{"path":"/reference/naturalLog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor method the naturalLog slot in a\nparameterOptions object. — naturalLog","text":"Returns value assigned naturalLog slot parameterOptions object.","code":""},{"path":"/reference/naturalLog.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor method the naturalLog slot in a\nparameterOptions object. — naturalLog","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/naturalLog.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor method the naturalLog slot in a\nparameterOptions object. — naturalLog","text":"Patrick C.N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/naturalLog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor method the naturalLog slot in a\nparameterOptions object. — naturalLog","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects GPP <- parameterOptions(naturalLog=TRUE) #Setting new Value for naturalLog naturalLog(GPP) #> [1] TRUE"},{"path":"/reference/naturalLog_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function naturalLog<-  ~~ — naturalLog<--methods","title":"~~ Methods for Function naturalLog<-  ~~ — naturalLog<--methods","text":"Setter method naturalLog slot parameterOptions object.","code":""},{"path":"/reference/naturalLog_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function naturalLog<-  ~~ — naturalLog<--methods","text":"naturalLog(object)<-value","code":""},{"path":"/reference/naturalLog_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter method for the naturalLog slot in a\nparameterOptions object. — naturalLog<-","title":"Setter method for the naturalLog slot in a\nparameterOptions object. — naturalLog<-","text":"Setter method naturalLog slot parameterOptions object.","code":""},{"path":"/reference/naturalLog_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter method for the naturalLog slot in a\nparameterOptions object. — naturalLog<-","text":"","code":"naturalLog(object)<- value"},{"path":"/reference/naturalLog_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter method for the naturalLog slot in a\nparameterOptions object. — naturalLog<-","text":"object object parameterOptions object. value value logical value determine natural log     log2 used computation Position Weight Matrix.","code":""},{"path":"/reference/naturalLog_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter method for the naturalLog slot in a\nparameterOptions object. — naturalLog<-","text":"computation Postion Weight Matrix, Position Probability Matrix (derived Position Frequency Matrix) log transformed. parameter provides whcih \"log transform\" used. TRUE, Natural Log bu used (ln). FALSE, log2 used. strongly encourage set values building parameterOptions object.","code":""},{"path":"/reference/naturalLog_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter method for the naturalLog slot in a\nparameterOptions object. — naturalLog<-","text":"Returns parameterOptions object updated value naturalLog slot.","code":""},{"path":"/reference/naturalLog_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter method for the naturalLog slot in a\nparameterOptions object. — naturalLog<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/naturalLog_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter method for the naturalLog slot in a\nparameterOptions object. — naturalLog<-","text":"Patrick C.N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/naturalLog_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter method for the naturalLog slot in a\nparameterOptions object. — naturalLog<-","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects OPP <- parameterOptions(naturalLog=TRUE) #Setting new Value for naturalLog naturalLog(OPP) <- FALSE"},{"path":"/reference/noOfSites-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function noOfSites  ~~ — noOfSites-methods","title":"~~ Methods for Function noOfSites  ~~ — noOfSites-methods","text":"~~ Methods function noOfSites  ~~","code":""},{"path":"/reference/noOfSites-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function noOfSites  ~~ — noOfSites-methods","text":"signature(object = \"parameterOptions\")","code":""},{"path":"/reference/noOfSites.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor Method for the noOfSites slot in a\nparameterOptions object — noOfSites","title":"Accessor Method for the noOfSites slot in a\nparameterOptions object — noOfSites","text":"Accessor Method noOfSites slot parameterOptions object","code":""},{"path":"/reference/noOfSites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor Method for the noOfSites slot in a\nparameterOptions object — noOfSites","text":"","code":"noOfSites(object)"},{"path":"/reference/noOfSites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor Method for the noOfSites slot in a\nparameterOptions object — noOfSites","text":"object object parameterOptions object","code":""},{"path":"/reference/noOfSites.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor Method for the noOfSites slot in a\nparameterOptions object — noOfSites","text":"computing Position Weight Matricies (PWM) Position Frequency Matricies (PFM), possible restrict number sites used compute PWM. default set \"\". case, sites used compute PWM.","code":""},{"path":"/reference/noOfSites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor Method for the noOfSites slot in a\nparameterOptions object — noOfSites","text":"Returns value assigned noOfSites slot parameterOptions object.","code":""},{"path":"/reference/noOfSites.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor Method for the noOfSites slot in a\nparameterOptions object — noOfSites","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/noOfSites.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor Method for the noOfSites slot in a\nparameterOptions object — noOfSites","text":"Patrick C. N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/noOfSites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor Method for the noOfSites slot in a\nparameterOptions object — noOfSites","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects GPP <- parameterOptions(noOfSites=\"all\") #Setting new Value for naturalLog noOfSites(GPP) #> [1] \"all\""},{"path":"/reference/noOfSites_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function noOfSites<-  ~~ — noOfSites<--methods","title":"~~ Methods for Function noOfSites<-  ~~ — noOfSites<--methods","text":"Setter method noOfSites","code":""},{"path":"/reference/noOfSites_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function noOfSites<-  ~~ — noOfSites<--methods","text":"noOfSites(object)<-\"\"  noOfSites(object)<-value","code":""},{"path":"/reference/noOfSites_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter Method for the noOfSites slot in a\nparameterOptions object. — noOfSites<-","title":"Setter Method for the noOfSites slot in a\nparameterOptions object. — noOfSites<-","text":"Setter Method noOfSites slot parameterOptions object.","code":""},{"path":"/reference/noOfSites_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter Method for the noOfSites slot in a\nparameterOptions object. — noOfSites<-","text":"","code":"noOfSites(object) <- value"},{"path":"/reference/noOfSites_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter Method for the noOfSites slot in a\nparameterOptions object. — noOfSites<-","text":"object object parameterOptions object. value value positive integer assigned     noOfSites slot.","code":""},{"path":"/reference/noOfSites_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter Method for the noOfSites slot in a\nparameterOptions object. — noOfSites<-","text":"computing Position Weight Matricies (PWM) Position Frequency Matricies (PFM), possible restrict number sites used compute PWM. default set \"\". case, sites used compute PWM.","code":""},{"path":"/reference/noOfSites_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter Method for the noOfSites slot in a\nparameterOptions object. — noOfSites<-","text":"Returns parameterOptions object updated value noOfSites slot.","code":""},{"path":"/reference/noOfSites_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter Method for the noOfSites slot in a\nparameterOptions object. — noOfSites<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/noOfSites_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter Method for the noOfSites slot in a\nparameterOptions object. — noOfSites<-","text":"Patrick C.N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/noOfSites_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter Method for the noOfSites slot in a\nparameterOptions object. — noOfSites<-","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects GPP <- parameterOptions(noOfSites=0) #Setting new Value for naturalLog noOfSites(GPP) <- 8"},{"path":"/reference/noiseFilter-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function noiseFilter  ~~ — noiseFilter-methods","title":"~~ Methods for Function noiseFilter  ~~ — noiseFilter-methods","text":"Accessor method noiseFilter","code":""},{"path":"/reference/noiseFilter-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function noiseFilter  ~~ — noiseFilter-methods","text":"noiseFilter(object) Noise Filter applied ChIP scores","code":""},{"path":"/reference/noiseFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter","title":"Accessor Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter","text":"Accessor Method noiseFilter slot parameterOptions object","code":""},{"path":"/reference/noiseFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter","text":"","code":"noiseFilter(object)"},{"path":"/reference/noiseFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter","text":"object object parameterOptions object","code":""},{"path":"/reference/noiseFilter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter","text":"Noise filtering method used ChIP-seq data. Four methods available: Zero, Mean, Median Sigmoid. Zero removes ChIP-seq scores bellow zero, mean mean score, median median score sigmoid assignes weight score based logistic regression curve. Mid point set 95 95 quantile ChIP-seq scores. midpoint receive score 0 1 , everything receive score 1 2","code":""},{"path":"/reference/noiseFilter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter","text":"Returns value assigned noiseFilter slot parameterOptions object.","code":""},{"path":"/reference/noiseFilter.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/noiseFilter.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter","text":"Patrick C. N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/noiseFilter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects GPP <- parameterOptions(noiseFilter=\"sigmoid\") #Setting new Value for noiseFilter noiseFilter(GPP) #> [1] \"sigmoid\""},{"path":"/reference/noiseFilter_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function noiseFilter<-  ~~ — noiseFilter<--methods","title":"~~ Methods for Function noiseFilter<-  ~~ — noiseFilter<--methods","text":"Setter method noiseFilter","code":""},{"path":"/reference/noiseFilter_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function noiseFilter<-  ~~ — noiseFilter<--methods","text":"noiseFilter(object)<-value Noise Filter applied ChIP scores","code":""},{"path":"/reference/noiseFilter_.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter<-","title":"Setter Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter<-","text":"Setter Method noiseFilter slot parameterOptions object","code":""},{"path":"/reference/noiseFilter_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter<-","text":"","code":"noiseFilter(object) <- value"},{"path":"/reference/noiseFilter_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter<-","text":"object object parameterOptions object value value value assigned     noiseFilter slot (zero - mean - median -sigmoid)","code":""},{"path":"/reference/noiseFilter_.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter<-","text":"Noise filtering method used ChIP-seq data. Four methods available: Zero, Mean, Median Sigmoid. Zero removes ChIP-seq scores bellow zero, mean mean score, median median score sigmoid assignes weight score based logistic regression curve. Mid point set 95 95 quantile ChIP-seq scores. midpoint receive score 0 1 , everything receive score 1 2","code":""},{"path":"/reference/noiseFilter_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter<-","text":"Returns value assigned noiseFilter slot parameterOptions object.","code":""},{"path":"/reference/noiseFilter_.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/noiseFilter_.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter<-","text":"Patrick C. N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/noiseFilter_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter Method for the noiseFilter slot in a\nparameterOptions object — noiseFilter<-","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects GPP <- parameterOptions(noiseFilter=\"sigmoid\") #Setting new Value for noiseFilter noiseFilter(GPP) <-\"zero\""},{"path":"/reference/nos-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Virtual class handle Number Sites","code":""},{"path":"/reference/nos-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"virtual Class: objects may created .","code":""},{"path":"/reference/nos-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":"methods defined class \"nos\" signature.","code":""},{"path":"/reference/nos-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class ","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/nos-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/nos-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"nos\") #> Virtual Class \"nos\" [package \"ChIPanalyser\"] #>  #> No Slots, prototype of class \"numeric\" #>  #> Known Subclasses:  #> Class \"numeric\", directly #> Class \"character\", directly #> Class \"integer\", by class \"numeric\", distance 2 #> Class \"double\", by class \"numeric\", distance 2 #> Class \"signature\", by class \"character\", distance 2 #> Class \"className\", by class \"character\", distance 2 #> Class \"ObjectsWithPackage\", by class \"character\", distance 2 #> Class \"factor\", by class \"numeric\", distance 3 #> Class \"ordered\", by class \"numeric\", distance 4"},{"path":"/reference/parameterOptions-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"parameterOptions object used store parse various parameters needed throughout analysis pipeline.","code":""},{"path":"/reference/parameterOptions-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form parameterOptions(ploidy, boundMolecules, backgroundSignal, maxSignal, lociWidth, chipMean, chipSd, chipSmooth, stepSize, noiseFilter, removeBackground, lambdaPWM, PWMpseudocount, naturalLog, noOfSites, PWMThreshold, strandRule, whichstrand).","code":""},{"path":"/reference/parameterOptions-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"ploidy: Object class \"numeric\":   numeric Value descibing ploidy organism. Default: 2 boundMolecules: Object class \"vector\":   vector (single value) containing number bound Molecules   (bound Transcription Factors): Default: 1000 backgroundSignal: Object class \"numeric\":   numeric value descibing ChIP-seq background Signal   (average signal real ChIP seq data). Default: 0 maxSignal: Object class \"numeric\":   numeric value describing highest ChIP-seq signal   (real ChIP-seq data). Default: 1 lociWidth: Object class \"numeric\":   numeric value describing bin size splitting ChIP seq scores). Default: 20 000 chipMean: Object class \"numeric\":   numeric value describing mean width ChIP- seq peak.   Default:150 chipSd: Object class \"numeric\":   numeric value describing standard deviation ChIP-seq peaks.   Default: 150 chipSmooth: Object class \"vector\":   numeric value describing width window used smooth   Occupancy profiles ChIP profiles. Default:250 stepSize: Object class \"numeric\":   numeric value describing step Size (base pairs)   ChIP-seq score. Default:10 (Scored every 10 base pairs) removeBackground: Object class \"numeric\":   numeric value describing value score removed.   Defualt:0 (negative scores remove) noiseFilter: Object class \"character\" Describes     noiseFilter method applied ChIP scores PWMThreshold: Object class \"numeric\":     Threshold PWM Score selected (sites     threshold selected - 0 1) strandRule: Object class \"character\":     \"mean\", \"max\" \"sum\"  dertermine strand handle     computing PWM Scores. Default : \"max\" whichstrand: Object class \"character\":     \"+\",\"-\" \"+-\" strand PWM Score computed.     Default: \"+-\" lambdaPWM: Object class \"vector\" vector (single value) contaning values lambdaPWM Default:1 naturalLog: Object class \"logical\":     logical value describing natural Log used compute     PWM (FALSE log2 used). Default: TRUE noOfSites: Object class \"nos\" Positive integer descibing number sites (base pair)     used PFM compute PWM. Default =0 (Full width     binding site used set 0) PWMpseudocount: Object class \"numeric\":     numeric value describing PWMpseudocount PWM computation.     Default:1 paramTag: Object class \"character\" ~Internal~","code":""},{"path":"/reference/parameterOptions-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":".paramTag signature(object = \"parameterOptions\"): ... .paramTag<- signature(object = \"parameterOptions\", value = \"character\"): ... .ZeroBackground signature(object = \"parameterOptions\"): ... .ZeroBackground<- signature(object = \"parameterOptions\", value = \"vector\"): ... backgroundSignal signature(object = \"parameterOptions\"): ... backgroundSignal<- signature(object = \"parameterOptions\", value = \"numeric\"): ... boundMolecules signature(object = \"parameterOptions\"): ... boundMolecules<- signature(object = \"parameterOptions\", value = \"vector\"): ... chipMean signature(object = \"parameterOptions\"): ... chipMean<- signature(object = \"parameterOptions\", value = \"numeric\"): ... chipSd signature(object = \"parameterOptions\"): ... chipSd<- signature(object = \"parameterOptions\", value = \"numeric\"): ... chipSmooth signature(object = \"parameterOptions\"): ... chipSmooth<- signature(object = \"parameterOptions\", value = \"vector\"): ... initialize signature(.Object = \"parameterOptions\"): ... lambdaPWM signature(object = \"parameterOptions\"): ... lambdaPWM<- signature(object = \"parameterOptions\", value = \"vector\"): ... lociWidth signature(object = \"parameterOptions\"): ... lociWidth<- signature(object = \"parameterOptions\", value = \"numeric\"): ... maxSignal signature(object = \"parameterOptions\"): ... maxSignal<- signature(object = \"parameterOptions\", value = \"numeric\"): ... naturalLog signature(object = \"parameterOptions\"): ... naturalLog<- signature(object = \"parameterOptions\", value = \"logical\"): ... noiseFilter signature(object = \"parameterOptions\"): ... noiseFilter<- signature(object = \"parameterOptions\", value = \"character\"): ... noOfSites signature(object = \"parameterOptions\"): ... noOfSites<- signature(object = \"parameterOptions\", value = \"character\"): ... noOfSites<- signature(object = \"parameterOptions\", value = \"numeric\"): ... ploidy signature(object = \"parameterOptions\"): ... ploidy<- signature(object = \"parameterOptions\", value = \"numeric\"): ... PWMpseudocount signature(object = \"parameterOptions\"): ... PWMpseudocount<- signature(object = \"parameterOptions\", value = \"numeric\"): ... PWMThreshold signature(object = \"parameterOptions\"): ... PWMThreshold<- signature(object = \"parameterOptions\", value = \"numeric\"): ... removeBackground signature(object = \"parameterOptions\"): ... removeBackground<- signature(object = \"parameterOptions\", value = \"vector\"): ... show signature(object = \"parameterOptions\"): ... stepSize signature(object = \"parameterOptions\"): ... stepSize<- signature(object = \"parameterOptions\", value = \"numeric\"): ... strandRule signature(object = \"parameterOptions\"): ... strandRule<- signature(object = \"parameterOptions\", value = \"character\"): ... whichstrand signature(object = \"parameterOptions\"): ... whichstrand<- signature(object = \"parameterOptions\", value = \"character\"): ...","code":""},{"path":"/reference/parameterOptions-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class ","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/parameterOptions-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Partick C. N. Martin <p.martin@essex.ac.uk>","code":""},{"path":[]},{"path":"/reference/parameterOptions-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"parameterOptions\") #> Class \"parameterOptions\" [package \"ChIPanalyser\"] #>  #> Slots: #>                                                                            #> Name:            ploidy   boundMolecules backgroundSignal        maxSignal #> Class:          numeric           vector          numeric          numeric #>                                                                            #> Name:         lociWidth         chipMean           chipSd       chipSmooth #> Class:          numeric          numeric          numeric           vector #>                                                                            #> Name:          stepSize removeBackground      noiseFilter     PWMThreshold #> Class:          numeric          numeric        character          numeric #>                                                                            #> Name:        strandRule      whichstrand        lambdaPWM       naturalLog #> Class:        character        character           vector          logical #>                                                           #> Name:         noOfSites   PWMpseudocount         paramTag #> Class:              nos          numeric        character #>  #> Known Subclasses: \"ChIPScore\", \"genomicProfiles\""},{"path":"/reference/parameterOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"parameter Options object — parameterOptions","title":"parameter Options object — parameterOptions","text":"parameterOptions object used store parse various parameters needed throughout analysis pipeline.","code":""},{"path":"/reference/parameterOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parameter Options object — parameterOptions","text":"","code":"parameterOptions(ploidy = 2, boundMolecules = 1000, backgroundSignal = 0, maxSignal = 1, lociWidth = 20000, chipMean = 200, chipSd = 200, chipSmooth = 250, stepSize = 10, removeBackground = 0, noiseFilter = \"zero\", naturalLog = TRUE, noOfSites = \"all\", PWMThreshold = 0.7, strandRule = \"max\", whichstrand = \"+-\", PWMpseudocount = 1, lambdaPWM = 1)"},{"path":"/reference/parameterOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parameter Options object — parameterOptions","text":"ploidy ploidy: numeric Value descibing ploidy organism. Default: 2 boundMolecules boundMolecules: vector (single value) containing number bound Molecules (bound Transcription Factors): Default: 1000 backgroundSignal backgroundSignal: numeric value descibing ChIP-seq background Signal (average signal real ChIP seq data). Default: 0 maxSignal maxSignal: numeric value describing highest ChIP-seq signal (real ChIP-seq data). Default: 1 lociWidth lociWidth: numeric value describing width bins used split ChIP profiles parsed processingChIP. Default = 20000 chipMean chipMean: numeric value describing mean width ChIP- seq peak: Default:200 chipSd chipSd: numeric value describing standard deviation ChIP-seq peaks. Default: 200 chipSmooth chipSmooth: numeric value describing width window used smooth Occupancy profiles ChIP profiles. Default:250 stepSize stepSize: numeric value describing step Size (base pairs) ChIP-seq score. Default:10 (Scored every 10 base pairs) removeBackground removeBackground: numeric value describing value score removed. Defualt:0 (negative scores remove) noiseFilter noiseFilter:   character string one following: Zero, Mean, Median, Sigmoid.   Noise filter applied ChIP Score processingChIP step. naturalLog naturalLog: logical value describing natural Log used compute PWM (FALSE log2 used). Default: TRUE noOfSites noOfSites: Positive integer descibing number sites (base pair) used PFM compute PWM. Default =0 (Full width binding site used set 0) PWMThreshold PWMThreshold: Threshold PWM Score selected (sites threshold selected - 0 1) strandRule strandRule: `mean', `max' `sum'  dertermine strand handle computing PWM Scores. Default : `max' whichstrand whichstrand: `+',`-' `+-' strand PWM Score computed. Default: `+-' PWMpseudocount PWMpseudocount: numeric value describing PWMpseudocount PWM computation. Default:1 lambdaPWM vector (single value) contaning values ScalingFactorPWM (Also known lambda).Default:1","code":""},{"path":"/reference/parameterOptions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"parameter Options object — parameterOptions","text":"ChIPanalyser requires lot parameters. parameterOptions created intent storing parsing numerous arguments different functions. parameters object optional although strongly recommend. parameters extracted updated function along pipeline e.g. maxSignal backgroundSignal extracted processingChIP step. paramters automatically parsed. use ( parameter) simply parse new parameterOptions object desired paramters.","code":""},{"path":"/reference/parameterOptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parameter Options object — parameterOptions","text":"Returns parameterOptions updated values.","code":""},{"path":"/reference/parameterOptions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"parameter Options object — parameterOptions","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/parameterOptions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"parameter Options object — parameterOptions","text":"Patrick C. N. Martin  <p.martin@essex.ac.uk>","code":""},{"path":[]},{"path":"/reference/parameterOptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"parameter Options object — parameterOptions","text":"","code":"# parameterOptions(ploidy = 2, boundMolecules = 1000, backgroundSignal = 0,     maxSignal = 1, lociWidth = 20000, chipMean = 200, chipSd = 200,     chipSmooth = 250, stepSize = 10, removeBackground = 0, noiseFilter = \"zero\",     naturalLog = TRUE, noOfSites = \"all\", PWMThreshold = 0.7,     strandRule = \"max\", whichstrand = \"+-\", PWMpseudocount = 1,     lambdaPWM = 1) #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>                         parameterOptions  #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  processingChIP options  #>   #>  chipMean:                                                  200  #>  chipSd:                                                    200  #>  chipSmooth:                                                250  #>  lociWidth:                                               20000  #>  noiseFilter:                                              zero  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  processingChIP options Updated  #>   #>  maxSignal:                                                   1  #>  backgroundSignal:                                            0  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  Position Weight Matrix Options  #>   #>  naturalLog:                                               TRUE  #>  noOfSites:                                                 all  #>  PWMpseudocount:                                              1  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  Genome Wide Score options  #>   #>  strandRule:                                                max  #>  whichstrand:                                                +-  #>  lambdaPWM:                                                   1  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  PWM Scores above Threshold options  #>   #>  strandRule:                                                max  #>  whichstrand:                                                +-  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  Occupancy options  #>   #>  Ploidy:                                                      2  #>  lambdaPWM:                                                   1  #>  boundMolecules:                                           1000  #>  maxSignal:                                                   1  #>  backgroundSignal:                                            0  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  #>  ChIP Profile options  #>   #>  chipMean:                                                  200  #>  chipSd:                                                    200  #>  chipSmooth:                                                250  #>  stepSize:                                                   10  #>   #> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"},{"path":"/reference/ploidy-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function ploidy  ~~ — ploidy-methods","title":"~~ Methods for Function ploidy  ~~ — ploidy-methods","text":"Accessor method ploidy slot parameterOptions object","code":""},{"path":"/reference/ploidy-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function ploidy  ~~ — ploidy-methods","text":"ploidy(object)","code":""},{"path":"/reference/ploidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor method for the ploidy slot in a\nparameterOptions object — ploidy","title":"Accessor method for the ploidy slot in a\nparameterOptions object — ploidy","text":"Accessor method ploidy slot parameterOptions object","code":""},{"path":"/reference/ploidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor method for the ploidy slot in a\nparameterOptions object — ploidy","text":"","code":"ploidy(object)"},{"path":"/reference/ploidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor method for the ploidy slot in a\nparameterOptions object — ploidy","text":"object object  parameterOptions object","code":""},{"path":"/reference/ploidy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor method for the ploidy slot in a\nparameterOptions object — ploidy","text":"Default value ploidy set 2. mentioned ChIPanalyser based model also considers ploidy organism interest however considers simple polyploidy (haploidy). model consider hybrids wheat.","code":""},{"path":"/reference/ploidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor method for the ploidy slot in a\nparameterOptions object — ploidy","text":"Returns value assigned ploidy slot parameterOptions object","code":""},{"path":"/reference/ploidy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor method for the ploidy slot in a\nparameterOptions object — ploidy","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/ploidy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor method for the ploidy slot in a\nparameterOptions object — ploidy","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/ploidy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor method for the ploidy slot in a\nparameterOptions object — ploidy","text":"","code":"# Building parameterOptions object OPP <- parameterOptions() #Setting new Value for maxSignal ploidy(OPP) #> [1] 2"},{"path":"/reference/ploidy_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function ploidy<-  ~~ — ploidy<--methods","title":"~~ Methods for Function ploidy<-  ~~ — ploidy<--methods","text":"Setter Method ploidy slot parameterOptions object","code":""},{"path":"/reference/ploidy_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function ploidy<-  ~~ — ploidy<--methods","text":"ploidy(object)<-value","code":""},{"path":"/reference/ploidy_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter Method for the ploidy slot in an\nparameterOptions object — ploidy<-","title":"Setter Method for the ploidy slot in an\nparameterOptions object — ploidy<-","text":"Setter Method ploidy slot parameterOptions object","code":""},{"path":"/reference/ploidy_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter Method for the ploidy slot in an\nparameterOptions object — ploidy<-","text":"","code":"ploidy(object)<- value"},{"path":"/reference/ploidy_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter Method for the ploidy slot in an\nparameterOptions object — ploidy<-","text":"object object parameterOptions object value value positive integer describes ploidy     organism interest.","code":""},{"path":"/reference/ploidy_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter Method for the ploidy slot in an\nparameterOptions object — ploidy<-","text":"Default value ploidy set 2. mentioned ChIPanalyser based model also considers ploidy organism however considers simple polyploidy (haploidy). T model consider hybrids wheat.","code":""},{"path":"/reference/ploidy_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter Method for the ploidy slot in an\nparameterOptions object — ploidy<-","text":"Returns parameterOptions object updated value ploidy slot.","code":""},{"path":"/reference/ploidy_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter Method for the ploidy slot in an\nparameterOptions object — ploidy<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/ploidy_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter Method for the ploidy slot in an\nparameterOptions object — ploidy<-","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/ploidy_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter Method for the ploidy slot in an\nparameterOptions object — ploidy<-","text":"","code":"# Building parameterOptions object OPP <- parameterOptions() #Setting new Value for maxSignal ploidy(OPP) <- 2"},{"path":"/reference/plotOccupancyProfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Occupancy Profiles — plotOccupancyProfile","title":"Plot Occupancy Profiles — plotOccupancyProfile","text":"plotOccupancyProfile plots predicted profiles. provided, functions also plot ChIP-seq profiles, PWMScores (Occupancy), chromatin States, Goodness Fit estimates gene information.","code":""},{"path":"/reference/plotOccupancyProfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Occupancy Profiles — plotOccupancyProfile","text":"","code":"plotOccupancyProfile(predictedProfile, ChIPScore = NULL,chromatinState = NULL,     occupancy = NULL,goodnessOfFit = NULL,PWM=FALSE,     geneRef = NULL,addLegend = TRUE,...)"},{"path":"/reference/plotOccupancyProfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Occupancy Profiles — plotOccupancyProfile","text":"predictedProfile predictedProfile either GRanges      containing predicted profiles one loci, loci selected one paramter,      loci selected parameter combinations selected. (see searchSites) ChIPScore ChIPScore ChIPscore object containing ChIPscore (    list numeric values representing ChIP scores (Experimental ChIP)) chromatinState chromatinState GRanges     containing accesible DNA sites chromatin States. occupancy occupancy GRanges genomicProfiles     object contaning PWM scores Occupancy ( see computeOccupancy) goodnessOfFit goodnessOfFit results     profileAccuracyEstimate function. PWM PWM logical value case occupancy     provided occupancy scores PWM scores hsould plotted.     Default set FALSE geneRef geneRef GRanges     containing gene information exons,introns, UTR's, enhancers     genetic element plotted. addLegend addLegend logical value defining legend added.     legend add elements provided. See details. ... graphical Parameter following : cex, cex.lab, cex.main,      densityCS , densityGR , ylab, xlab, main, colPred,     colChIP, colOccup, colCS, colGR, n_axis_ticks. See details.","code":""},{"path":"/reference/plotOccupancyProfile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Occupancy Profiles — plotOccupancyProfile","text":"predicted ChIP-seq like profiles computed, possible plot profiles. functions allows control graphical parameters. short: * col = color values - exact number colors colors  used colorRampPalettte. * cex = font sizes - text, axis labels main * Density = fill density chromatin state /geneRef blocks Pred = predictedProfile ChIP = ChIP score (Experimental ChIP data) CS = Chromatin States GR = Gene reference  Occup = Occupnacy locations","code":""},{"path":"/reference/plotOccupancyProfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Occupancy Profiles — plotOccupancyProfile","text":"Returns profile plot \"Occupancy\" y axis DNA position X- axis.","code":""},{"path":"/reference/plotOccupancyProfile.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot Occupancy Profiles — plotOccupancyProfile","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020)  Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/plotOccupancyProfile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Occupancy Profiles — plotOccupancyProfile","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/plotOccupancyProfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Occupancy Profiles — plotOccupancyProfile","text":"","code":"#Data extraction data(ChIPanalyserData) # path to Position Frequency Matrix PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #As an example of genome, this example will run on the Drosophila genome # \\donttest{ if(!require(\"BSgenome.Dmelanogaster.UCSC.dm6\", character.only = TRUE)){     if (!requireNamespace(\"BiocManager\", quietly=TRUE))         install.packages(\"BiocManager\")     BiocManager::install(\"BSgenome.Dmelanogaster.UCSC.dm6\")     } library(BSgenome.Dmelanogaster.UCSC.dm6) DNASequenceSet <- getSeq(BSgenome.Dmelanogaster.UCSC.dm6) #Building data objects GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\", BPFrequency=DNASequenceSet)   # Computing Genome Wide GenomeWide <- computeGenomeWideScores(DNASequenceSet = DNASequenceSet,     genomicProfiles = GPP) #> Extracting genome wide scores  #> Whole Genome ~ Both strands  #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Warning: 'subject' contains letters not in [ACGT] ==> assigned weight 0 to them #> Computing Mean waiting time   #Compute PWM Scores PWMScores <- computePWMScore(DNASequenceSet = DNASequenceSet,     genomicProfiles = GenomeWide,     loci = top, chromatinState = Access) #> PWM Scores Extraction #Compute Occupnacy Occupancy <- computeOccupancy(genomicProfiles = PWMScores) #> Computing Occupancy at sites higher than threshold.   #Compute ChIP profiles chipProfile <- computeChipProfile(loci = top,     genomicProfiles = Occupancy) #> Error in computeChipProfile(loci = top, genomicProfiles = Occupancy): could not find function \"computeChipProfile\"   #Plotting Profile plotOccupancyProfile(predictedProfile=chipProfile,     ChIPScore = chip,     chromatinState = Access,     occupancy = Occupancy,     geneRef =geneRef) #> Error in .is.genomicProfiles(predictedProfile): object 'chipProfile' not found  plotOccupancyProfile(predictedProfile=chipProfile,     ChIPScore = chip,     chromatinState = Access,     occupancy = Occupancy,     geneRef = geneRef,     colCS = c(\"red\",\"blue\"),     densityGR = 60) #> Error in .is.genomicProfiles(predictedProfile): object 'chipProfile' not found   # }"},{"path":"/reference/plotOptimalHeatMaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Heat Map of optimal Parameters — plotOptimalHeatMaps","title":"Heat Map of optimal Parameters — plotOptimalHeatMaps","text":"plotOptimalHeatMaps plot heat maps optimal Parameters highlight optimal combination lambdaPWM boundMolecules","code":""},{"path":"/reference/plotOptimalHeatMaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heat Map of optimal Parameters — plotOptimalHeatMaps","text":"","code":"plotOptimalHeatMaps(optimalParam,contour=TRUE,col=NULL,main=NULL,layout=TRUE,overlay=FALSE)"},{"path":"/reference/plotOptimalHeatMaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heat Map of optimal Parameters — plotOptimalHeatMaps","text":"optimalParam optimalParam list containing containing optimal matricies     (one one paramter selected). matricies     result computeOptimal function contour parameter logical. contour lines plotted? col col vector colours used heat map.     none specified, rainbow colours used. NOTE: colour     vector recyled enough colours provided. main main title. layout layout either TRUE FALSE specifying stadard     layout used . TRUE, heat map plotted     individual page heat map scale right side. overlay overlay either TRUE FALSE specifying     overlay plot produced. overlay plot takes top 10 percent     best performing parameters per scoring metric overlays     single plot. resulting plots shows optimal set paramters     metrics combined.","code":""},{"path":"/reference/plotOptimalHeatMaps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Heat Map of optimal Parameters — plotOptimalHeatMaps","text":"optimal set Parameters ( lambdaPWM boundMolecules ), possible plot results form heat map. heat map plotted seperate page layout = TRUE, layout= FALSE, user define wish layout heat maps.","code":""},{"path":"/reference/plotOptimalHeatMaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heat Map of optimal Parameters — plotOptimalHeatMaps","text":"Returns heat map optimal combinations lambdaPWM boundMolecules. x axis represents different value assigned lambda ( lambdaPWM ) y axis represents different values boundMolecules ( boundMolecules ).","code":""},{"path":"/reference/plotOptimalHeatMaps.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Heat Map of optimal Parameters — plotOptimalHeatMaps","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/plotOptimalHeatMaps.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Heat Map of optimal Parameters — plotOptimalHeatMaps","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/plotOptimalHeatMaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heat Map of optimal Parameters — plotOptimalHeatMaps","text":"","code":"#Data extraction data(ChIPanalyserData) # path to Position Frequency Matrix PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #As an example of genome, this example will run on the Drosophila genome # \\donttest{ if(!require(\"BSgenome.Dmelanogaster.UCSC.dm6\", character.only = TRUE)){     if (!requireNamespace(\"BiocManager\", quietly=TRUE))         install.packages(\"BiocManager\")     BiocManager::install(\"BSgenome.Dmelanogaster.UCSC.dm6\")     } library(BSgenome.Dmelanogaster.UCSC.dm6) DNASequenceSet <- getSeq(BSgenome.Dmelanogaster.UCSC.dm6)  #Building data objects GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\",BPFrequency=DNASequenceSet)  #Computing Optimal set of Parameters optimalParam <- computeOptimal(genomicProfiles = GPP,     DNASequenceSet = DNASequenceSet,     ChIPScore = chip,     chromatinState = Access,     parameterOptions = OPP,     parameter = \"all\",     peakMethod=\"moving_kernel\") #> Error in computeOptimal(genomicProfiles = GPP, DNASequenceSet = DNASequenceSet,     ChIPScore = chip, chromatinState = Access, parameterOptions = OPP,     parameter = \"all\", peakMethod = \"moving_kernel\"): unused argument (parameter = \"all\") plotOptimalHeatMaps(optimalParam) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function '%in%': object 'optimalParam' not found # }"},{"path":"/reference/processingChIP.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-processing ChIP-seq data — processingChIP","title":"Pre-processing ChIP-seq data — processingChIP","text":"processingChIP process extract ChIP scores set loci interest.","code":""},{"path":"/reference/processingChIP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-processing ChIP-seq data — processingChIP","text":"","code":"processingChIP(profile,loci=NULL,reduce=NULL,      peaks=NULL,chromatinState=NULL,parameterOptions=NULL,      cores=1)"},{"path":"/reference/processingChIP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre-processing ChIP-seq data — processingChIP","text":"profile profile path UCSC format file, GRanges data frame. input data  contain 4 columns:chromosome, start , end score. loci loci GRanges describing loci     ChIP scores extracted.     NULL, set Loci extracted profile. data provided split bins width equal lociWidth (Default 20kbp)      Default=NULL reduce reduce top regions select based mean ChIP score.     peaks provided, regions overlappling known peaks     selected based highest ChIP score. NULL, regions     considered. Default=NULL  parameterOptions parameterOptions     parameterOptions object containing chip     Parameters parsed ChIP score extraction. NULL,     parameterOptions built internally     default ChIP extraction parameters (see  chipSmooth,     chipSd chipMean)  Default=NULL peaks peaks path UCSC format file GRanges object containing     location ChIP peaks.  Default=NULL chromatinState chromatinState GRanges containing     Accessible DNA chromatin States provided, regions selected     contain accesible DNA.  Default=NULL cores cores number cores used extract ChIP scores. Default = 1","code":""},{"path":"/reference/processingChIP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pre-processing ChIP-seq data — processingChIP","text":"using computeOptimal, required supply real ChIP data order point comparison. corralation MSE Scores computed based well model fits biological data. processingChIP extract data ChIP data loci interest. using reduce option, function select top regions based peak height mean ChIP score. processingChIP also extract maxSignal backgroundSignal ChIP data parse parameterOptions object.","code":""},{"path":"/reference/processingChIP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre-processing ChIP-seq data — processingChIP","text":"Returns ChIPScore object containing extracted (normalised) ChIP scores, loci interest newly extracted Parameters(e.g. maxSignal)","code":""},{"path":"/reference/processingChIP.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pre-processing ChIP-seq data — processingChIP","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/processingChIP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pre-processing ChIP-seq data — processingChIP","text":"Patrick C.N. Martin <pcnmartin@gmail.com>","code":""},{"path":"/reference/processingChIP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-processing ChIP-seq data — processingChIP","text":"","code":"#Data extraction data(ChIPanalyserData)  ## Extracting ChIP scores at loci of interest  ChIP<-processingChIP(profile=chip, loci=top)"},{"path":"/reference/profileAccuracyEstimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimating Accuracy of predicted Profiles — profileAccuracyEstimate","title":"Estimating Accuracy of predicted Profiles — profileAccuracyEstimate","text":"profileAccuracyEstimate compare predicted ChIP-seq-like profile real ChIP-seq data return set metrics describing accurate predicted model compared real data.","code":""},{"path":"/reference/profileAccuracyEstimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimating Accuracy of predicted Profiles — profileAccuracyEstimate","text":"","code":"profileAccuracyEstimate(genomicProfiles,ChIPScore,       parameterOptions=NULL,method=\"all\",cores=1)"},{"path":"/reference/profileAccuracyEstimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimating Accuracy of predicted Profiles — profileAccuracyEstimate","text":"genomicProfiles genomicProfiles result computeChIPProfile ChIPScore ChIPScore result processingChIP. Extracted/Normalised     experimental ChIP scores.  parameterOptions parameterOptions     parameterOptions object paramter specification. method method method used assess model     quality agianst ChIP-seq data. Method can one following:     pearson, spearman, kendall, ks, geometric,fscore, MSE,.Fscore contains f-score, precision,recall, MCC,     Accuracy AUC ROC. cores cores number cores used extract ChIP scores. Default = 1","code":""},{"path":"/reference/profileAccuracyEstimate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimating Accuracy of predicted Profiles — profileAccuracyEstimate","text":"order assess quality model experimental ChIP-seq data, ChIPanalyser offers wide range method choose . methods also used computing optimal paramters.","code":""},{"path":"/reference/profileAccuracyEstimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimating Accuracy of predicted Profiles — profileAccuracyEstimate","text":"Returns list goodness fit metrics loci parameter selected.","code":""},{"path":"/reference/profileAccuracyEstimate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimating Accuracy of predicted Profiles — profileAccuracyEstimate","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/profileAccuracyEstimate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimating Accuracy of predicted Profiles — profileAccuracyEstimate","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/profileAccuracyEstimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimating Accuracy of predicted Profiles — profileAccuracyEstimate","text":"","code":"#Data extraction data(ChIPanalyserData) # path to Position Frequency Matrix PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #As an example of genome, this example will run on the Drosophila genome # \\donttest{   if(!require(\"BSgenome.Dmelanogaster.UCSC.dm6\", character.only = TRUE)){       if (!requireNamespace(\"BiocManager\", quietly=TRUE))           install.packages(\"BiocManager\")       BiocManager::install(\"BSgenome.Dmelanogaster.UCSC.dm6\")       }   library(BSgenome.Dmelanogaster.UCSC.dm6)   DNASequenceSet <- getSeq(BSgenome.Dmelanogaster.UCSC.dm6)   # Building genomicProfiles object   GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\", BPFrequency=DNASequenceSet)     # Computing Genome Wide   GenomeWide <- computeGenomeWideScore(genomicProfiles = GPP,       DNASequenceSet = DNASequenceSet) #> Error in computeGenomeWideScore(genomicProfiles = GPP, DNASequenceSet = DNASequenceSet): could not find function \"computeGenomeWideScore\"    #Compute PWM Scores   PWMScores <- computePWMScore(genomicProfiles = GenomeWide,        DNASequenceSet = DNASequenceSet, loci = top, chromatinState = Access) #> Error in .is.genomicProfiles(genomicProfiles): object 'GenomeWide' not found   #Compute Occupnacy   Occupancy <- computeOccupancy(genomicProfiles = PWMScores) #> Error in .is.genomicProfiles(genomicProfiles): object 'PWMScores' not found    #Compute ChIP profiles   chipProfile <- computeChIPProfile(genomicProfiles=Occupancy,loci=top) #> Error in .is.genomicProfiles(genomicProfiles): object 'Occupancy' not found #Estimating accuracy estimate AccuracyEstimate <- profileAccuracyEstimate(genomicProfiles = chipProfile,     ChIPScore = chip,     occupancyProfileParameters = OPP) #> Error in profileAccuracyEstimate(genomicProfiles = chipProfile, ChIPScore = chip,     occupancyProfileParameters = OPP): unused argument (occupancyProfileParameters = OPP) # }"},{"path":"/reference/profiles-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function profiles  ~~ — profiles-methods","title":"~~ Methods for Function profiles  ~~ — profiles-methods","text":"Accessor method profiles genomicProfiles object","code":""},{"path":"/reference/profiles-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function profiles  ~~ — profiles-methods","text":"profiles(oject) Computed PWM scores, Occupancy ChIP-seq like profiles loci interest paramter combination interest.","code":""},{"path":"/reference/removeBackground-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function removeBackground  ~~ — removeBackground-methods","title":"~~ Methods for Function removeBackground  ~~ — removeBackground-methods","text":"Accessor Method removeBackground slot parameterOptions object","code":""},{"path":"/reference/removeBackground-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function removeBackground  ~~ — removeBackground-methods","text":"removeBackground(object)","code":""},{"path":"/reference/removeBackground.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor Method for the removeBackground slot in a\nparameterOptions object — removeBackground","title":"Accessor Method for the removeBackground slot in a\nparameterOptions object — removeBackground","text":"Accessor Method removeBackground slot parameterOptions object","code":""},{"path":"/reference/removeBackground.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor Method for the removeBackground slot in a\nparameterOptions object — removeBackground","text":"","code":"removeBackground(object)"},{"path":"/reference/removeBackground.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor Method for the removeBackground slot in a\nparameterOptions object — removeBackground","text":"object object parameterOptions object","code":""},{"path":"/reference/removeBackground.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor Method for the removeBackground slot in a\nparameterOptions object — removeBackground","text":"numeric value describing threshold Occupancy signals must removed (Default set 0). removal Occupancy signals occur computing computeOccupancy (see computeOccupancy function)","code":""},{"path":"/reference/removeBackground.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor Method for the removeBackground slot in a\nparameterOptions object — removeBackground","text":"Returns value assigned removeBackground slot parameterOptions object","code":""},{"path":"/reference/removeBackground.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor Method for the removeBackground slot in a\nparameterOptions object — removeBackground","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/removeBackground.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor Method for the removeBackground slot in a\nparameterOptions object — removeBackground","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/removeBackground.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor Method for the removeBackground slot in a\nparameterOptions object — removeBackground","text":"","code":"#Building parameterOptions object OPP <- parameterOptions() #Accessing  Value for removeBackground removeBackground(OPP) #> [1] 0"},{"path":"/reference/removeBackground_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function removeBackground<-  ~~ — removeBackground<--methods","title":"~~ Methods for Function removeBackground<-  ~~ — removeBackground<--methods","text":"Setter Method removeBackground slot parameterOptions object","code":""},{"path":"/reference/removeBackground_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function removeBackground<-  ~~ — removeBackground<--methods","text":"removeBackground(object)<-value","code":""},{"path":"/reference/removeBackground_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter Method for the removeBackground slot in a\nparameterOptions object — removeBackground<-","title":"Setter Method for the removeBackground slot in a\nparameterOptions object — removeBackground<-","text":"Setter Method removeBackground slot parameterOptions object","code":""},{"path":"/reference/removeBackground_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter Method for the removeBackground slot in a\nparameterOptions object — removeBackground<-","text":"","code":"removeBackground(object) <-value"},{"path":"/reference/removeBackground_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter Method for the removeBackground slot in a\nparameterOptions object — removeBackground<-","text":"object object  parameterOptions object value value positive numerical value assigned     removeBackground slot parameterOptions     object. Default set 0.","code":""},{"path":"/reference/removeBackground_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter Method for the removeBackground slot in a\nparameterOptions object — removeBackground<-","text":"numeric value describing threshold Occupancy signals must removed (Default set 0). removal Occupancy signals occur computing computeOccupancy (see computeOccupancy function)","code":""},{"path":"/reference/removeBackground_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter Method for the removeBackground slot in a\nparameterOptions object — removeBackground<-","text":"Returns parameterOptions object  updated value removeBackground slot","code":""},{"path":"/reference/removeBackground_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter Method for the removeBackground slot in a\nparameterOptions object — removeBackground<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/removeBackground_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter Method for the removeBackground slot in a\nparameterOptions object — removeBackground<-","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/removeBackground_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter Method for the removeBackground slot in a\nparameterOptions object — removeBackground<-","text":"","code":"#Building parameterOptions object OPP <- parameterOptions() #Setting new Value for removeBackground removeBackground(OPP) <- 0.1"},{"path":"/reference/scores-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function scores  ~~ — scores-methods","title":"~~ Methods for Function scores  ~~ — scores-methods","text":"Accessor method scores slot ChIPScore object.","code":""},{"path":"/reference/scores-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function scores  ~~ — scores-methods","text":"scores(object) Extracted normalised ChIP scores loci interest.","code":""},{"path":"/reference/scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor Method for the scores slot in a\nChIPScore object — scores","title":"Accessor Method for the scores slot in a\nChIPScore object — scores","text":"Setter Method scores slot ChIPScore object","code":""},{"path":"/reference/scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor Method for the scores slot in a\nChIPScore object — scores","text":"","code":"scores(object)"},{"path":"/reference/scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor Method for the scores slot in a\nChIPScore object — scores","text":"object object ChIPScore object","code":""},{"path":"/reference/scores.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor Method for the scores slot in a\nChIPScore object — scores","text":"using processingChIP, functions return     name list normalised ChIP scores loci interest. functions enalbles     extract scores ChIPScore object.","code":""},{"path":"/reference/scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor Method for the scores slot in a\nChIPScore object — scores","text":"Returns value assigned scores slot ChIPScore object.","code":""},{"path":"/reference/scores.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor Method for the scores slot in a\nChIPScore object — scores","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94.","code":""},{"path":"/reference/scores.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor Method for the scores slot in a\nChIPScore object — scores","text":"Patrick C. N. Martin <p.martin@essex.ac.uk>","code":""},{"path":"/reference/scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor Method for the scores slot in a\nChIPScore object — scores","text":"","code":"# Loading data data(ChIPanalyserData)  chip<-processingChIP(chip,top) str(scores(chip)) #> List of 4 #>  $ chr3L:20300001..20320000: num [1:20000] 0 0 0 0 0 0 0 0 0 0 ... #>  $ chr2L:6480001..6500000  : num [1:20000] 0.116 0.116 0.116 0.116 0 ... #>  $ chr3R:16140001..16160000: num [1:20000] 0.0331 0.0331 0.0331 0.0331 0.0331 ... #>  $ chr2L:19500001..19520000: num [1:20000] 0.0773 0.0773 0.0773 0.0773 0.0773 ..."},{"path":"/reference/searchSites.html","id":null,"dir":"Reference","previous_headings":"","what":"Searching function for Sites above threshold and predicted ChIP-seq Profiles — searchSites","title":"Searching function for Sites above threshold and predicted ChIP-seq Profiles — searchSites","text":"searchSites function enabling quick extraction search parameter combinations /loci genomicProfiles object computeOccupancy onwards.","code":""},{"path":"/reference/searchSites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Searching function for Sites above threshold and predicted ChIP-seq Profiles — searchSites","text":"","code":"searchSites(Sites,lambdaPWM=\"all\",BoundMolecules=\"all\", Locus=\"all\")"},{"path":"/reference/searchSites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Searching function for Sites above threshold and predicted ChIP-seq Profiles — searchSites","text":"Sites Sites either genomicProfiles result computeOptimal lambdaPWM lambdaPWM numeric vector describing ScalingFactors     searched within Sites. BoundMolecules BoundMolecules numeric vector describing BoundMolecules     searched within Sites. Locus Locus character vector describing Loci     searched within Sites.","code":""},{"path":"/reference/searchSites.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Searching function for Sites above threshold and predicted ChIP-seq Profiles — searchSites","text":"testing numerous combinations lambdaPWM boundMolecules top many loci, can become challenging navigate large data output searchSites make searching slot lot easier. arguments left default value \"\", Parameters searched thus returning full list Sites threshold. value lambdaPWM user provided lambdaPWM selected (boundMolecules loci also selected). searchSites also works result computeOptimal.","code":""},{"path":"/reference/searchSites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Searching function for Sites above threshold and predicted ChIP-seq Profiles — searchSites","text":"Returns object time parsed function parameters /loci selected.","code":""},{"path":"/reference/searchSites.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Searching function for Sites above threshold and predicted ChIP-seq Profiles — searchSites","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/searchSites.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Searching function for Sites above threshold and predicted ChIP-seq Profiles — searchSites","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/searchSites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Searching function for Sites above threshold and predicted ChIP-seq Profiles — searchSites","text":"","code":"#Data extraction data(ChIPanalyserData) # path to Position Frequency Matrix PFM <- file.path(system.file(\"extdata\",package=\"ChIPanalyser\"),\"BEAF-32.pfm\") #As an example of genome, this example will run on the Drosophila genome # \\donttest{   if(!require(\"BSgenome.Dmelanogaster.UCSC.dm6\", character.only = TRUE)){       if (!requireNamespace(\"BiocManager\", quietly=TRUE))           install.packages(\"BiocManager\")       BiocManager::install(\"BSgenome.Dmelanogaster.UCSC.dm6\")       }   library(BSgenome.Dmelanogaster.UCSC.dm6)   DNASequenceSet <- getSeq(BSgenome.Dmelanogaster.UCSC.dm6)   # Building genomicProfiles object   GPP <- genomicProfiles(PFM=PFM,PFMFormat=\"JASPAR\", BPFrequency=DNASequenceSet)     # Computing Genome Wide   GenomeWide <- computeGenomeWideScore(genomicProfiles = GPP,       DNASequenceSet = DNASequenceSet) #> Error in computeGenomeWideScore(genomicProfiles = GPP, DNASequenceSet = DNASequenceSet): could not find function \"computeGenomeWideScore\"    #Compute PWM Scores   PWMScores <- computePWMScore(genomicProfiles = GenomeWide,        DNASequenceSet = DNASequenceSet, loci = top, chromatinState = Access) #> Error in .is.genomicProfiles(genomicProfiles): object 'GenomeWide' not found   #Compute Occupnacy   Occupancy <- computeOccupancy(genomicProfiles = PWMScores) #> Error in .is.genomicProfiles(genomicProfiles): object 'PWMScores' not found   searchSites(Occupancy,ScalingFactor=c(1,4), BoundMolecules = c(1,100),       Locus=\"eve\") #> Error in searchSites(Occupancy, ScalingFactor = c(1, 4), BoundMolecules = c(1,     100), Locus = \"eve\"): unused argument (ScalingFactor = c(1, 4))    #Compute ChIP profiles   chipProfile <- computeChIPProfile(genomicProfiles=Occupancy,loci=top) #> Error in .is.genomicProfiles(genomicProfiles): object 'Occupancy' not found   searchSites(chipProfile,ScalingFactor=c(1,4), BoundMolecules = c(1,100),       Locus=\"eve\") #> Error in searchSites(chipProfile, ScalingFactor = c(1, 4), BoundMolecules = c(1,     100), Locus = \"eve\"): unused argument (ScalingFactor = c(1, 4))  optimalParam <- computeOptimal(genomicProfiles = GPP,         DNASequenceSet = DNASequenceSet,         ChIPScore = chip,         chromatinState = Access,         parameterOptions = OPP,         parameter = \"all\",         peakMethod=\"moving_kernel\") #> Error in computeOptimal(genomicProfiles = GPP, DNASequenceSet = DNASequenceSet,     ChIPScore = chip, chromatinState = Access, parameterOptions = OPP,     parameter = \"all\", peakMethod = \"moving_kernel\"): unused argument (parameter = \"all\")  searchSites(optimalParam,ScalingFactor=c(1,4), BoundMolecules = c(1,100),     Locus=\"eve\") #> Error in searchSites(optimalParam, ScalingFactor = c(1, 4), BoundMolecules = c(1,     100), Locus = \"eve\"): unused argument (ScalingFactor = c(1, 4))  # }"},{"path":"/reference/setChromatinStates.html","id":null,"dir":"Reference","previous_headings":"","what":"setChromatinStates — setChromatinStates","title":"setChromatinStates — setChromatinStates","text":"setChromatinStates sets chromatin state affinity values GRanges object.","code":""},{"path":"/reference/setChromatinStates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setChromatinStates — setChromatinStates","text":"","code":"setChromatinStates(population,chromatinStates)"},{"path":"/reference/setChromatinStates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setChromatinStates — setChromatinStates","text":"population Population list containing individuals associated parameter. Must     contain chromatin state affinity values. See generateStartingPopulation. chromatinStates GRanges object containing chromatin state locations.","code":""},{"path":"/reference/setChromatinStates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"setChromatinStates — setChromatinStates","text":"Chromatin states can loaded R GRanges object. range represents extent certain chromatin state chromatin state type assigned meta data column called \"name\". affinity values names set accordingly.","code":""},{"path":"/reference/setChromatinStates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"setChromatinStates — setChromatinStates","text":"Returns GRange object affinity scores chromatin state range. Affinity scores placed DNAAffinity meta data column.","code":""},{"path":"/reference/setChromatinStates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"setChromatinStates — setChromatinStates","text":"Patrick C.N. Martin","code":""},{"path":"/reference/setChromatinStates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"setChromatinStates — setChromatinStates","text":"","code":"library(ChIPanalyser) # Input data  data(ChIPanalyserData)  pop <- 10 params <- c(\"N\",\"lambda\",\"PWMThreshold\", paste0(\"CS\",seq(1:11))) start_pop <- generateStartingPopulation(pop, params)  cs <- setChromatinStates(start_pop,cs)"},{"path":"/reference/show-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function show  ~~ — show-methods","title":"~~ Methods for Function show  ~~ — show-methods","text":"Show methods various objects","code":""},{"path":"/reference/show-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function show  ~~ — show-methods","text":"signature(object = \"ChIPScore\")  signature(object = \"genomicProfiles\")  signature(object = \"parameterOptions\")","code":""},{"path":"/reference/singleRun.html","id":null,"dir":"Reference","previous_headings":"","what":"singleRun — singleRun","title":"singleRun — singleRun","text":"singleRun runs ChIPanalyser optimal paramters found evolve function.","code":""},{"path":"/reference/singleRun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"singleRun — singleRun","text":"","code":"singleRun(indiv,DNAAffinity,             genomicProfiles,DNASequenceSet,             ChIPScore,fitness=\"all\")"},{"path":"/reference/singleRun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"singleRun — singleRun","text":"indiv Population list containing top scoring individual. Note     list length 1 containing another list parameter values. DNAAffinity GRanges object outputed setchromatinStates. genomicProfiles genomicProfiles object containing PWM scores desired metrics. Note     PWMThreshold, lambda N overwritten using values indiv. DNASequenceSet DNA string set object containing DNA sequence interest. ChIPScore ChIPScore object outputed processingChIP function. fitness character string describing metric used assess fitness     one following:\"geometric\",\"ks\",\"MSE\",\"pearson\",\"spearman\",\"kendall\",     \"recall\",\"precesion\",\"fscore\",\"MCC\",\"Accuracy\" \"AUC\".","code":""},{"path":"/reference/singleRun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"singleRun — singleRun","text":"genetic algorithm optimised, top individual may run get predicted ChIP profiles. use function requires extract steps order predict ChIP profiles. First, index top individual extracted (see getHighestFitnessSolutions). Second, using index, subset top individual GA population. Note done using \"[]\" single bracket notation , list length 1 containing another list parameter values required next steps. Yes, might seem annoying functions design list structures... Third, setchromatinStates using top individual list. add chromatin affinity values chromatinState GRanges. Use new chromatinState object new chromatinState object. Fourth, parse indiv list object singleRun.","code":""},{"path":"/reference/singleRun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"singleRun — singleRun","text":"Return list three elements. First element contains genomicProfiles object occupancy scores. Second element contains genomicProfiles objecy ChIP profile scores. Third element contains goodness fit metrics.","code":""},{"path":"/reference/singleRun.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"singleRun — singleRun","text":"Patrick C.N. Martin <pcnmartin@gmail.com","code":""},{"path":"/reference/singleRun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"singleRun — singleRun","text":"","code":"library(ChIPanalyser) data(ChIPanalyserData) # See GA vignette for usage"},{"path":"/reference/splitData.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Training and Testing data from ChIPscore objects — splitData","title":"Get Training and Testing data from ChIPscore objects — splitData","text":"splitData splits processed ChIP data training testing sets.","code":""},{"path":"/reference/splitData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Training and Testing data from ChIPscore objects — splitData","text":"","code":"splitData(ChIPscore,dist = c(80,20), as.proportion = TRUE)"},{"path":"/reference/splitData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Training and Testing data from ChIPscore objects — splitData","text":"ChIPscore ChIPscore object returned processingChIP dist .proportion TRUE, split data      desired proportions. Default sets 80% training      20% testing.     .proportion FALSE,vector 4 numeric      values describing start end training testing      respectively. .proportion Logical describing values provided dist     treated % training testing dist      considered start end loci selected      training testing respectively.","code":""},{"path":"/reference/splitData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Training and Testing data from ChIPscore objects — splitData","text":"Returns named list ChIPScore objects * trainingSet = ChIPscore containing training set * testingSet = ChIPscore containing testing set.","code":""},{"path":"/reference/splitData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Training and Testing data from ChIPscore objects — splitData","text":"Patrick C.N. Martin <pcnmartin@gmail.com","code":""},{"path":"/reference/splitData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Training and Testing data from ChIPscore objects — splitData","text":"","code":"library(ChIPanalyser) data(ChIPanalyserData) # See GA vignette for usage  test <- processingChIP(chip,top) usingDist <- splitData(test, dist = c(50,50),as.proportion = TRUE ) usingIndex <- splitData(test, dist = c(1,2,3,4),as.proportion = FALSE )"},{"path":"/reference/stepSize-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function stepSize  ~~ — stepSize-methods","title":"~~ Methods for Function stepSize  ~~ — stepSize-methods","text":"Accessor method stepSize slot parameterOptions object","code":""},{"path":"/reference/stepSize-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function stepSize  ~~ — stepSize-methods","text":"stepSize(object)","code":""},{"path":"/reference/stepSize.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor method of the stepSize slot in\nparameterOptions object — stepSize","title":"Accessor method of the stepSize slot in\nparameterOptions object — stepSize","text":"Accessor method stepSize slot parameterOptions object","code":""},{"path":"/reference/stepSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor method of the stepSize slot in\nparameterOptions object — stepSize","text":"","code":"stepSize(object)"},{"path":"/reference/stepSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor method of the stepSize slot in\nparameterOptions object — stepSize","text":"object object parameterOptions object.","code":""},{"path":"/reference/stepSize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor method of the stepSize slot in\nparameterOptions object — stepSize","text":"possible restrict size ChIP-seq-like profile produced computeChIPProfile. Instead returning ChIP-seq like score base pair, possible skip base pairs return predicted enrichement score every \"n\" base pair (n value assigned stepSize). reduce size output data (unless step size large, affect accuracy model). Default set 10 base pairs.","code":""},{"path":"/reference/stepSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor method of the stepSize slot in\nparameterOptions object — stepSize","text":"Returns value assigned stepSize slot parameterOptions","code":""},{"path":"/reference/stepSize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor method of the stepSize slot in\nparameterOptions object — stepSize","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/stepSize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor method of the stepSize slot in\nparameterOptions object — stepSize","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/stepSize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor method of the stepSize slot in\nparameterOptions object — stepSize","text":"","code":"# Building parameterOptions  object OPP <- parameterOptions() #Setting new Value for maxSignal stepSize(OPP) #> [1] 10"},{"path":"/reference/stepSize_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function stepSize<-  ~~ — stepSize<--methods","title":"~~ Methods for Function stepSize<-  ~~ — stepSize<--methods","text":"Setter Method stepSize slot parameterOptions","code":""},{"path":"/reference/stepSize_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function stepSize<-  ~~ — stepSize<--methods","text":"stepSize(object)<-value","code":""},{"path":"/reference/stepSize_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter Method for the stepSize slot in a\nparameterOptions — stepSize<-","title":"Setter Method for the stepSize slot in a\nparameterOptions — stepSize<-","text":"Setter Method stepSize slot parameterOptions","code":""},{"path":"/reference/stepSize_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter Method for the stepSize slot in a\nparameterOptions — stepSize<-","text":"","code":"stepSize(object) <- value"},{"path":"/reference/stepSize_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter Method for the stepSize slot in a\nparameterOptions — stepSize<-","text":"object object parameterOptions object value value positive numeric value assigned     stepSize slot parameterOptions object.     Default set 10 base pairs.","code":""},{"path":"/reference/stepSize_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter Method for the stepSize slot in a\nparameterOptions — stepSize<-","text":"possible restrict size ChIP-seq-like profile produced computeChIPProfile. Instead returning ChIP-seq like score base pair, possible skip base pairs return predicted enrichement score every \"n\" base pair (n value assigned stepSize). reduce size output data (unless step size large, affect accuracy model). Default set 10 base pairs.","code":""},{"path":"/reference/stepSize_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter Method for the stepSize slot in a\nparameterOptions — stepSize<-","text":"Returns parameterOptions object updated value stepSize slot.","code":""},{"path":"/reference/stepSize_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter Method for the stepSize slot in a\nparameterOptions — stepSize<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/stepSize_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter Method for the stepSize slot in a\nparameterOptions — stepSize<-","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/stepSize_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter Method for the stepSize slot in a\nparameterOptions — stepSize<-","text":"","code":"# Building parameterOptions  object OPP <- parameterOptions() #Setting new Value for maxSignal stepSize(OPP) <- 20"},{"path":"/reference/strandRule-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function strandRule  ~~ — strandRule-methods","title":"~~ Methods for Function strandRule  ~~ — strandRule-methods","text":"Accessor Method strandRule slot parameterOptions object","code":""},{"path":"/reference/strandRule-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function strandRule  ~~ — strandRule-methods","text":"strandRule(object)","code":""},{"path":"/reference/strandRule.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor Method for the strandRule slot in a\nparameterOptions object — strandRule","title":"Accessor Method for the strandRule slot in a\nparameterOptions object — strandRule","text":"Accessor Method strandRule slot parameterOptions object","code":""},{"path":"/reference/strandRule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor Method for the strandRule slot in a\nparameterOptions object — strandRule","text":"","code":"strandRule(object)"},{"path":"/reference/strandRule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor Method for the strandRule slot in a\nparameterOptions object — strandRule","text":"object object parameterOptions object","code":""},{"path":"/reference/strandRule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor Method for the strandRule slot in a\nparameterOptions object — strandRule","text":"computing PWM Scores whichstrand set \"+-\", strandRule determine handle strands ( one three options : \"mean\", \"max\", \"sum\"). set \"mean\", average PWM Score strand computed. set \"max\", highest PWM score strand selected finally \"sum\" sum score together.  Default set \"max\"","code":""},{"path":"/reference/strandRule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor Method for the strandRule slot in a\nparameterOptions object — strandRule","text":"Returns value assigned strandRule slot (one three options : \"mean\", \"max\", \"sum\") parameterOptions object","code":""},{"path":"/reference/strandRule.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor Method for the strandRule slot in a\nparameterOptions object — strandRule","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/strandRule.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor Method for the strandRule slot in a\nparameterOptions object — strandRule","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/strandRule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor Method for the strandRule slot in a\nparameterOptions object — strandRule","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects GPP <- parameterOptions( strandRule=\"max\") #Accesssing Value for strandRule strandRule(GPP) #> [1] \"max\""},{"path":"/reference/strandRule_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function strandRule<-  ~~ — strandRule<--methods","title":"~~ Methods for Function strandRule<-  ~~ — strandRule<--methods","text":"Setter method strandRule slot parameterOptions object.","code":""},{"path":"/reference/strandRule_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function strandRule<-  ~~ — strandRule<--methods","text":"strandRule(object)<-value","code":""},{"path":"/reference/strandRule_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter method for the strandRule slot in a\nparameterOptions object. — strandRule<-","title":"Setter method for the strandRule slot in a\nparameterOptions object. — strandRule<-","text":"Setter method strandRule slot parameterOptions object.","code":""},{"path":"/reference/strandRule_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter method for the strandRule slot in a\nparameterOptions object. — strandRule<-","text":"","code":"strandRule(object) <- value"},{"path":"/reference/strandRule_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter method for the strandRule slot in a\nparameterOptions object. — strandRule<-","text":"object object parameterOptions object value value character string can one following     `mean', `max', `sum'. apply whichstrand     `+-'. Default set `max'","code":""},{"path":"/reference/strandRule_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter method for the strandRule slot in a\nparameterOptions object. — strandRule<-","text":"computing PWM Scores whichstrand set `+-', strandRule determine handle strands ( one three options : `mean', `max', `sum'). set `mean', average PWM Score strand computed. set `max', highest PWM score strand selected finally `sum' sum score together. Default set `max'","code":""},{"path":"/reference/strandRule_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter method for the strandRule slot in a\nparameterOptions object. — strandRule<-","text":"Returns parameterOptions object updated value strandRule slot","code":""},{"path":"/reference/strandRule_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter method for the strandRule slot in a\nparameterOptions object. — strandRule<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/strandRule_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter method for the strandRule slot in a\nparameterOptions object. — strandRule<-","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/strandRule_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter method for the strandRule slot in a\nparameterOptions object. — strandRule<-","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects GPP <- parameterOptions(strandRule=\"max\") #Setting New Value for strandRule strandRule(GPP) <- \"mean\""},{"path":"/reference/whichstrand-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function whichstrand  ~~ — whichstrand-methods","title":"~~ Methods for Function whichstrand  ~~ — whichstrand-methods","text":"Accessor method whichstrand slot parameterOptions object","code":""},{"path":"/reference/whichstrand-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function whichstrand  ~~ — whichstrand-methods","text":"whichstrand(object)","code":""},{"path":"/reference/whichstrand.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor method for the whichstrand slot in a\nparameterOptions object — whichstrand","title":"Accessor method for the whichstrand slot in a\nparameterOptions object — whichstrand","text":"Accessor method whichstrand slot parameterOptions object","code":""},{"path":"/reference/whichstrand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor method for the whichstrand slot in a\nparameterOptions object — whichstrand","text":"","code":"whichstrand(object)"},{"path":"/reference/whichstrand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor method for the whichstrand slot in a\nparameterOptions object — whichstrand","text":"object object parameterOptions object","code":""},{"path":"/reference/whichstrand.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor method for the whichstrand slot in a\nparameterOptions object — whichstrand","text":"PWM Score may computed either positive strand (\"+\"), negative strand (\"-\") strands (\"+-\").","code":""},{"path":"/reference/whichstrand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor method for the whichstrand slot in a\nparameterOptions object — whichstrand","text":"Returns strand PWM Scores computed ( whichstrand parameterOptions object)","code":""},{"path":"/reference/whichstrand.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accessor method for the whichstrand slot in a\nparameterOptions object — whichstrand","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/whichstrand.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor method for the whichstrand slot in a\nparameterOptions object — whichstrand","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/whichstrand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor method for the whichstrand slot in a\nparameterOptions object — whichstrand","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects GPP <- parameterOptions( whichstrand=\"+-\") #Setting New Value for whichstrand whichstrand(GPP) #> [1] \"+-\""},{"path":"/reference/whichstrand_--methods.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function whichstrand<-  ~~ — whichstrand<--methods","title":"~~ Methods for Function whichstrand<-  ~~ — whichstrand<--methods","text":"Setter method whichstrand slot parameterOptions object","code":""},{"path":"/reference/whichstrand_--methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function whichstrand<-  ~~ — whichstrand<--methods","text":"whichstrand(object)<-value","code":""},{"path":"/reference/whichstrand_-.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter method for the whichstrand slot in a\nparameterOptions object — whichstrand<-","title":"Setter method for the whichstrand slot in a\nparameterOptions object — whichstrand<-","text":"Setter method whichstrand slot parameterOptions object","code":""},{"path":"/reference/whichstrand_-.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter method for the whichstrand slot in a\nparameterOptions object — whichstrand<-","text":"","code":"whichstrand(object) <- value"},{"path":"/reference/whichstrand_-.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter method for the whichstrand slot in a\nparameterOptions object — whichstrand<-","text":"object object parameterOptions object value value character string specifying strand     used compute PWM Scores. three available options     following: \"+\",\"-\" \"+-\". Default \"+-\"","code":""},{"path":"/reference/whichstrand_-.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setter method for the whichstrand slot in a\nparameterOptions object — whichstrand<-","text":"PWM Score may computed either positive strand (\"+\"), negative strand (\"-\") strands (\"+-\").","code":""},{"path":"/reference/whichstrand_-.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter method for the whichstrand slot in a\nparameterOptions object — whichstrand<-","text":"Returns parameterOptions object updated value whichstrand slot","code":""},{"path":"/reference/whichstrand_-.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Setter method for the whichstrand slot in a\nparameterOptions object — whichstrand<-","text":"Zabet NR, Adryan B (2015) Estimating binding properties transcription factors genome-wide binding profiles. Nucleic Acids Res., 43, 84–94. Patrick C.N. Martin Nicolae Radu Zabe (2020) Dissecting binding mechanisms transcription factors DNA using statistical thermodynamics framework. CSBJ, 18, 3590-3605.","code":""},{"path":"/reference/whichstrand_-.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setter method for the whichstrand slot in a\nparameterOptions object — whichstrand<-","text":"Patrick C. N. Martin <pm16057@essex.ac.uk>","code":""},{"path":"/reference/whichstrand_-.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter method for the whichstrand slot in a\nparameterOptions object — whichstrand<-","text":"","code":"# Loading data data(ChIPanalyserData)  #Building data objects GPP <- parameterOptions( whichstrand=\"+-\") #Setting New Value for whichstrand whichstrand(GPP) <- \"+\""}]
